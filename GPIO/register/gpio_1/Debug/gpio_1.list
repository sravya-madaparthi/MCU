
gpio_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000428  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000428  08000428  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000428  08000428  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800042c  0800042c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000430  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000434  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000434  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001331  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000496  00000000  00000000  00003365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00003800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6eb  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000213f  00000000  00000000  000231f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3268  00000000  00000000  00025331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000548  00000000  00000000  000e85dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e8b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000410 	.word	0x08000410

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000410 	.word	0x08000410

08000204 <main>:
#include "stm32f4xx.h"  // Change according to your STM32 series

void GPIO_Init(void);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    GPIO_Init();  // Initialize GPIO
 8000208:	f000 f814 	bl	8000234 <GPIO_Init>

    while (1) {
        if (!(GPIOC->IDR & (1 << 9))) { // Read PC9, check if switch is pressed (active LOW)
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <main+0x28>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000214:	2b00      	cmp	r3, #0
 8000216:	d104      	bne.n	8000222 <main+0x1e>
            GPIOA->BSRR = (1 << 8);     // Turn ON LED (Set PA8)
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <main+0x2c>)
 800021a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800021e:	619a      	str	r2, [r3, #24]
 8000220:	e7f4      	b.n	800020c <main+0x8>
        } else {
            GPIOA->BSRR = (1 << (8 + 16)); // Turn OFF LED (Reset PA8)
 8000222:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <main+0x2c>)
 8000224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000228:	619a      	str	r2, [r3, #24]
        if (!(GPIOC->IDR & (1 << 9))) { // Read PC9, check if switch is pressed (active LOW)
 800022a:	e7ef      	b.n	800020c <main+0x8>
 800022c:	40020800 	.word	0x40020800
 8000230:	40020000 	.word	0x40020000

08000234 <GPIO_Init>:
        }
    }
}

void GPIO_Init(void) {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOC
    RCC->AHB1ENR |= (1 << 0);  // Enable GPIOA clock
 8000238:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <GPIO_Init+0x88>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a1f      	ldr	r2, [pc, #124]	@ (80002bc <GPIO_Init+0x88>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 2);  // Enable GPIOC clock
 8000244:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <GPIO_Init+0x88>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a1c      	ldr	r2, [pc, #112]	@ (80002bc <GPIO_Init+0x88>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA8 as Output
    GPIOA->MODER &= ~(3 << (8 * 2)); // Clear MODER bits for PA8
 8000250:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <GPIO_Init+0x8c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1a      	ldr	r2, [pc, #104]	@ (80002c0 <GPIO_Init+0x8c>)
 8000256:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800025a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (8 * 2));  // Set PA8 as General Purpose Output Mode
 800025c:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <GPIO_Init+0x8c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <GPIO_Init+0x8c>)
 8000262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000266:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 8);      // Set PA8 as Push-Pull
 8000268:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <GPIO_Init+0x8c>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a14      	ldr	r2, [pc, #80]	@ (80002c0 <GPIO_Init+0x8c>)
 800026e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000272:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR &= ~(3 << (8 * 2)); // Low speed
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <GPIO_Init+0x8c>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <GPIO_Init+0x8c>)
 800027a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800027e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3 << (8 * 2)); // No pull-up, pull-down
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <GPIO_Init+0x8c>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <GPIO_Init+0x8c>)
 8000286:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800028a:	60d3      	str	r3, [r2, #12]

    // Configure PC9 as Input with Pull-up
    GPIOC->MODER &= ~(3 << (9 * 2)); // Set PC9 as Input mode
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <GPIO_Init+0x90>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <GPIO_Init+0x90>)
 8000292:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000296:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (9 * 2)); // Clear bits
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <GPIO_Init+0x90>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <GPIO_Init+0x90>)
 800029e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002a2:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (9 * 2));  // Enable pull-up for PC9
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <GPIO_Init+0x90>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a06      	ldr	r2, [pc, #24]	@ (80002c4 <GPIO_Init+0x90>)
 80002aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ae:	60d3      	str	r3, [r2, #12]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40020800 	.word	0x40020800

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <NMI_Handler+0x4>

080002d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <MemManage_Handler+0x4>

080002e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <BusFault_Handler+0x4>

080002e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <UsageFault_Handler+0x4>

080002f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031e:	f000 f83f 	bl	80003a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <SystemInit+0x20>)
 800032e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000332:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <SystemInit+0x20>)
 8000334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800034c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000384 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000350:	f7ff ffea 	bl	8000328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800037a:	f000 f825 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037e:	f7ff ff41 	bl	8000204 <main>
  bx  lr    
 8000382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000390:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 8000394:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000398:	20000024 	.word	0x20000024

0800039c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <HAL_IncTick+0x20>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <HAL_IncTick+0x24>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4413      	add	r3, r2
 80003b0:	4a04      	ldr	r2, [pc, #16]	@ (80003c4 <HAL_IncTick+0x24>)
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000
 80003c4:	20000020 	.word	0x20000020

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000404 <__libc_init_array+0x3c>)
 80003ce:	1b64      	subs	r4, r4, r5
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2600      	movs	r6, #0
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	@ (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2600      	movs	r6, #0
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
