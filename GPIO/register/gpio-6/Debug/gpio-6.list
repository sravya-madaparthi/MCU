
gpio-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004c0  080004c0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004c0  080004c0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004cc  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004cc  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000139c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ef  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000038c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6eb  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021b8  00000000  00000000  000232c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c327d  00000000  00000000  00025479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e86f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000e873c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e8cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a8 	.word	0x080004a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a8 	.word	0x080004a8

08000204 <main>:
void GPIO_Init(void);
void delay_ms(uint32_t ms);

volatile uint8_t press_count = 0;  // To count switch presses

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    GPIO_Init();  // Initialize GPIO
 8000208:	f000 f846 	bl	8000298 <GPIO_Init>

    while (1) {
        if (!(GPIOB->IDR & (1 << 8))) {  // Check if Switch (PB8) is pressed
 800020c:	4b1f      	ldr	r3, [pc, #124]	@ (800028c <main+0x88>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1f9      	bne.n	800020c <main+0x8>
            press_count++;  // Increment switch press count
 8000218:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <main+0x8c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	3301      	adds	r3, #1
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b1b      	ldr	r3, [pc, #108]	@ (8000290 <main+0x8c>)
 8000224:	701a      	strb	r2, [r3, #0]
            while (!(GPIOB->IDR & (1 << 8))); // Wait for switch release (debounce)
 8000226:	bf00      	nop
 8000228:	4b18      	ldr	r3, [pc, #96]	@ (800028c <main+0x88>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0f9      	beq.n	8000228 <main+0x24>

            if (press_count == 1) {
 8000234:	4b16      	ldr	r3, [pc, #88]	@ (8000290 <main+0x8c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b01      	cmp	r3, #1
 800023c:	d103      	bne.n	8000246 <main+0x42>
                GPIOA->BSRR = (1 << 7);  // Turn ON LED1 (PA7)
 800023e:	4b15      	ldr	r3, [pc, #84]	@ (8000294 <main+0x90>)
 8000240:	2280      	movs	r2, #128	@ 0x80
 8000242:	619a      	str	r2, [r3, #24]
 8000244:	e012      	b.n	800026c <main+0x68>
            } else if (press_count == 2) {
 8000246:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <main+0x8c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	2b02      	cmp	r3, #2
 800024e:	d104      	bne.n	800025a <main+0x56>
                GPIOA->BSRR = (1 << 8);  // Turn ON LED2 (PA8)
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <main+0x90>)
 8000252:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000256:	619a      	str	r2, [r3, #24]
 8000258:	e008      	b.n	800026c <main+0x68>
            } else if (press_count == 3) {
 800025a:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <main+0x8c>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b03      	cmp	r3, #3
 8000262:	d103      	bne.n	800026c <main+0x68>
                GPIOA->BSRR = (1 << 9);  // Turn ON LED3 (PA9)
 8000264:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <main+0x90>)
 8000266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800026a:	619a      	str	r2, [r3, #24]
            }

            delay_ms(200);  // Debounce delay
 800026c:	20c8      	movs	r0, #200	@ 0xc8
 800026e:	f000 f85d 	bl	800032c <delay_ms>

            // Turn OFF all LEDs when switch is released
            GPIOA->BSRR = (1 << (7 + 16)) | (1 << (8 + 16)) | (1 << (9 + 16));
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <main+0x90>)
 8000274:	f04f 7260 	mov.w	r2, #58720256	@ 0x3800000
 8000278:	619a      	str	r2, [r3, #24]

            if (press_count >= 3) {
 800027a:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <main+0x8c>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2b02      	cmp	r3, #2
 8000282:	d9c3      	bls.n	800020c <main+0x8>
                press_count = 0;  // Reset count after 3 presses
 8000284:	4b02      	ldr	r3, [pc, #8]	@ (8000290 <main+0x8c>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
        if (!(GPIOB->IDR & (1 << 8))) {  // Check if Switch (PB8) is pressed
 800028a:	e7bf      	b.n	800020c <main+0x8>
 800028c:	40020400 	.word	0x40020400
 8000290:	20000020 	.word	0x20000020
 8000294:	40020000 	.word	0x40020000

08000298 <GPIO_Init>:
            }
        }
    }
}

void GPIO_Init(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOB
    RCC->AHB1ENR |= (1 << 0);  // Enable GPIOA clock
 800029c:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <GPIO_Init+0x88>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000320 <GPIO_Init+0x88>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 1);  // Enable GPIOB clock
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <GPIO_Init+0x88>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000320 <GPIO_Init+0x88>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA7, PA8, PA9 as Output (LEDs)
    GPIOA->MODER &= ~((3 << (7 * 2)) | (3 << (8 * 2)) | (3 << (9 * 2))); // Clear MODER bits
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <GPIO_Init+0x8c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000324 <GPIO_Init+0x8c>)
 80002ba:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80002be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((1 << (7 * 2)) | (1 << (8 * 2)) | (1 << (9 * 2)));  // Set as Output
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <GPIO_Init+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a17      	ldr	r2, [pc, #92]	@ (8000324 <GPIO_Init+0x8c>)
 80002c6:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 7) | (1 << 8) | (1 << 9)); // Set as Push-Pull
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <GPIO_Init+0x8c>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <GPIO_Init+0x8c>)
 80002d2:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 80002d6:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR &= ~((3 << (7 * 2)) | (3 << (8 * 2)) | (3 << (9 * 2))); // Low speed
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <GPIO_Init+0x8c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <GPIO_Init+0x8c>)
 80002de:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80002e2:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3 << (7 * 2)) | (3 << (8 * 2)) | (3 << (9 * 2))); // No pull-up/down
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <GPIO_Init+0x8c>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <GPIO_Init+0x8c>)
 80002ea:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80002ee:	60d3      	str	r3, [r2, #12]

    // Configure PB8 as Input with Pull-up (Switch)
    GPIOB->MODER &= ~(3 << (8 * 2)); // Set PB8 as Input
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <GPIO_Init+0x90>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000328 <GPIO_Init+0x90>)
 80002f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002fa:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << (8 * 2)); // Clear bits
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <GPIO_Init+0x90>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <GPIO_Init+0x90>)
 8000302:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000306:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (8 * 2));  // Enable pull-up for PB8
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <GPIO_Init+0x90>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <GPIO_Init+0x90>)
 800030e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000312:	60d3      	str	r3, [r2, #12]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40020400 	.word	0x40020400

0800032c <delay_ms>:

void delay_ms(uint32_t ms) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) { // Approximate delay for STM32F4 @16MHz
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e003      	b.n	8000342 <delay_ms+0x16>
        __NOP();
 800033a:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) { // Approximate delay for STM32F4 @16MHz
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	429a      	cmp	r2, r3
 8000350:	d3f3      	bcc.n	800033a <delay_ms+0xe>
    }
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 f83f 	bl	8000438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <SystemInit+0x20>)
 80003c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ca:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <SystemInit+0x20>)
 80003cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800041c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e8:	f7ff ffea 	bl	80003c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003ec:	480c      	ldr	r0, [pc, #48]	@ (8000420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ee:	490d      	ldr	r1, [pc, #52]	@ (8000424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f4:	e002      	b.n	80003fc <LoopCopyDataInit>

080003f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fa:	3304      	adds	r3, #4

080003fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000400:	d3f9      	bcc.n	80003f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000402:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000404:	4c0a      	ldr	r4, [pc, #40]	@ (8000430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000408:	e001      	b.n	800040e <LoopFillZerobss>

0800040a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800040c:	3204      	adds	r2, #4

0800040e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000410:	d3fb      	bcc.n	800040a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000412:	f000 f825 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000416:	f7ff fef5 	bl	8000204 <main>
  bx  lr    
 800041a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800041c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000428:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 800042c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000430:	20000028 	.word	0x20000028

08000434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_IncTick+0x20>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <HAL_IncTick+0x24>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4413      	add	r3, r2
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_IncTick+0x24>)
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	20000024 	.word	0x20000024

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4d0d      	ldr	r5, [pc, #52]	@ (8000498 <__libc_init_array+0x38>)
 8000464:	4c0d      	ldr	r4, [pc, #52]	@ (800049c <__libc_init_array+0x3c>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	2600      	movs	r6, #0
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	4d0b      	ldr	r5, [pc, #44]	@ (80004a0 <__libc_init_array+0x40>)
 8000472:	4c0c      	ldr	r4, [pc, #48]	@ (80004a4 <__libc_init_array+0x44>)
 8000474:	f000 f818 	bl	80004a8 <_init>
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	2600      	movs	r6, #0
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f855 3b04 	ldr.w	r3, [r5], #4
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c0 	.word	0x080004c0
 80004a4:	080004c4 	.word	0x080004c4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
