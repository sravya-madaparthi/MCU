
gpio-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800048c  0800048c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800048c  0800048c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800048c  0800048c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800048c  0800048c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000490  08000490  00001490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000494  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000498  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000498  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001395  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ed  00000000  00000000  000033c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000038b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000145  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6eb  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000219a  00000000  00000000  000232b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c327a  00000000  00000000  00025452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e86cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  000e8710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e8c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000474 	.word	0x08000474

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000474 	.word	0x08000474

08000204 <main>:
#include "stm32f4xx.h"  // Change according to your STM32 series

void GPIO_Init(void);
void delay_ms(uint32_t ms);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    GPIO_Init();  // Initialize GPIO
 800020a:	f000 f82b 	bl	8000264 <GPIO_Init>
    uint8_t ledState = 0;  // LED state (0 = OFF, 1 = ON)
 800020e:	2300      	movs	r3, #0
 8000210:	71fb      	strb	r3, [r7, #7]

    while (1) {
        if (!(GPIOC->IDR & (1 << 9))) { // Check if button is pressed (PC9 is LOW)
 8000212:	4b12      	ldr	r3, [pc, #72]	@ (800025c <main+0x58>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1f9      	bne.n	8000212 <main+0xe>
            delay_ms(200);  // Simple debounce delay
 800021e:	20c8      	movs	r0, #200	@ 0xc8
 8000220:	f000 f86a 	bl	80002f8 <delay_ms>
            while (!(GPIOC->IDR & (1 << 9))); // Wait for button release
 8000224:	bf00      	nop
 8000226:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <main+0x58>)
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f9      	beq.n	8000226 <main+0x22>

            ledState = !ledState; // Toggle LED state
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf0c      	ite	eq
 8000238:	2301      	moveq	r3, #1
 800023a:	2300      	movne	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	71fb      	strb	r3, [r7, #7]

            if (ledState) {
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d004      	beq.n	8000250 <main+0x4c>
                GPIOA->BSRR = (1 << 8);  // Turn ON LED (Set PA8)
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <main+0x5c>)
 8000248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800024c:	619a      	str	r2, [r3, #24]
 800024e:	e7e0      	b.n	8000212 <main+0xe>
            } else {
                GPIOA->BSRR = (1 << (8 + 16)); // Turn OFF LED (Reset PA8)
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <main+0x5c>)
 8000252:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000256:	619a      	str	r2, [r3, #24]
        if (!(GPIOC->IDR & (1 << 9))) { // Check if button is pressed (PC9 is LOW)
 8000258:	e7db      	b.n	8000212 <main+0xe>
 800025a:	bf00      	nop
 800025c:	40020800 	.word	0x40020800
 8000260:	40020000 	.word	0x40020000

08000264 <GPIO_Init>:
            }
        }
    }
}

void GPIO_Init(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOC
    RCC->AHB1ENR |= (1 << 0);  // Enable GPIOA clock
 8000268:	4b20      	ldr	r3, [pc, #128]	@ (80002ec <GPIO_Init+0x88>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026c:	4a1f      	ldr	r2, [pc, #124]	@ (80002ec <GPIO_Init+0x88>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 2);  // Enable GPIOC clock
 8000274:	4b1d      	ldr	r3, [pc, #116]	@ (80002ec <GPIO_Init+0x88>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a1c      	ldr	r2, [pc, #112]	@ (80002ec <GPIO_Init+0x88>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA8 as Output (LED)
    GPIOA->MODER &= ~(3 << (8 * 2)); // Clear MODER bits for PA8
 8000280:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <GPIO_Init+0x8c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1a      	ldr	r2, [pc, #104]	@ (80002f0 <GPIO_Init+0x8c>)
 8000286:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800028a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (8 * 2));  // Set PA8 as General Purpose Output Mode
 800028c:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <GPIO_Init+0x8c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a17      	ldr	r2, [pc, #92]	@ (80002f0 <GPIO_Init+0x8c>)
 8000292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000296:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 8);      // Set PA8 as Push-Pull
 8000298:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <GPIO_Init+0x8c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <GPIO_Init+0x8c>)
 800029e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80002a2:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR &= ~(3 << (8 * 2)); // Low speed
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <GPIO_Init+0x8c>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <GPIO_Init+0x8c>)
 80002aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ae:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3 << (8 * 2)); // No pull-up, pull-down
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <GPIO_Init+0x8c>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <GPIO_Init+0x8c>)
 80002b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ba:	60d3      	str	r3, [r2, #12]

    // Configure PC9 as Input with Pull-up (Button)
    GPIOC->MODER &= ~(3 << (9 * 2)); // Set PC9 as Input mode
 80002bc:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <GPIO_Init+0x90>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <GPIO_Init+0x90>)
 80002c2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002c6:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (9 * 2)); // Clear bits
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <GPIO_Init+0x90>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a09      	ldr	r2, [pc, #36]	@ (80002f4 <GPIO_Init+0x90>)
 80002ce:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002d2:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (9 * 2));  // Enable pull-up for PC9
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <GPIO_Init+0x90>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a06      	ldr	r2, [pc, #24]	@ (80002f4 <GPIO_Init+0x90>)
 80002da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40020800 	.word	0x40020800

080002f8 <delay_ms>:

void delay_ms(uint32_t ms) {
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) { // Approximate delay for STM32F4 @16MHz
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	e003      	b.n	800030e <delay_ms+0x16>
        __NOP();
 8000306:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) { // Approximate delay for STM32F4 @16MHz
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000314:	fb02 f303 	mul.w	r3, r2, r3
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	429a      	cmp	r2, r3
 800031c:	d3f3      	bcc.n	8000306 <delay_ms+0xe>
    }
}
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <NMI_Handler+0x4>

08000334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <HardFault_Handler+0x4>

0800033c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <MemManage_Handler+0x4>

08000344 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <UsageFault_Handler+0x4>

08000354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f83f 	bl	8000404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <SystemInit+0x20>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000396:	4a05      	ldr	r2, [pc, #20]	@ (80003ac <SystemInit+0x20>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003b4:	f7ff ffea 	bl	800038c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	@ (80003ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	@ (80003f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	@ (80003fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003de:	f000 f825 	bl	800042c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f7ff ff0f 	bl	8000204 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f4:	08000494 	.word	0x08000494
  ldr r2, =_sbss
 80003f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003fc:	20000024 	.word	0x20000024

08000400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <HAL_IncTick+0x20>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <HAL_IncTick+0x24>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <HAL_IncTick+0x24>)
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	20000020 	.word	0x20000020

0800042c <__libc_init_array>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4d0d      	ldr	r5, [pc, #52]	@ (8000464 <__libc_init_array+0x38>)
 8000430:	4c0d      	ldr	r4, [pc, #52]	@ (8000468 <__libc_init_array+0x3c>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	2600      	movs	r6, #0
 8000438:	42a6      	cmp	r6, r4
 800043a:	d109      	bne.n	8000450 <__libc_init_array+0x24>
 800043c:	4d0b      	ldr	r5, [pc, #44]	@ (800046c <__libc_init_array+0x40>)
 800043e:	4c0c      	ldr	r4, [pc, #48]	@ (8000470 <__libc_init_array+0x44>)
 8000440:	f000 f818 	bl	8000474 <_init>
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	2600      	movs	r6, #0
 800044a:	42a6      	cmp	r6, r4
 800044c:	d105      	bne.n	800045a <__libc_init_array+0x2e>
 800044e:	bd70      	pop	{r4, r5, r6, pc}
 8000450:	f855 3b04 	ldr.w	r3, [r5], #4
 8000454:	4798      	blx	r3
 8000456:	3601      	adds	r6, #1
 8000458:	e7ee      	b.n	8000438 <__libc_init_array+0xc>
 800045a:	f855 3b04 	ldr.w	r3, [r5], #4
 800045e:	4798      	blx	r3
 8000460:	3601      	adds	r6, #1
 8000462:	e7f2      	b.n	800044a <__libc_init_array+0x1e>
 8000464:	0800048c 	.word	0x0800048c
 8000468:	0800048c 	.word	0x0800048c
 800046c:	0800048c 	.word	0x0800048c
 8000470:	08000490 	.word	0x08000490

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
