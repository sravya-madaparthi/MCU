
hal-gpio-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c40  08001c40  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001c40  08001c40  00002c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c48  08001c48  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c48  08001c48  00002c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c4c  08001c4c  00002c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001c50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001cb8  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001cb8  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e65  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fac  00000000  00000000  00006efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00007eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032f  00000000  00000000  00008328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216e5  00000000  00000000  00008657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005161  00000000  00000000  00029d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c95d2  00000000  00000000  0002ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f846f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001780  00000000  00000000  000f84b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f9c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001bd8 	.word	0x08001bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001bd8 	.word	0x08001bd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d013      	beq.n	80002f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d00b      	beq.n	80002f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002d8:	e000      	b.n	80002dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <main>:
void delay_ms(uint32_t ms);

// Global variable to count switch presses
uint8_t press_count = 0;

int main(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    HAL_Init();               // Initialize HAL Library
 8000304:	f000 f9f8 	bl	80006f8 <HAL_Init>
    SystemClock_Config();      // Configure System Clock
 8000308:	f000 f86d 	bl	80003e6 <SystemClock_Config>
    MX_GPIO_Init();            // Initialize GPIO
 800030c:	f000 f872 	bl	80003f4 <MX_GPIO_Init>

    while (1) {
        // Check if switch (PC13) is pressed
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000314:	481b      	ldr	r0, [pc, #108]	@ (8000384 <main+0x84>)
 8000316:	f000 fcff 	bl	8000d18 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f7      	bne.n	8000310 <main+0x10>
            HAL_Delay(200); // Debounce delay
 8000320:	20c8      	movs	r0, #200	@ 0xc8
 8000322:	f000 fa5b 	bl	80007dc <HAL_Delay>

            // Wait for switch release
            while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000326:	bf00      	nop
 8000328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032c:	4815      	ldr	r0, [pc, #84]	@ (8000384 <main+0x84>)
 800032e:	f000 fcf3 	bl	8000d18 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f7      	beq.n	8000328 <main+0x28>

            press_count++;  // Increase press count
 8000338:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <main+0x88>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <main+0x88>)
 8000342:	701a      	strb	r2, [r3, #0]

            // Reset press count after 3 presses
            if (press_count > 3) {
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <main+0x88>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d902      	bls.n	8000352 <main+0x52>
                press_count = 1;
 800034c:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <main+0x88>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
            }

            // Toggle LEDs based on press count
            toggle_led(GPIOA, GPIO_PIN_5, press_count);      // Toggle LED1 (PA5)
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <main+0x88>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	2120      	movs	r1, #32
 800035a:	480c      	ldr	r0, [pc, #48]	@ (800038c <main+0x8c>)
 800035c:	f000 f81a 	bl	8000394 <toggle_led>
            toggle_led(GPIOA, GPIO_PIN_7, press_count * 3);  // Toggle LED2 (PA7)
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <main+0x88>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	4413      	add	r3, r2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	4806      	ldr	r0, [pc, #24]	@ (800038c <main+0x8c>)
 8000372:	f000 f80f 	bl	8000394 <toggle_led>

            // Print press count to SWV ITM Data Console
            printf("Switch pressed: %d times\r\n", press_count);
 8000376:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <main+0x88>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <main+0x90>)
 800037e:	f000 fdbf 	bl	8000f00 <iprintf>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000382:	e7c5      	b.n	8000310 <main+0x10>
 8000384:	40020800 	.word	0x40020800
 8000388:	20000084 	.word	0x20000084
 800038c:	40020000 	.word	0x40020000
 8000390:	08001bf0 	.word	0x08001bf0

08000394 <toggle_led>:
        }
    }
}

// Function to toggle an LED multiple times
void toggle_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t times) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
 80003a0:	4613      	mov	r3, r2
 80003a2:	707b      	strb	r3, [r7, #1]
    for (uint8_t i = 0; i < times; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e014      	b.n	80003d4 <toggle_led+0x40>
        HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80003aa:	887b      	ldrh	r3, [r7, #2]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 fcca 	bl	8000d48 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 80003b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003b8:	f000 fa10 	bl	80007dc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	4619      	mov	r1, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 fcc1 	bl	8000d48 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 80003c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003ca:	f000 fa07 	bl	80007dc <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	3301      	adds	r3, #1
 80003d2:	73fb      	strb	r3, [r7, #15]
 80003d4:	7bfa      	ldrb	r2, [r7, #15]
 80003d6:	787b      	ldrb	r3, [r7, #1]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d3e6      	bcc.n	80003aa <toggle_led+0x16>
    }
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void) {
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
    // System clock configuration can be generated using STM32CubeMX
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <MX_GPIO_Init>:

// GPIO Initialization
static void MX_GPIO_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

    // Enable GPIOA and GPIOC clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	4b1c      	ldr	r3, [pc, #112]	@ (8000480 <MX_GPIO_Init+0x8c>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	4a1b      	ldr	r2, [pc, #108]	@ (8000480 <MX_GPIO_Init+0x8c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6313      	str	r3, [r2, #48]	@ 0x30
 800041a:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <MX_GPIO_Init+0x8c>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <MX_GPIO_Init+0x8c>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <MX_GPIO_Init+0x8c>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
 8000436:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_GPIO_Init+0x8c>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	f003 0304 	and.w	r3, r3, #4
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

    // Configure PA5 and PA7 as Output (LEDs)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8000442:	23a0      	movs	r3, #160	@ 0xa0
 8000444:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	480a      	ldr	r0, [pc, #40]	@ (8000484 <MX_GPIO_Init+0x90>)
 800045a:	f000 fac9 	bl	80009f0 <HAL_GPIO_Init>

    // Configure PC13 as Input (Onboard Button) with Pull-up
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4619      	mov	r1, r3
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_GPIO_Init+0x94>)
 8000474:	f000 fabc 	bl	80009f0 <HAL_GPIO_Init>
}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40023800 	.word	0x40023800
 8000484:	40020000 	.word	0x40020000
 8000488:	40020800 	.word	0x40020800

0800048c <_write>:
void delay_ms(uint32_t ms) {
    HAL_Delay(ms);
}

// Redirect printf to ITM (SWV Data Console)
int _write(int file, char *ptr, int len) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e009      	b.n	80004b2 <_write+0x26>
        ITM_SendChar(*ptr++);
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	60ba      	str	r2, [r7, #8]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff02 	bl	80002b0 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	3301      	adds	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dbf1      	blt.n	800049e <_write+0x12>
    }
    return len;
 80004ba:	687b      	ldr	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_MspInit+0x4c>)
 80004d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <HAL_MspInit+0x4c>)
 80004d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <HAL_MspInit+0x4c>)
 80004dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_MspInit+0x4c>)
 80004ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ee:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <HAL_MspInit+0x4c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_MspInit+0x4c>)
 80004f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000502:	2007      	movs	r0, #7
 8000504:	f000 fa40 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40023800 	.word	0x40023800

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <UsageFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056a:	f000 f917 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}

08000572 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	e00a      	b.n	800059a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000584:	f3af 8000 	nop.w
 8000588:	4601      	mov	r1, r0
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	60ba      	str	r2, [r7, #8]
 8000590:	b2ca      	uxtb	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	3301      	adds	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbf0      	blt.n	8000584 <_read+0x12>
  }

  return len;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005d4:	605a      	str	r2, [r3, #4]
  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_isatty>:

int _isatty(int file)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ec:	2301      	movs	r3, #1
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f000 fd00 	bl	8001048 <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20020000 	.word	0x20020000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000088 	.word	0x20000088
 800067c:	200001e0 	.word	0x200001e0

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <SystemInit+0x20>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <SystemInit+0x20>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006a8:	f7ff ffea 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	@ (80006e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	@ (80006e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	@ (80006f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f000 fcbf 	bl	8001054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006d6:	f7ff fe13 	bl	8000300 <main>
  bx  lr    
 80006da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006e8:	08001c50 	.word	0x08001c50
  ldr r2, =_sbss
 80006ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006f0:	200001dc 	.word	0x200001dc

080006f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <HAL_Init+0x40>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <HAL_Init+0x40>)
 8000702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <HAL_Init+0x40>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_Init+0x40>)
 800070e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_Init+0x40>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <HAL_Init+0x40>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800071e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f931 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff feca 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023c00 	.word	0x40023c00

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f93b 	bl	80009d6 <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f911 	bl	800099e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	@ (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_IncTick+0x20>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_IncTick+0x24>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <HAL_IncTick+0x24>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008
 80007c0:	2000008c 	.word	0x2000008c

080007c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <HAL_GetTick+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff ffee 	bl	80007c4 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffde 	bl	80007c4 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008

08000824 <__NVIC_SetPriorityGrouping>:
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_SetPriority>:
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <SysTick_Config>:
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff8e 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff47 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5c 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff8e 	bl	80008dc <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5d 	bl	8000888 <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb0 	bl	8000944 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e165      	b.n	8000cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f040 8154 	bne.w	8000cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d005      	beq.n	8000a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d130      	bne.n	8000aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	f003 0201 	and.w	r2, r3, #1
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d017      	beq.n	8000ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d123      	bne.n	8000b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	69b9      	ldr	r1, [r7, #24]
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0203 	and.w	r2, r3, #3
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 80ae 	beq.w	8000cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf0 <HAL_GPIO_Init+0x300>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf0 <HAL_GPIO_Init+0x300>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf0 <HAL_GPIO_Init+0x300>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b92:	4a58      	ldr	r2, [pc, #352]	@ (8000cf4 <HAL_GPIO_Init+0x304>)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf8 <HAL_GPIO_Init+0x308>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d025      	beq.n	8000c0a <HAL_GPIO_Init+0x21a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8000cfc <HAL_GPIO_Init+0x30c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d01f      	beq.n	8000c06 <HAL_GPIO_Init+0x216>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8000d00 <HAL_GPIO_Init+0x310>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d019      	beq.n	8000c02 <HAL_GPIO_Init+0x212>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d04 <HAL_GPIO_Init+0x314>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8000d08 <HAL_GPIO_Init+0x318>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d00d      	beq.n	8000bfa <HAL_GPIO_Init+0x20a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4a      	ldr	r2, [pc, #296]	@ (8000d0c <HAL_GPIO_Init+0x31c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x206>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a49      	ldr	r2, [pc, #292]	@ (8000d10 <HAL_GPIO_Init+0x320>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_GPIO_Init+0x202>
 8000bee:	2306      	movs	r3, #6
 8000bf0:	e00c      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	e00a      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e008      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1c:	4935      	ldr	r1, [pc, #212]	@ (8000cf4 <HAL_GPIO_Init+0x304>)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c4e:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <HAL_GPIO_Init+0x324>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	f67f ae96 	bls.w	8000a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40021400 	.word	0x40021400
 8000d10:	40021800 	.word	0x40021800
 8000d14:	40013c00 	.word	0x40013c00

08000d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e001      	b.n	8000d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	041a      	lsls	r2, r3, #16
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43d9      	mvns	r1, r3
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <std>:
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	b510      	push	{r4, lr}
 8000d80:	4604      	mov	r4, r0
 8000d82:	e9c0 3300 	strd	r3, r3, [r0]
 8000d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d8a:	6083      	str	r3, [r0, #8]
 8000d8c:	8181      	strh	r1, [r0, #12]
 8000d8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d90:	81c2      	strh	r2, [r0, #14]
 8000d92:	6183      	str	r3, [r0, #24]
 8000d94:	4619      	mov	r1, r3
 8000d96:	2208      	movs	r2, #8
 8000d98:	305c      	adds	r0, #92	@ 0x5c
 8000d9a:	f000 f906 	bl	8000faa <memset>
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <std+0x58>)
 8000da0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <std+0x5c>)
 8000da4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <std+0x60>)
 8000da8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <std+0x64>)
 8000dac:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <std+0x68>)
 8000db0:	6224      	str	r4, [r4, #32]
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d006      	beq.n	8000dc4 <std+0x48>
 8000db6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000dba:	4294      	cmp	r4, r2
 8000dbc:	d002      	beq.n	8000dc4 <std+0x48>
 8000dbe:	33d0      	adds	r3, #208	@ 0xd0
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	d105      	bne.n	8000dd0 <std+0x54>
 8000dc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dcc:	f000 b966 	b.w	800109c <__retarget_lock_init_recursive>
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08000f25 	.word	0x08000f25
 8000dd8:	08000f47 	.word	0x08000f47
 8000ddc:	08000f7f 	.word	0x08000f7f
 8000de0:	08000fa3 	.word	0x08000fa3
 8000de4:	20000090 	.word	0x20000090

08000de8 <stdio_exit_handler>:
 8000de8:	4a02      	ldr	r2, [pc, #8]	@ (8000df4 <stdio_exit_handler+0xc>)
 8000dea:	4903      	ldr	r1, [pc, #12]	@ (8000df8 <stdio_exit_handler+0x10>)
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <stdio_exit_handler+0x14>)
 8000dee:	f000 b869 	b.w	8000ec4 <_fwalk_sglue>
 8000df2:	bf00      	nop
 8000df4:	2000000c 	.word	0x2000000c
 8000df8:	08001939 	.word	0x08001939
 8000dfc:	2000001c 	.word	0x2000001c

08000e00 <cleanup_stdio>:
 8000e00:	6841      	ldr	r1, [r0, #4]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <cleanup_stdio+0x34>)
 8000e04:	4299      	cmp	r1, r3
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4604      	mov	r4, r0
 8000e0a:	d001      	beq.n	8000e10 <cleanup_stdio+0x10>
 8000e0c:	f000 fd94 	bl	8001938 <_fflush_r>
 8000e10:	68a1      	ldr	r1, [r4, #8]
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <cleanup_stdio+0x38>)
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d002      	beq.n	8000e1e <cleanup_stdio+0x1e>
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f000 fd8d 	bl	8001938 <_fflush_r>
 8000e1e:	68e1      	ldr	r1, [r4, #12]
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <cleanup_stdio+0x3c>)
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d004      	beq.n	8000e30 <cleanup_stdio+0x30>
 8000e26:	4620      	mov	r0, r4
 8000e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e2c:	f000 bd84 	b.w	8001938 <_fflush_r>
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	20000090 	.word	0x20000090
 8000e38:	200000f8 	.word	0x200000f8
 8000e3c:	20000160 	.word	0x20000160

08000e40 <global_stdio_init.part.0>:
 8000e40:	b510      	push	{r4, lr}
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <global_stdio_init.part.0+0x30>)
 8000e44:	4c0b      	ldr	r4, [pc, #44]	@ (8000e74 <global_stdio_init.part.0+0x34>)
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <global_stdio_init.part.0+0x38>)
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	f7ff ff94 	bl	8000d7c <std>
 8000e54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2109      	movs	r1, #9
 8000e5c:	f7ff ff8e 	bl	8000d7c <std>
 8000e60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e64:	2202      	movs	r2, #2
 8000e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e6a:	2112      	movs	r1, #18
 8000e6c:	f7ff bf86 	b.w	8000d7c <std>
 8000e70:	200001c8 	.word	0x200001c8
 8000e74:	20000090 	.word	0x20000090
 8000e78:	08000de9 	.word	0x08000de9

08000e7c <__sfp_lock_acquire>:
 8000e7c:	4801      	ldr	r0, [pc, #4]	@ (8000e84 <__sfp_lock_acquire+0x8>)
 8000e7e:	f000 b90e 	b.w	800109e <__retarget_lock_acquire_recursive>
 8000e82:	bf00      	nop
 8000e84:	200001d1 	.word	0x200001d1

08000e88 <__sfp_lock_release>:
 8000e88:	4801      	ldr	r0, [pc, #4]	@ (8000e90 <__sfp_lock_release+0x8>)
 8000e8a:	f000 b909 	b.w	80010a0 <__retarget_lock_release_recursive>
 8000e8e:	bf00      	nop
 8000e90:	200001d1 	.word	0x200001d1

08000e94 <__sinit>:
 8000e94:	b510      	push	{r4, lr}
 8000e96:	4604      	mov	r4, r0
 8000e98:	f7ff fff0 	bl	8000e7c <__sfp_lock_acquire>
 8000e9c:	6a23      	ldr	r3, [r4, #32]
 8000e9e:	b11b      	cbz	r3, 8000ea8 <__sinit+0x14>
 8000ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea4:	f7ff bff0 	b.w	8000e88 <__sfp_lock_release>
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__sinit+0x28>)
 8000eaa:	6223      	str	r3, [r4, #32]
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__sinit+0x2c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f5      	bne.n	8000ea0 <__sinit+0xc>
 8000eb4:	f7ff ffc4 	bl	8000e40 <global_stdio_init.part.0>
 8000eb8:	e7f2      	b.n	8000ea0 <__sinit+0xc>
 8000eba:	bf00      	nop
 8000ebc:	08000e01 	.word	0x08000e01
 8000ec0:	200001c8 	.word	0x200001c8

08000ec4 <_fwalk_sglue>:
 8000ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	4607      	mov	r7, r0
 8000eca:	4688      	mov	r8, r1
 8000ecc:	4614      	mov	r4, r2
 8000ece:	2600      	movs	r6, #0
 8000ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8000ed8:	d505      	bpl.n	8000ee6 <_fwalk_sglue+0x22>
 8000eda:	6824      	ldr	r4, [r4, #0]
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d1f7      	bne.n	8000ed0 <_fwalk_sglue+0xc>
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ee6:	89ab      	ldrh	r3, [r5, #12]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d907      	bls.n	8000efc <_fwalk_sglue+0x38>
 8000eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	d003      	beq.n	8000efc <_fwalk_sglue+0x38>
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	47c0      	blx	r8
 8000efa:	4306      	orrs	r6, r0
 8000efc:	3568      	adds	r5, #104	@ 0x68
 8000efe:	e7e9      	b.n	8000ed4 <_fwalk_sglue+0x10>

08000f00 <iprintf>:
 8000f00:	b40f      	push	{r0, r1, r2, r3}
 8000f02:	b507      	push	{r0, r1, r2, lr}
 8000f04:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <iprintf+0x20>)
 8000f06:	ab04      	add	r3, sp, #16
 8000f08:	6808      	ldr	r0, [r1, #0]
 8000f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f0e:	6881      	ldr	r1, [r0, #8]
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	f000 f9e9 	bl	80012e8 <_vfiprintf_r>
 8000f16:	b003      	add	sp, #12
 8000f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4770      	bx	lr
 8000f20:	20000018 	.word	0x20000018

08000f24 <__sread>:
 8000f24:	b510      	push	{r4, lr}
 8000f26:	460c      	mov	r4, r1
 8000f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2c:	f000 f868 	bl	8001000 <_read_r>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	bfab      	itete	ge
 8000f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f36:	89a3      	ldrhlt	r3, [r4, #12]
 8000f38:	181b      	addge	r3, r3, r0
 8000f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f3e:	bfac      	ite	ge
 8000f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f42:	81a3      	strhlt	r3, [r4, #12]
 8000f44:	bd10      	pop	{r4, pc}

08000f46 <__swrite>:
 8000f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4a:	461f      	mov	r7, r3
 8000f4c:	898b      	ldrh	r3, [r1, #12]
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	4605      	mov	r5, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	4616      	mov	r6, r2
 8000f56:	d505      	bpl.n	8000f64 <__swrite+0x1e>
 8000f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f000 f83c 	bl	8000fdc <_lseek_r>
 8000f64:	89a3      	ldrh	r3, [r4, #12]
 8000f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f6e:	81a3      	strh	r3, [r4, #12]
 8000f70:	4632      	mov	r2, r6
 8000f72:	463b      	mov	r3, r7
 8000f74:	4628      	mov	r0, r5
 8000f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7a:	f000 b853 	b.w	8001024 <_write_r>

08000f7e <__sseek>:
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	460c      	mov	r4, r1
 8000f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f86:	f000 f829 	bl	8000fdc <_lseek_r>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	89a3      	ldrh	r3, [r4, #12]
 8000f8e:	bf15      	itete	ne
 8000f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f9a:	81a3      	strheq	r3, [r4, #12]
 8000f9c:	bf18      	it	ne
 8000f9e:	81a3      	strhne	r3, [r4, #12]
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <__sclose>:
 8000fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa6:	f000 b809 	b.w	8000fbc <_close_r>

08000faa <memset>:
 8000faa:	4402      	add	r2, r0
 8000fac:	4603      	mov	r3, r0
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <memset+0xa>
 8000fb2:	4770      	bx	lr
 8000fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8000fb8:	e7f9      	b.n	8000fae <memset+0x4>
	...

08000fbc <_close_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d06      	ldr	r5, [pc, #24]	@ (8000fd8 <_close_r+0x1c>)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff faf0 	bl	80005ac <_close>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_close_r+0x1a>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_close_r+0x1a>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	200001cc 	.word	0x200001cc

08000fdc <_lseek_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4d07      	ldr	r5, [pc, #28]	@ (8000ffc <_lseek_r+0x20>)
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	602a      	str	r2, [r5, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	f7ff fb05 	bl	80005fa <_lseek>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_lseek_r+0x1e>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_lseek_r+0x1e>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200001cc 	.word	0x200001cc

08001000 <_read_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4d07      	ldr	r5, [pc, #28]	@ (8001020 <_read_r+0x20>)
 8001004:	4604      	mov	r4, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4611      	mov	r1, r2
 800100a:	2200      	movs	r2, #0
 800100c:	602a      	str	r2, [r5, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	f7ff faaf 	bl	8000572 <_read>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d102      	bne.n	800101e <_read_r+0x1e>
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	b103      	cbz	r3, 800101e <_read_r+0x1e>
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	200001cc 	.word	0x200001cc

08001024 <_write_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4d07      	ldr	r5, [pc, #28]	@ (8001044 <_write_r+0x20>)
 8001028:	4604      	mov	r4, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4611      	mov	r1, r2
 800102e:	2200      	movs	r2, #0
 8001030:	602a      	str	r2, [r5, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f7ff fa2a 	bl	800048c <_write>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_write_r+0x1e>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_write_r+0x1e>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	200001cc 	.word	0x200001cc

08001048 <__errno>:
 8001048:	4b01      	ldr	r3, [pc, #4]	@ (8001050 <__errno+0x8>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000018 	.word	0x20000018

08001054 <__libc_init_array>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4d0d      	ldr	r5, [pc, #52]	@ (800108c <__libc_init_array+0x38>)
 8001058:	4c0d      	ldr	r4, [pc, #52]	@ (8001090 <__libc_init_array+0x3c>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	2600      	movs	r6, #0
 8001060:	42a6      	cmp	r6, r4
 8001062:	d109      	bne.n	8001078 <__libc_init_array+0x24>
 8001064:	4d0b      	ldr	r5, [pc, #44]	@ (8001094 <__libc_init_array+0x40>)
 8001066:	4c0c      	ldr	r4, [pc, #48]	@ (8001098 <__libc_init_array+0x44>)
 8001068:	f000 fdb6 	bl	8001bd8 <_init>
 800106c:	1b64      	subs	r4, r4, r5
 800106e:	10a4      	asrs	r4, r4, #2
 8001070:	2600      	movs	r6, #0
 8001072:	42a6      	cmp	r6, r4
 8001074:	d105      	bne.n	8001082 <__libc_init_array+0x2e>
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	f855 3b04 	ldr.w	r3, [r5], #4
 800107c:	4798      	blx	r3
 800107e:	3601      	adds	r6, #1
 8001080:	e7ee      	b.n	8001060 <__libc_init_array+0xc>
 8001082:	f855 3b04 	ldr.w	r3, [r5], #4
 8001086:	4798      	blx	r3
 8001088:	3601      	adds	r6, #1
 800108a:	e7f2      	b.n	8001072 <__libc_init_array+0x1e>
 800108c:	08001c48 	.word	0x08001c48
 8001090:	08001c48 	.word	0x08001c48
 8001094:	08001c48 	.word	0x08001c48
 8001098:	08001c4c 	.word	0x08001c4c

0800109c <__retarget_lock_init_recursive>:
 800109c:	4770      	bx	lr

0800109e <__retarget_lock_acquire_recursive>:
 800109e:	4770      	bx	lr

080010a0 <__retarget_lock_release_recursive>:
 80010a0:	4770      	bx	lr
	...

080010a4 <_free_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	4605      	mov	r5, r0
 80010a8:	2900      	cmp	r1, #0
 80010aa:	d041      	beq.n	8001130 <_free_r+0x8c>
 80010ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b0:	1f0c      	subs	r4, r1, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	18e4      	addlt	r4, r4, r3
 80010b8:	f000 f8e0 	bl	800127c <__malloc_lock>
 80010bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <_free_r+0x90>)
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	b933      	cbnz	r3, 80010d0 <_free_r+0x2c>
 80010c2:	6063      	str	r3, [r4, #4]
 80010c4:	6014      	str	r4, [r2, #0]
 80010c6:	4628      	mov	r0, r5
 80010c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010cc:	f000 b8dc 	b.w	8001288 <__malloc_unlock>
 80010d0:	42a3      	cmp	r3, r4
 80010d2:	d908      	bls.n	80010e6 <_free_r+0x42>
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	1821      	adds	r1, r4, r0
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf01      	itttt	eq
 80010dc:	6819      	ldreq	r1, [r3, #0]
 80010de:	685b      	ldreq	r3, [r3, #4]
 80010e0:	1809      	addeq	r1, r1, r0
 80010e2:	6021      	streq	r1, [r4, #0]
 80010e4:	e7ed      	b.n	80010c2 <_free_r+0x1e>
 80010e6:	461a      	mov	r2, r3
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	b10b      	cbz	r3, 80010f0 <_free_r+0x4c>
 80010ec:	42a3      	cmp	r3, r4
 80010ee:	d9fa      	bls.n	80010e6 <_free_r+0x42>
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	1850      	adds	r0, r2, r1
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	d10b      	bne.n	8001110 <_free_r+0x6c>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	4401      	add	r1, r0
 80010fc:	1850      	adds	r0, r2, r1
 80010fe:	4283      	cmp	r3, r0
 8001100:	6011      	str	r1, [r2, #0]
 8001102:	d1e0      	bne.n	80010c6 <_free_r+0x22>
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	6053      	str	r3, [r2, #4]
 800110a:	4408      	add	r0, r1
 800110c:	6010      	str	r0, [r2, #0]
 800110e:	e7da      	b.n	80010c6 <_free_r+0x22>
 8001110:	d902      	bls.n	8001118 <_free_r+0x74>
 8001112:	230c      	movs	r3, #12
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	e7d6      	b.n	80010c6 <_free_r+0x22>
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	1821      	adds	r1, r4, r0
 800111c:	428b      	cmp	r3, r1
 800111e:	bf04      	itt	eq
 8001120:	6819      	ldreq	r1, [r3, #0]
 8001122:	685b      	ldreq	r3, [r3, #4]
 8001124:	6063      	str	r3, [r4, #4]
 8001126:	bf04      	itt	eq
 8001128:	1809      	addeq	r1, r1, r0
 800112a:	6021      	streq	r1, [r4, #0]
 800112c:	6054      	str	r4, [r2, #4]
 800112e:	e7ca      	b.n	80010c6 <_free_r+0x22>
 8001130:	bd38      	pop	{r3, r4, r5, pc}
 8001132:	bf00      	nop
 8001134:	200001d8 	.word	0x200001d8

08001138 <sbrk_aligned>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	4e0f      	ldr	r6, [pc, #60]	@ (8001178 <sbrk_aligned+0x40>)
 800113c:	460c      	mov	r4, r1
 800113e:	6831      	ldr	r1, [r6, #0]
 8001140:	4605      	mov	r5, r0
 8001142:	b911      	cbnz	r1, 800114a <sbrk_aligned+0x12>
 8001144:	f000 fcb4 	bl	8001ab0 <_sbrk_r>
 8001148:	6030      	str	r0, [r6, #0]
 800114a:	4621      	mov	r1, r4
 800114c:	4628      	mov	r0, r5
 800114e:	f000 fcaf 	bl	8001ab0 <_sbrk_r>
 8001152:	1c43      	adds	r3, r0, #1
 8001154:	d103      	bne.n	800115e <sbrk_aligned+0x26>
 8001156:	f04f 34ff 	mov.w	r4, #4294967295
 800115a:	4620      	mov	r0, r4
 800115c:	bd70      	pop	{r4, r5, r6, pc}
 800115e:	1cc4      	adds	r4, r0, #3
 8001160:	f024 0403 	bic.w	r4, r4, #3
 8001164:	42a0      	cmp	r0, r4
 8001166:	d0f8      	beq.n	800115a <sbrk_aligned+0x22>
 8001168:	1a21      	subs	r1, r4, r0
 800116a:	4628      	mov	r0, r5
 800116c:	f000 fca0 	bl	8001ab0 <_sbrk_r>
 8001170:	3001      	adds	r0, #1
 8001172:	d1f2      	bne.n	800115a <sbrk_aligned+0x22>
 8001174:	e7ef      	b.n	8001156 <sbrk_aligned+0x1e>
 8001176:	bf00      	nop
 8001178:	200001d4 	.word	0x200001d4

0800117c <_malloc_r>:
 800117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001180:	1ccd      	adds	r5, r1, #3
 8001182:	f025 0503 	bic.w	r5, r5, #3
 8001186:	3508      	adds	r5, #8
 8001188:	2d0c      	cmp	r5, #12
 800118a:	bf38      	it	cc
 800118c:	250c      	movcc	r5, #12
 800118e:	2d00      	cmp	r5, #0
 8001190:	4606      	mov	r6, r0
 8001192:	db01      	blt.n	8001198 <_malloc_r+0x1c>
 8001194:	42a9      	cmp	r1, r5
 8001196:	d904      	bls.n	80011a2 <_malloc_r+0x26>
 8001198:	230c      	movs	r3, #12
 800119a:	6033      	str	r3, [r6, #0]
 800119c:	2000      	movs	r0, #0
 800119e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001278 <_malloc_r+0xfc>
 80011a6:	f000 f869 	bl	800127c <__malloc_lock>
 80011aa:	f8d8 3000 	ldr.w	r3, [r8]
 80011ae:	461c      	mov	r4, r3
 80011b0:	bb44      	cbnz	r4, 8001204 <_malloc_r+0x88>
 80011b2:	4629      	mov	r1, r5
 80011b4:	4630      	mov	r0, r6
 80011b6:	f7ff ffbf 	bl	8001138 <sbrk_aligned>
 80011ba:	1c43      	adds	r3, r0, #1
 80011bc:	4604      	mov	r4, r0
 80011be:	d158      	bne.n	8001272 <_malloc_r+0xf6>
 80011c0:	f8d8 4000 	ldr.w	r4, [r8]
 80011c4:	4627      	mov	r7, r4
 80011c6:	2f00      	cmp	r7, #0
 80011c8:	d143      	bne.n	8001252 <_malloc_r+0xd6>
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d04b      	beq.n	8001266 <_malloc_r+0xea>
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	4639      	mov	r1, r7
 80011d2:	4630      	mov	r0, r6
 80011d4:	eb04 0903 	add.w	r9, r4, r3
 80011d8:	f000 fc6a 	bl	8001ab0 <_sbrk_r>
 80011dc:	4581      	cmp	r9, r0
 80011de:	d142      	bne.n	8001266 <_malloc_r+0xea>
 80011e0:	6821      	ldr	r1, [r4, #0]
 80011e2:	1a6d      	subs	r5, r5, r1
 80011e4:	4629      	mov	r1, r5
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff ffa6 	bl	8001138 <sbrk_aligned>
 80011ec:	3001      	adds	r0, #1
 80011ee:	d03a      	beq.n	8001266 <_malloc_r+0xea>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	442b      	add	r3, r5
 80011f4:	6023      	str	r3, [r4, #0]
 80011f6:	f8d8 3000 	ldr.w	r3, [r8]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	bb62      	cbnz	r2, 8001258 <_malloc_r+0xdc>
 80011fe:	f8c8 7000 	str.w	r7, [r8]
 8001202:	e00f      	b.n	8001224 <_malloc_r+0xa8>
 8001204:	6822      	ldr	r2, [r4, #0]
 8001206:	1b52      	subs	r2, r2, r5
 8001208:	d420      	bmi.n	800124c <_malloc_r+0xd0>
 800120a:	2a0b      	cmp	r2, #11
 800120c:	d917      	bls.n	800123e <_malloc_r+0xc2>
 800120e:	1961      	adds	r1, r4, r5
 8001210:	42a3      	cmp	r3, r4
 8001212:	6025      	str	r5, [r4, #0]
 8001214:	bf18      	it	ne
 8001216:	6059      	strne	r1, [r3, #4]
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	bf08      	it	eq
 800121c:	f8c8 1000 	streq.w	r1, [r8]
 8001220:	5162      	str	r2, [r4, r5]
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	4630      	mov	r0, r6
 8001226:	f000 f82f 	bl	8001288 <__malloc_unlock>
 800122a:	f104 000b 	add.w	r0, r4, #11
 800122e:	1d23      	adds	r3, r4, #4
 8001230:	f020 0007 	bic.w	r0, r0, #7
 8001234:	1ac2      	subs	r2, r0, r3
 8001236:	bf1c      	itt	ne
 8001238:	1a1b      	subne	r3, r3, r0
 800123a:	50a3      	strne	r3, [r4, r2]
 800123c:	e7af      	b.n	800119e <_malloc_r+0x22>
 800123e:	6862      	ldr	r2, [r4, #4]
 8001240:	42a3      	cmp	r3, r4
 8001242:	bf0c      	ite	eq
 8001244:	f8c8 2000 	streq.w	r2, [r8]
 8001248:	605a      	strne	r2, [r3, #4]
 800124a:	e7eb      	b.n	8001224 <_malloc_r+0xa8>
 800124c:	4623      	mov	r3, r4
 800124e:	6864      	ldr	r4, [r4, #4]
 8001250:	e7ae      	b.n	80011b0 <_malloc_r+0x34>
 8001252:	463c      	mov	r4, r7
 8001254:	687f      	ldr	r7, [r7, #4]
 8001256:	e7b6      	b.n	80011c6 <_malloc_r+0x4a>
 8001258:	461a      	mov	r2, r3
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	42a3      	cmp	r3, r4
 800125e:	d1fb      	bne.n	8001258 <_malloc_r+0xdc>
 8001260:	2300      	movs	r3, #0
 8001262:	6053      	str	r3, [r2, #4]
 8001264:	e7de      	b.n	8001224 <_malloc_r+0xa8>
 8001266:	230c      	movs	r3, #12
 8001268:	6033      	str	r3, [r6, #0]
 800126a:	4630      	mov	r0, r6
 800126c:	f000 f80c 	bl	8001288 <__malloc_unlock>
 8001270:	e794      	b.n	800119c <_malloc_r+0x20>
 8001272:	6005      	str	r5, [r0, #0]
 8001274:	e7d6      	b.n	8001224 <_malloc_r+0xa8>
 8001276:	bf00      	nop
 8001278:	200001d8 	.word	0x200001d8

0800127c <__malloc_lock>:
 800127c:	4801      	ldr	r0, [pc, #4]	@ (8001284 <__malloc_lock+0x8>)
 800127e:	f7ff bf0e 	b.w	800109e <__retarget_lock_acquire_recursive>
 8001282:	bf00      	nop
 8001284:	200001d0 	.word	0x200001d0

08001288 <__malloc_unlock>:
 8001288:	4801      	ldr	r0, [pc, #4]	@ (8001290 <__malloc_unlock+0x8>)
 800128a:	f7ff bf09 	b.w	80010a0 <__retarget_lock_release_recursive>
 800128e:	bf00      	nop
 8001290:	200001d0 	.word	0x200001d0

08001294 <__sfputc_r>:
 8001294:	6893      	ldr	r3, [r2, #8]
 8001296:	3b01      	subs	r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	b410      	push	{r4}
 800129c:	6093      	str	r3, [r2, #8]
 800129e:	da08      	bge.n	80012b2 <__sfputc_r+0x1e>
 80012a0:	6994      	ldr	r4, [r2, #24]
 80012a2:	42a3      	cmp	r3, r4
 80012a4:	db01      	blt.n	80012aa <__sfputc_r+0x16>
 80012a6:	290a      	cmp	r1, #10
 80012a8:	d103      	bne.n	80012b2 <__sfputc_r+0x1e>
 80012aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012ae:	f000 bb6b 	b.w	8001988 <__swbuf_r>
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	1c58      	adds	r0, r3, #1
 80012b6:	6010      	str	r0, [r2, #0]
 80012b8:	7019      	strb	r1, [r3, #0]
 80012ba:	4608      	mov	r0, r1
 80012bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <__sfputs_r>:
 80012c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c4:	4606      	mov	r6, r0
 80012c6:	460f      	mov	r7, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	18d5      	adds	r5, r2, r3
 80012cc:	42ac      	cmp	r4, r5
 80012ce:	d101      	bne.n	80012d4 <__sfputs_r+0x12>
 80012d0:	2000      	movs	r0, #0
 80012d2:	e007      	b.n	80012e4 <__sfputs_r+0x22>
 80012d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012d8:	463a      	mov	r2, r7
 80012da:	4630      	mov	r0, r6
 80012dc:	f7ff ffda 	bl	8001294 <__sfputc_r>
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	d1f3      	bne.n	80012cc <__sfputs_r+0xa>
 80012e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012e8 <_vfiprintf_r>:
 80012e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ec:	460d      	mov	r5, r1
 80012ee:	b09d      	sub	sp, #116	@ 0x74
 80012f0:	4614      	mov	r4, r2
 80012f2:	4698      	mov	r8, r3
 80012f4:	4606      	mov	r6, r0
 80012f6:	b118      	cbz	r0, 8001300 <_vfiprintf_r+0x18>
 80012f8:	6a03      	ldr	r3, [r0, #32]
 80012fa:	b90b      	cbnz	r3, 8001300 <_vfiprintf_r+0x18>
 80012fc:	f7ff fdca 	bl	8000e94 <__sinit>
 8001300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001302:	07d9      	lsls	r1, r3, #31
 8001304:	d405      	bmi.n	8001312 <_vfiprintf_r+0x2a>
 8001306:	89ab      	ldrh	r3, [r5, #12]
 8001308:	059a      	lsls	r2, r3, #22
 800130a:	d402      	bmi.n	8001312 <_vfiprintf_r+0x2a>
 800130c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800130e:	f7ff fec6 	bl	800109e <__retarget_lock_acquire_recursive>
 8001312:	89ab      	ldrh	r3, [r5, #12]
 8001314:	071b      	lsls	r3, r3, #28
 8001316:	d501      	bpl.n	800131c <_vfiprintf_r+0x34>
 8001318:	692b      	ldr	r3, [r5, #16]
 800131a:	b99b      	cbnz	r3, 8001344 <_vfiprintf_r+0x5c>
 800131c:	4629      	mov	r1, r5
 800131e:	4630      	mov	r0, r6
 8001320:	f000 fb70 	bl	8001a04 <__swsetup_r>
 8001324:	b170      	cbz	r0, 8001344 <_vfiprintf_r+0x5c>
 8001326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001328:	07dc      	lsls	r4, r3, #31
 800132a:	d504      	bpl.n	8001336 <_vfiprintf_r+0x4e>
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	b01d      	add	sp, #116	@ 0x74
 8001332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001336:	89ab      	ldrh	r3, [r5, #12]
 8001338:	0598      	lsls	r0, r3, #22
 800133a:	d4f7      	bmi.n	800132c <_vfiprintf_r+0x44>
 800133c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800133e:	f7ff feaf 	bl	80010a0 <__retarget_lock_release_recursive>
 8001342:	e7f3      	b.n	800132c <_vfiprintf_r+0x44>
 8001344:	2300      	movs	r3, #0
 8001346:	9309      	str	r3, [sp, #36]	@ 0x24
 8001348:	2320      	movs	r3, #32
 800134a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800134e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001352:	2330      	movs	r3, #48	@ 0x30
 8001354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001504 <_vfiprintf_r+0x21c>
 8001358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800135c:	f04f 0901 	mov.w	r9, #1
 8001360:	4623      	mov	r3, r4
 8001362:	469a      	mov	sl, r3
 8001364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001368:	b10a      	cbz	r2, 800136e <_vfiprintf_r+0x86>
 800136a:	2a25      	cmp	r2, #37	@ 0x25
 800136c:	d1f9      	bne.n	8001362 <_vfiprintf_r+0x7a>
 800136e:	ebba 0b04 	subs.w	fp, sl, r4
 8001372:	d00b      	beq.n	800138c <_vfiprintf_r+0xa4>
 8001374:	465b      	mov	r3, fp
 8001376:	4622      	mov	r2, r4
 8001378:	4629      	mov	r1, r5
 800137a:	4630      	mov	r0, r6
 800137c:	f7ff ffa1 	bl	80012c2 <__sfputs_r>
 8001380:	3001      	adds	r0, #1
 8001382:	f000 80a7 	beq.w	80014d4 <_vfiprintf_r+0x1ec>
 8001386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001388:	445a      	add	r2, fp
 800138a:	9209      	str	r2, [sp, #36]	@ 0x24
 800138c:	f89a 3000 	ldrb.w	r3, [sl]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 809f 	beq.w	80014d4 <_vfiprintf_r+0x1ec>
 8001396:	2300      	movs	r3, #0
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013a0:	f10a 0a01 	add.w	sl, sl, #1
 80013a4:	9304      	str	r3, [sp, #16]
 80013a6:	9307      	str	r3, [sp, #28]
 80013a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80013ae:	4654      	mov	r4, sl
 80013b0:	2205      	movs	r2, #5
 80013b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013b6:	4853      	ldr	r0, [pc, #332]	@ (8001504 <_vfiprintf_r+0x21c>)
 80013b8:	f7fe ff2a 	bl	8000210 <memchr>
 80013bc:	9a04      	ldr	r2, [sp, #16]
 80013be:	b9d8      	cbnz	r0, 80013f8 <_vfiprintf_r+0x110>
 80013c0:	06d1      	lsls	r1, r2, #27
 80013c2:	bf44      	itt	mi
 80013c4:	2320      	movmi	r3, #32
 80013c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013ca:	0713      	lsls	r3, r2, #28
 80013cc:	bf44      	itt	mi
 80013ce:	232b      	movmi	r3, #43	@ 0x2b
 80013d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013d4:	f89a 3000 	ldrb.w	r3, [sl]
 80013d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80013da:	d015      	beq.n	8001408 <_vfiprintf_r+0x120>
 80013dc:	9a07      	ldr	r2, [sp, #28]
 80013de:	4654      	mov	r4, sl
 80013e0:	2000      	movs	r0, #0
 80013e2:	f04f 0c0a 	mov.w	ip, #10
 80013e6:	4621      	mov	r1, r4
 80013e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013ec:	3b30      	subs	r3, #48	@ 0x30
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	d94b      	bls.n	800148a <_vfiprintf_r+0x1a2>
 80013f2:	b1b0      	cbz	r0, 8001422 <_vfiprintf_r+0x13a>
 80013f4:	9207      	str	r2, [sp, #28]
 80013f6:	e014      	b.n	8001422 <_vfiprintf_r+0x13a>
 80013f8:	eba0 0308 	sub.w	r3, r0, r8
 80013fc:	fa09 f303 	lsl.w	r3, r9, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	9304      	str	r3, [sp, #16]
 8001404:	46a2      	mov	sl, r4
 8001406:	e7d2      	b.n	80013ae <_vfiprintf_r+0xc6>
 8001408:	9b03      	ldr	r3, [sp, #12]
 800140a:	1d19      	adds	r1, r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	9103      	str	r1, [sp, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	bfbb      	ittet	lt
 8001414:	425b      	neglt	r3, r3
 8001416:	f042 0202 	orrlt.w	r2, r2, #2
 800141a:	9307      	strge	r3, [sp, #28]
 800141c:	9307      	strlt	r3, [sp, #28]
 800141e:	bfb8      	it	lt
 8001420:	9204      	strlt	r2, [sp, #16]
 8001422:	7823      	ldrb	r3, [r4, #0]
 8001424:	2b2e      	cmp	r3, #46	@ 0x2e
 8001426:	d10a      	bne.n	800143e <_vfiprintf_r+0x156>
 8001428:	7863      	ldrb	r3, [r4, #1]
 800142a:	2b2a      	cmp	r3, #42	@ 0x2a
 800142c:	d132      	bne.n	8001494 <_vfiprintf_r+0x1ac>
 800142e:	9b03      	ldr	r3, [sp, #12]
 8001430:	1d1a      	adds	r2, r3, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	9203      	str	r2, [sp, #12]
 8001436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800143a:	3402      	adds	r4, #2
 800143c:	9305      	str	r3, [sp, #20]
 800143e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001514 <_vfiprintf_r+0x22c>
 8001442:	7821      	ldrb	r1, [r4, #0]
 8001444:	2203      	movs	r2, #3
 8001446:	4650      	mov	r0, sl
 8001448:	f7fe fee2 	bl	8000210 <memchr>
 800144c:	b138      	cbz	r0, 800145e <_vfiprintf_r+0x176>
 800144e:	9b04      	ldr	r3, [sp, #16]
 8001450:	eba0 000a 	sub.w	r0, r0, sl
 8001454:	2240      	movs	r2, #64	@ 0x40
 8001456:	4082      	lsls	r2, r0
 8001458:	4313      	orrs	r3, r2
 800145a:	3401      	adds	r4, #1
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001462:	4829      	ldr	r0, [pc, #164]	@ (8001508 <_vfiprintf_r+0x220>)
 8001464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001468:	2206      	movs	r2, #6
 800146a:	f7fe fed1 	bl	8000210 <memchr>
 800146e:	2800      	cmp	r0, #0
 8001470:	d03f      	beq.n	80014f2 <_vfiprintf_r+0x20a>
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <_vfiprintf_r+0x224>)
 8001474:	bb1b      	cbnz	r3, 80014be <_vfiprintf_r+0x1d6>
 8001476:	9b03      	ldr	r3, [sp, #12]
 8001478:	3307      	adds	r3, #7
 800147a:	f023 0307 	bic.w	r3, r3, #7
 800147e:	3308      	adds	r3, #8
 8001480:	9303      	str	r3, [sp, #12]
 8001482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001484:	443b      	add	r3, r7
 8001486:	9309      	str	r3, [sp, #36]	@ 0x24
 8001488:	e76a      	b.n	8001360 <_vfiprintf_r+0x78>
 800148a:	fb0c 3202 	mla	r2, ip, r2, r3
 800148e:	460c      	mov	r4, r1
 8001490:	2001      	movs	r0, #1
 8001492:	e7a8      	b.n	80013e6 <_vfiprintf_r+0xfe>
 8001494:	2300      	movs	r3, #0
 8001496:	3401      	adds	r4, #1
 8001498:	9305      	str	r3, [sp, #20]
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0c0a 	mov.w	ip, #10
 80014a0:	4620      	mov	r0, r4
 80014a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014a6:	3a30      	subs	r2, #48	@ 0x30
 80014a8:	2a09      	cmp	r2, #9
 80014aa:	d903      	bls.n	80014b4 <_vfiprintf_r+0x1cc>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0c6      	beq.n	800143e <_vfiprintf_r+0x156>
 80014b0:	9105      	str	r1, [sp, #20]
 80014b2:	e7c4      	b.n	800143e <_vfiprintf_r+0x156>
 80014b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80014b8:	4604      	mov	r4, r0
 80014ba:	2301      	movs	r3, #1
 80014bc:	e7f0      	b.n	80014a0 <_vfiprintf_r+0x1b8>
 80014be:	ab03      	add	r3, sp, #12
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	462a      	mov	r2, r5
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <_vfiprintf_r+0x228>)
 80014c6:	a904      	add	r1, sp, #16
 80014c8:	4630      	mov	r0, r6
 80014ca:	f3af 8000 	nop.w
 80014ce:	4607      	mov	r7, r0
 80014d0:	1c78      	adds	r0, r7, #1
 80014d2:	d1d6      	bne.n	8001482 <_vfiprintf_r+0x19a>
 80014d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014d6:	07d9      	lsls	r1, r3, #31
 80014d8:	d405      	bmi.n	80014e6 <_vfiprintf_r+0x1fe>
 80014da:	89ab      	ldrh	r3, [r5, #12]
 80014dc:	059a      	lsls	r2, r3, #22
 80014de:	d402      	bmi.n	80014e6 <_vfiprintf_r+0x1fe>
 80014e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014e2:	f7ff fddd 	bl	80010a0 <__retarget_lock_release_recursive>
 80014e6:	89ab      	ldrh	r3, [r5, #12]
 80014e8:	065b      	lsls	r3, r3, #25
 80014ea:	f53f af1f 	bmi.w	800132c <_vfiprintf_r+0x44>
 80014ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014f0:	e71e      	b.n	8001330 <_vfiprintf_r+0x48>
 80014f2:	ab03      	add	r3, sp, #12
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	462a      	mov	r2, r5
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <_vfiprintf_r+0x228>)
 80014fa:	a904      	add	r1, sp, #16
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 f879 	bl	80015f4 <_printf_i>
 8001502:	e7e4      	b.n	80014ce <_vfiprintf_r+0x1e6>
 8001504:	08001c0b 	.word	0x08001c0b
 8001508:	08001c15 	.word	0x08001c15
 800150c:	00000000 	.word	0x00000000
 8001510:	080012c3 	.word	0x080012c3
 8001514:	08001c11 	.word	0x08001c11

08001518 <_printf_common>:
 8001518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800151c:	4616      	mov	r6, r2
 800151e:	4698      	mov	r8, r3
 8001520:	688a      	ldr	r2, [r1, #8]
 8001522:	690b      	ldr	r3, [r1, #16]
 8001524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001528:	4293      	cmp	r3, r2
 800152a:	bfb8      	it	lt
 800152c:	4613      	movlt	r3, r2
 800152e:	6033      	str	r3, [r6, #0]
 8001530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001534:	4607      	mov	r7, r0
 8001536:	460c      	mov	r4, r1
 8001538:	b10a      	cbz	r2, 800153e <_printf_common+0x26>
 800153a:	3301      	adds	r3, #1
 800153c:	6033      	str	r3, [r6, #0]
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	0699      	lsls	r1, r3, #26
 8001542:	bf42      	ittt	mi
 8001544:	6833      	ldrmi	r3, [r6, #0]
 8001546:	3302      	addmi	r3, #2
 8001548:	6033      	strmi	r3, [r6, #0]
 800154a:	6825      	ldr	r5, [r4, #0]
 800154c:	f015 0506 	ands.w	r5, r5, #6
 8001550:	d106      	bne.n	8001560 <_printf_common+0x48>
 8001552:	f104 0a19 	add.w	sl, r4, #25
 8001556:	68e3      	ldr	r3, [r4, #12]
 8001558:	6832      	ldr	r2, [r6, #0]
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	42ab      	cmp	r3, r5
 800155e:	dc26      	bgt.n	80015ae <_printf_common+0x96>
 8001560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	3b00      	subs	r3, #0
 8001568:	bf18      	it	ne
 800156a:	2301      	movne	r3, #1
 800156c:	0692      	lsls	r2, r2, #26
 800156e:	d42b      	bmi.n	80015c8 <_printf_common+0xb0>
 8001570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001574:	4641      	mov	r1, r8
 8001576:	4638      	mov	r0, r7
 8001578:	47c8      	blx	r9
 800157a:	3001      	adds	r0, #1
 800157c:	d01e      	beq.n	80015bc <_printf_common+0xa4>
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	6922      	ldr	r2, [r4, #16]
 8001582:	f003 0306 	and.w	r3, r3, #6
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf02      	ittt	eq
 800158a:	68e5      	ldreq	r5, [r4, #12]
 800158c:	6833      	ldreq	r3, [r6, #0]
 800158e:	1aed      	subeq	r5, r5, r3
 8001590:	68a3      	ldr	r3, [r4, #8]
 8001592:	bf0c      	ite	eq
 8001594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001598:	2500      	movne	r5, #0
 800159a:	4293      	cmp	r3, r2
 800159c:	bfc4      	itt	gt
 800159e:	1a9b      	subgt	r3, r3, r2
 80015a0:	18ed      	addgt	r5, r5, r3
 80015a2:	2600      	movs	r6, #0
 80015a4:	341a      	adds	r4, #26
 80015a6:	42b5      	cmp	r5, r6
 80015a8:	d11a      	bne.n	80015e0 <_printf_common+0xc8>
 80015aa:	2000      	movs	r0, #0
 80015ac:	e008      	b.n	80015c0 <_printf_common+0xa8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	4652      	mov	r2, sl
 80015b2:	4641      	mov	r1, r8
 80015b4:	4638      	mov	r0, r7
 80015b6:	47c8      	blx	r9
 80015b8:	3001      	adds	r0, #1
 80015ba:	d103      	bne.n	80015c4 <_printf_common+0xac>
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015c4:	3501      	adds	r5, #1
 80015c6:	e7c6      	b.n	8001556 <_printf_common+0x3e>
 80015c8:	18e1      	adds	r1, r4, r3
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	2030      	movs	r0, #48	@ 0x30
 80015ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015d2:	4422      	add	r2, r4
 80015d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80015dc:	3302      	adds	r3, #2
 80015de:	e7c7      	b.n	8001570 <_printf_common+0x58>
 80015e0:	2301      	movs	r3, #1
 80015e2:	4622      	mov	r2, r4
 80015e4:	4641      	mov	r1, r8
 80015e6:	4638      	mov	r0, r7
 80015e8:	47c8      	blx	r9
 80015ea:	3001      	adds	r0, #1
 80015ec:	d0e6      	beq.n	80015bc <_printf_common+0xa4>
 80015ee:	3601      	adds	r6, #1
 80015f0:	e7d9      	b.n	80015a6 <_printf_common+0x8e>
	...

080015f4 <_printf_i>:
 80015f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015f8:	7e0f      	ldrb	r7, [r1, #24]
 80015fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80015fc:	2f78      	cmp	r7, #120	@ 0x78
 80015fe:	4691      	mov	r9, r2
 8001600:	4680      	mov	r8, r0
 8001602:	460c      	mov	r4, r1
 8001604:	469a      	mov	sl, r3
 8001606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800160a:	d807      	bhi.n	800161c <_printf_i+0x28>
 800160c:	2f62      	cmp	r7, #98	@ 0x62
 800160e:	d80a      	bhi.n	8001626 <_printf_i+0x32>
 8001610:	2f00      	cmp	r7, #0
 8001612:	f000 80d1 	beq.w	80017b8 <_printf_i+0x1c4>
 8001616:	2f58      	cmp	r7, #88	@ 0x58
 8001618:	f000 80b8 	beq.w	800178c <_printf_i+0x198>
 800161c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001624:	e03a      	b.n	800169c <_printf_i+0xa8>
 8001626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800162a:	2b15      	cmp	r3, #21
 800162c:	d8f6      	bhi.n	800161c <_printf_i+0x28>
 800162e:	a101      	add	r1, pc, #4	@ (adr r1, 8001634 <_printf_i+0x40>)
 8001630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001634:	0800168d 	.word	0x0800168d
 8001638:	080016a1 	.word	0x080016a1
 800163c:	0800161d 	.word	0x0800161d
 8001640:	0800161d 	.word	0x0800161d
 8001644:	0800161d 	.word	0x0800161d
 8001648:	0800161d 	.word	0x0800161d
 800164c:	080016a1 	.word	0x080016a1
 8001650:	0800161d 	.word	0x0800161d
 8001654:	0800161d 	.word	0x0800161d
 8001658:	0800161d 	.word	0x0800161d
 800165c:	0800161d 	.word	0x0800161d
 8001660:	0800179f 	.word	0x0800179f
 8001664:	080016cb 	.word	0x080016cb
 8001668:	08001759 	.word	0x08001759
 800166c:	0800161d 	.word	0x0800161d
 8001670:	0800161d 	.word	0x0800161d
 8001674:	080017c1 	.word	0x080017c1
 8001678:	0800161d 	.word	0x0800161d
 800167c:	080016cb 	.word	0x080016cb
 8001680:	0800161d 	.word	0x0800161d
 8001684:	0800161d 	.word	0x0800161d
 8001688:	08001761 	.word	0x08001761
 800168c:	6833      	ldr	r3, [r6, #0]
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6032      	str	r2, [r6, #0]
 8001694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800169c:	2301      	movs	r3, #1
 800169e:	e09c      	b.n	80017da <_printf_i+0x1e6>
 80016a0:	6833      	ldr	r3, [r6, #0]
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	1d19      	adds	r1, r3, #4
 80016a6:	6031      	str	r1, [r6, #0]
 80016a8:	0606      	lsls	r6, r0, #24
 80016aa:	d501      	bpl.n	80016b0 <_printf_i+0xbc>
 80016ac:	681d      	ldr	r5, [r3, #0]
 80016ae:	e003      	b.n	80016b8 <_printf_i+0xc4>
 80016b0:	0645      	lsls	r5, r0, #25
 80016b2:	d5fb      	bpl.n	80016ac <_printf_i+0xb8>
 80016b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016b8:	2d00      	cmp	r5, #0
 80016ba:	da03      	bge.n	80016c4 <_printf_i+0xd0>
 80016bc:	232d      	movs	r3, #45	@ 0x2d
 80016be:	426d      	negs	r5, r5
 80016c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016c4:	4858      	ldr	r0, [pc, #352]	@ (8001828 <_printf_i+0x234>)
 80016c6:	230a      	movs	r3, #10
 80016c8:	e011      	b.n	80016ee <_printf_i+0xfa>
 80016ca:	6821      	ldr	r1, [r4, #0]
 80016cc:	6833      	ldr	r3, [r6, #0]
 80016ce:	0608      	lsls	r0, r1, #24
 80016d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80016d4:	d402      	bmi.n	80016dc <_printf_i+0xe8>
 80016d6:	0649      	lsls	r1, r1, #25
 80016d8:	bf48      	it	mi
 80016da:	b2ad      	uxthmi	r5, r5
 80016dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80016de:	4852      	ldr	r0, [pc, #328]	@ (8001828 <_printf_i+0x234>)
 80016e0:	6033      	str	r3, [r6, #0]
 80016e2:	bf14      	ite	ne
 80016e4:	230a      	movne	r3, #10
 80016e6:	2308      	moveq	r3, #8
 80016e8:	2100      	movs	r1, #0
 80016ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80016ee:	6866      	ldr	r6, [r4, #4]
 80016f0:	60a6      	str	r6, [r4, #8]
 80016f2:	2e00      	cmp	r6, #0
 80016f4:	db05      	blt.n	8001702 <_printf_i+0x10e>
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	432e      	orrs	r6, r5
 80016fa:	f021 0104 	bic.w	r1, r1, #4
 80016fe:	6021      	str	r1, [r4, #0]
 8001700:	d04b      	beq.n	800179a <_printf_i+0x1a6>
 8001702:	4616      	mov	r6, r2
 8001704:	fbb5 f1f3 	udiv	r1, r5, r3
 8001708:	fb03 5711 	mls	r7, r3, r1, r5
 800170c:	5dc7      	ldrb	r7, [r0, r7]
 800170e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001712:	462f      	mov	r7, r5
 8001714:	42bb      	cmp	r3, r7
 8001716:	460d      	mov	r5, r1
 8001718:	d9f4      	bls.n	8001704 <_printf_i+0x110>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d10b      	bne.n	8001736 <_printf_i+0x142>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	07df      	lsls	r7, r3, #31
 8001722:	d508      	bpl.n	8001736 <_printf_i+0x142>
 8001724:	6923      	ldr	r3, [r4, #16]
 8001726:	6861      	ldr	r1, [r4, #4]
 8001728:	4299      	cmp	r1, r3
 800172a:	bfde      	ittt	le
 800172c:	2330      	movle	r3, #48	@ 0x30
 800172e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001732:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001736:	1b92      	subs	r2, r2, r6
 8001738:	6122      	str	r2, [r4, #16]
 800173a:	f8cd a000 	str.w	sl, [sp]
 800173e:	464b      	mov	r3, r9
 8001740:	aa03      	add	r2, sp, #12
 8001742:	4621      	mov	r1, r4
 8001744:	4640      	mov	r0, r8
 8001746:	f7ff fee7 	bl	8001518 <_printf_common>
 800174a:	3001      	adds	r0, #1
 800174c:	d14a      	bne.n	80017e4 <_printf_i+0x1f0>
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	b004      	add	sp, #16
 8001754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	6023      	str	r3, [r4, #0]
 8001760:	4832      	ldr	r0, [pc, #200]	@ (800182c <_printf_i+0x238>)
 8001762:	2778      	movs	r7, #120	@ 0x78
 8001764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	6831      	ldr	r1, [r6, #0]
 800176c:	061f      	lsls	r7, r3, #24
 800176e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001772:	d402      	bmi.n	800177a <_printf_i+0x186>
 8001774:	065f      	lsls	r7, r3, #25
 8001776:	bf48      	it	mi
 8001778:	b2ad      	uxthmi	r5, r5
 800177a:	6031      	str	r1, [r6, #0]
 800177c:	07d9      	lsls	r1, r3, #31
 800177e:	bf44      	itt	mi
 8001780:	f043 0320 	orrmi.w	r3, r3, #32
 8001784:	6023      	strmi	r3, [r4, #0]
 8001786:	b11d      	cbz	r5, 8001790 <_printf_i+0x19c>
 8001788:	2310      	movs	r3, #16
 800178a:	e7ad      	b.n	80016e8 <_printf_i+0xf4>
 800178c:	4826      	ldr	r0, [pc, #152]	@ (8001828 <_printf_i+0x234>)
 800178e:	e7e9      	b.n	8001764 <_printf_i+0x170>
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	f023 0320 	bic.w	r3, r3, #32
 8001796:	6023      	str	r3, [r4, #0]
 8001798:	e7f6      	b.n	8001788 <_printf_i+0x194>
 800179a:	4616      	mov	r6, r2
 800179c:	e7bd      	b.n	800171a <_printf_i+0x126>
 800179e:	6833      	ldr	r3, [r6, #0]
 80017a0:	6825      	ldr	r5, [r4, #0]
 80017a2:	6961      	ldr	r1, [r4, #20]
 80017a4:	1d18      	adds	r0, r3, #4
 80017a6:	6030      	str	r0, [r6, #0]
 80017a8:	062e      	lsls	r6, r5, #24
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	d501      	bpl.n	80017b2 <_printf_i+0x1be>
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	e002      	b.n	80017b8 <_printf_i+0x1c4>
 80017b2:	0668      	lsls	r0, r5, #25
 80017b4:	d5fb      	bpl.n	80017ae <_printf_i+0x1ba>
 80017b6:	8019      	strh	r1, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	6123      	str	r3, [r4, #16]
 80017bc:	4616      	mov	r6, r2
 80017be:	e7bc      	b.n	800173a <_printf_i+0x146>
 80017c0:	6833      	ldr	r3, [r6, #0]
 80017c2:	1d1a      	adds	r2, r3, #4
 80017c4:	6032      	str	r2, [r6, #0]
 80017c6:	681e      	ldr	r6, [r3, #0]
 80017c8:	6862      	ldr	r2, [r4, #4]
 80017ca:	2100      	movs	r1, #0
 80017cc:	4630      	mov	r0, r6
 80017ce:	f7fe fd1f 	bl	8000210 <memchr>
 80017d2:	b108      	cbz	r0, 80017d8 <_printf_i+0x1e4>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	6060      	str	r0, [r4, #4]
 80017d8:	6863      	ldr	r3, [r4, #4]
 80017da:	6123      	str	r3, [r4, #16]
 80017dc:	2300      	movs	r3, #0
 80017de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017e2:	e7aa      	b.n	800173a <_printf_i+0x146>
 80017e4:	6923      	ldr	r3, [r4, #16]
 80017e6:	4632      	mov	r2, r6
 80017e8:	4649      	mov	r1, r9
 80017ea:	4640      	mov	r0, r8
 80017ec:	47d0      	blx	sl
 80017ee:	3001      	adds	r0, #1
 80017f0:	d0ad      	beq.n	800174e <_printf_i+0x15a>
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	079b      	lsls	r3, r3, #30
 80017f6:	d413      	bmi.n	8001820 <_printf_i+0x22c>
 80017f8:	68e0      	ldr	r0, [r4, #12]
 80017fa:	9b03      	ldr	r3, [sp, #12]
 80017fc:	4298      	cmp	r0, r3
 80017fe:	bfb8      	it	lt
 8001800:	4618      	movlt	r0, r3
 8001802:	e7a6      	b.n	8001752 <_printf_i+0x15e>
 8001804:	2301      	movs	r3, #1
 8001806:	4632      	mov	r2, r6
 8001808:	4649      	mov	r1, r9
 800180a:	4640      	mov	r0, r8
 800180c:	47d0      	blx	sl
 800180e:	3001      	adds	r0, #1
 8001810:	d09d      	beq.n	800174e <_printf_i+0x15a>
 8001812:	3501      	adds	r5, #1
 8001814:	68e3      	ldr	r3, [r4, #12]
 8001816:	9903      	ldr	r1, [sp, #12]
 8001818:	1a5b      	subs	r3, r3, r1
 800181a:	42ab      	cmp	r3, r5
 800181c:	dcf2      	bgt.n	8001804 <_printf_i+0x210>
 800181e:	e7eb      	b.n	80017f8 <_printf_i+0x204>
 8001820:	2500      	movs	r5, #0
 8001822:	f104 0619 	add.w	r6, r4, #25
 8001826:	e7f5      	b.n	8001814 <_printf_i+0x220>
 8001828:	08001c1c 	.word	0x08001c1c
 800182c:	08001c2d 	.word	0x08001c2d

08001830 <__sflush_r>:
 8001830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001838:	0716      	lsls	r6, r2, #28
 800183a:	4605      	mov	r5, r0
 800183c:	460c      	mov	r4, r1
 800183e:	d454      	bmi.n	80018ea <__sflush_r+0xba>
 8001840:	684b      	ldr	r3, [r1, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	dc02      	bgt.n	800184c <__sflush_r+0x1c>
 8001846:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	dd48      	ble.n	80018de <__sflush_r+0xae>
 800184c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800184e:	2e00      	cmp	r6, #0
 8001850:	d045      	beq.n	80018de <__sflush_r+0xae>
 8001852:	2300      	movs	r3, #0
 8001854:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001858:	682f      	ldr	r7, [r5, #0]
 800185a:	6a21      	ldr	r1, [r4, #32]
 800185c:	602b      	str	r3, [r5, #0]
 800185e:	d030      	beq.n	80018c2 <__sflush_r+0x92>
 8001860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001862:	89a3      	ldrh	r3, [r4, #12]
 8001864:	0759      	lsls	r1, r3, #29
 8001866:	d505      	bpl.n	8001874 <__sflush_r+0x44>
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800186e:	b10b      	cbz	r3, 8001874 <__sflush_r+0x44>
 8001870:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001878:	6a21      	ldr	r1, [r4, #32]
 800187a:	4628      	mov	r0, r5
 800187c:	47b0      	blx	r6
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	d106      	bne.n	8001892 <__sflush_r+0x62>
 8001884:	6829      	ldr	r1, [r5, #0]
 8001886:	291d      	cmp	r1, #29
 8001888:	d82b      	bhi.n	80018e2 <__sflush_r+0xb2>
 800188a:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <__sflush_r+0x104>)
 800188c:	40ca      	lsrs	r2, r1
 800188e:	07d6      	lsls	r6, r2, #31
 8001890:	d527      	bpl.n	80018e2 <__sflush_r+0xb2>
 8001892:	2200      	movs	r2, #0
 8001894:	6062      	str	r2, [r4, #4]
 8001896:	04d9      	lsls	r1, r3, #19
 8001898:	6922      	ldr	r2, [r4, #16]
 800189a:	6022      	str	r2, [r4, #0]
 800189c:	d504      	bpl.n	80018a8 <__sflush_r+0x78>
 800189e:	1c42      	adds	r2, r0, #1
 80018a0:	d101      	bne.n	80018a6 <__sflush_r+0x76>
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	b903      	cbnz	r3, 80018a8 <__sflush_r+0x78>
 80018a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80018a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018aa:	602f      	str	r7, [r5, #0]
 80018ac:	b1b9      	cbz	r1, 80018de <__sflush_r+0xae>
 80018ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018b2:	4299      	cmp	r1, r3
 80018b4:	d002      	beq.n	80018bc <__sflush_r+0x8c>
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7ff fbf4 	bl	80010a4 <_free_r>
 80018bc:	2300      	movs	r3, #0
 80018be:	6363      	str	r3, [r4, #52]	@ 0x34
 80018c0:	e00d      	b.n	80018de <__sflush_r+0xae>
 80018c2:	2301      	movs	r3, #1
 80018c4:	4628      	mov	r0, r5
 80018c6:	47b0      	blx	r6
 80018c8:	4602      	mov	r2, r0
 80018ca:	1c50      	adds	r0, r2, #1
 80018cc:	d1c9      	bne.n	8001862 <__sflush_r+0x32>
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0c6      	beq.n	8001862 <__sflush_r+0x32>
 80018d4:	2b1d      	cmp	r3, #29
 80018d6:	d001      	beq.n	80018dc <__sflush_r+0xac>
 80018d8:	2b16      	cmp	r3, #22
 80018da:	d11e      	bne.n	800191a <__sflush_r+0xea>
 80018dc:	602f      	str	r7, [r5, #0]
 80018de:	2000      	movs	r0, #0
 80018e0:	e022      	b.n	8001928 <__sflush_r+0xf8>
 80018e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	e01b      	b.n	8001922 <__sflush_r+0xf2>
 80018ea:	690f      	ldr	r7, [r1, #16]
 80018ec:	2f00      	cmp	r7, #0
 80018ee:	d0f6      	beq.n	80018de <__sflush_r+0xae>
 80018f0:	0793      	lsls	r3, r2, #30
 80018f2:	680e      	ldr	r6, [r1, #0]
 80018f4:	bf08      	it	eq
 80018f6:	694b      	ldreq	r3, [r1, #20]
 80018f8:	600f      	str	r7, [r1, #0]
 80018fa:	bf18      	it	ne
 80018fc:	2300      	movne	r3, #0
 80018fe:	eba6 0807 	sub.w	r8, r6, r7
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	f1b8 0f00 	cmp.w	r8, #0
 8001908:	dde9      	ble.n	80018de <__sflush_r+0xae>
 800190a:	6a21      	ldr	r1, [r4, #32]
 800190c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800190e:	4643      	mov	r3, r8
 8001910:	463a      	mov	r2, r7
 8001912:	4628      	mov	r0, r5
 8001914:	47b0      	blx	r6
 8001916:	2800      	cmp	r0, #0
 8001918:	dc08      	bgt.n	800192c <__sflush_r+0xfc>
 800191a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800191e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001922:	81a3      	strh	r3, [r4, #12]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192c:	4407      	add	r7, r0
 800192e:	eba8 0800 	sub.w	r8, r8, r0
 8001932:	e7e7      	b.n	8001904 <__sflush_r+0xd4>
 8001934:	20400001 	.word	0x20400001

08001938 <_fflush_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	690b      	ldr	r3, [r1, #16]
 800193c:	4605      	mov	r5, r0
 800193e:	460c      	mov	r4, r1
 8001940:	b913      	cbnz	r3, 8001948 <_fflush_r+0x10>
 8001942:	2500      	movs	r5, #0
 8001944:	4628      	mov	r0, r5
 8001946:	bd38      	pop	{r3, r4, r5, pc}
 8001948:	b118      	cbz	r0, 8001952 <_fflush_r+0x1a>
 800194a:	6a03      	ldr	r3, [r0, #32]
 800194c:	b90b      	cbnz	r3, 8001952 <_fflush_r+0x1a>
 800194e:	f7ff faa1 	bl	8000e94 <__sinit>
 8001952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f3      	beq.n	8001942 <_fflush_r+0xa>
 800195a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800195c:	07d0      	lsls	r0, r2, #31
 800195e:	d404      	bmi.n	800196a <_fflush_r+0x32>
 8001960:	0599      	lsls	r1, r3, #22
 8001962:	d402      	bmi.n	800196a <_fflush_r+0x32>
 8001964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001966:	f7ff fb9a 	bl	800109e <__retarget_lock_acquire_recursive>
 800196a:	4628      	mov	r0, r5
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff ff5f 	bl	8001830 <__sflush_r>
 8001972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001974:	07da      	lsls	r2, r3, #31
 8001976:	4605      	mov	r5, r0
 8001978:	d4e4      	bmi.n	8001944 <_fflush_r+0xc>
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	059b      	lsls	r3, r3, #22
 800197e:	d4e1      	bmi.n	8001944 <_fflush_r+0xc>
 8001980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001982:	f7ff fb8d 	bl	80010a0 <__retarget_lock_release_recursive>
 8001986:	e7dd      	b.n	8001944 <_fflush_r+0xc>

08001988 <__swbuf_r>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	460e      	mov	r6, r1
 800198c:	4614      	mov	r4, r2
 800198e:	4605      	mov	r5, r0
 8001990:	b118      	cbz	r0, 800199a <__swbuf_r+0x12>
 8001992:	6a03      	ldr	r3, [r0, #32]
 8001994:	b90b      	cbnz	r3, 800199a <__swbuf_r+0x12>
 8001996:	f7ff fa7d 	bl	8000e94 <__sinit>
 800199a:	69a3      	ldr	r3, [r4, #24]
 800199c:	60a3      	str	r3, [r4, #8]
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	071a      	lsls	r2, r3, #28
 80019a2:	d501      	bpl.n	80019a8 <__swbuf_r+0x20>
 80019a4:	6923      	ldr	r3, [r4, #16]
 80019a6:	b943      	cbnz	r3, 80019ba <__swbuf_r+0x32>
 80019a8:	4621      	mov	r1, r4
 80019aa:	4628      	mov	r0, r5
 80019ac:	f000 f82a 	bl	8001a04 <__swsetup_r>
 80019b0:	b118      	cbz	r0, 80019ba <__swbuf_r+0x32>
 80019b2:	f04f 37ff 	mov.w	r7, #4294967295
 80019b6:	4638      	mov	r0, r7
 80019b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	6922      	ldr	r2, [r4, #16]
 80019be:	1a98      	subs	r0, r3, r2
 80019c0:	6963      	ldr	r3, [r4, #20]
 80019c2:	b2f6      	uxtb	r6, r6
 80019c4:	4283      	cmp	r3, r0
 80019c6:	4637      	mov	r7, r6
 80019c8:	dc05      	bgt.n	80019d6 <__swbuf_r+0x4e>
 80019ca:	4621      	mov	r1, r4
 80019cc:	4628      	mov	r0, r5
 80019ce:	f7ff ffb3 	bl	8001938 <_fflush_r>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d1ed      	bne.n	80019b2 <__swbuf_r+0x2a>
 80019d6:	68a3      	ldr	r3, [r4, #8]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60a3      	str	r3, [r4, #8]
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	6022      	str	r2, [r4, #0]
 80019e2:	701e      	strb	r6, [r3, #0]
 80019e4:	6962      	ldr	r2, [r4, #20]
 80019e6:	1c43      	adds	r3, r0, #1
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d004      	beq.n	80019f6 <__swbuf_r+0x6e>
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	07db      	lsls	r3, r3, #31
 80019f0:	d5e1      	bpl.n	80019b6 <__swbuf_r+0x2e>
 80019f2:	2e0a      	cmp	r6, #10
 80019f4:	d1df      	bne.n	80019b6 <__swbuf_r+0x2e>
 80019f6:	4621      	mov	r1, r4
 80019f8:	4628      	mov	r0, r5
 80019fa:	f7ff ff9d 	bl	8001938 <_fflush_r>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0d9      	beq.n	80019b6 <__swbuf_r+0x2e>
 8001a02:	e7d6      	b.n	80019b2 <__swbuf_r+0x2a>

08001a04 <__swsetup_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <__swsetup_r+0xa8>)
 8001a08:	4605      	mov	r5, r0
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	b118      	cbz	r0, 8001a18 <__swsetup_r+0x14>
 8001a10:	6a03      	ldr	r3, [r0, #32]
 8001a12:	b90b      	cbnz	r3, 8001a18 <__swsetup_r+0x14>
 8001a14:	f7ff fa3e 	bl	8000e94 <__sinit>
 8001a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1c:	0719      	lsls	r1, r3, #28
 8001a1e:	d422      	bmi.n	8001a66 <__swsetup_r+0x62>
 8001a20:	06da      	lsls	r2, r3, #27
 8001a22:	d407      	bmi.n	8001a34 <__swsetup_r+0x30>
 8001a24:	2209      	movs	r2, #9
 8001a26:	602a      	str	r2, [r5, #0]
 8001a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a2c:	81a3      	strh	r3, [r4, #12]
 8001a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a32:	e033      	b.n	8001a9c <__swsetup_r+0x98>
 8001a34:	0758      	lsls	r0, r3, #29
 8001a36:	d512      	bpl.n	8001a5e <__swsetup_r+0x5a>
 8001a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a3a:	b141      	cbz	r1, 8001a4e <__swsetup_r+0x4a>
 8001a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a40:	4299      	cmp	r1, r3
 8001a42:	d002      	beq.n	8001a4a <__swsetup_r+0x46>
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7ff fb2d 	bl	80010a4 <_free_r>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a54:	81a3      	strh	r3, [r4, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	6063      	str	r3, [r4, #4]
 8001a5a:	6923      	ldr	r3, [r4, #16]
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	81a3      	strh	r3, [r4, #12]
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	b94b      	cbnz	r3, 8001a7e <__swsetup_r+0x7a>
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a74:	d003      	beq.n	8001a7e <__swsetup_r+0x7a>
 8001a76:	4621      	mov	r1, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 f84f 	bl	8001b1c <__smakebuf_r>
 8001a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a82:	f013 0201 	ands.w	r2, r3, #1
 8001a86:	d00a      	beq.n	8001a9e <__swsetup_r+0x9a>
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60a2      	str	r2, [r4, #8]
 8001a8c:	6962      	ldr	r2, [r4, #20]
 8001a8e:	4252      	negs	r2, r2
 8001a90:	61a2      	str	r2, [r4, #24]
 8001a92:	6922      	ldr	r2, [r4, #16]
 8001a94:	b942      	cbnz	r2, 8001aa8 <__swsetup_r+0xa4>
 8001a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a9a:	d1c5      	bne.n	8001a28 <__swsetup_r+0x24>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	0799      	lsls	r1, r3, #30
 8001aa0:	bf58      	it	pl
 8001aa2:	6962      	ldrpl	r2, [r4, #20]
 8001aa4:	60a2      	str	r2, [r4, #8]
 8001aa6:	e7f4      	b.n	8001a92 <__swsetup_r+0x8e>
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	e7f7      	b.n	8001a9c <__swsetup_r+0x98>
 8001aac:	20000018 	.word	0x20000018

08001ab0 <_sbrk_r>:
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4d06      	ldr	r5, [pc, #24]	@ (8001acc <_sbrk_r+0x1c>)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	602b      	str	r3, [r5, #0]
 8001abc:	f7fe fdaa 	bl	8000614 <_sbrk>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	d102      	bne.n	8001aca <_sbrk_r+0x1a>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	b103      	cbz	r3, 8001aca <_sbrk_r+0x1a>
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
 8001acc:	200001cc 	.word	0x200001cc

08001ad0 <__swhatbuf_r>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad8:	2900      	cmp	r1, #0
 8001ada:	b096      	sub	sp, #88	@ 0x58
 8001adc:	4615      	mov	r5, r2
 8001ade:	461e      	mov	r6, r3
 8001ae0:	da0d      	bge.n	8001afe <__swhatbuf_r+0x2e>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2340      	movne	r3, #64	@ 0x40
 8001af0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001af4:	2000      	movs	r0, #0
 8001af6:	6031      	str	r1, [r6, #0]
 8001af8:	602b      	str	r3, [r5, #0]
 8001afa:	b016      	add	sp, #88	@ 0x58
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
 8001afe:	466a      	mov	r2, sp
 8001b00:	f000 f848 	bl	8001b94 <_fstat_r>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	dbec      	blt.n	8001ae2 <__swhatbuf_r+0x12>
 8001b08:	9901      	ldr	r1, [sp, #4]
 8001b0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001b0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001b12:	4259      	negs	r1, r3
 8001b14:	4159      	adcs	r1, r3
 8001b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b1a:	e7eb      	b.n	8001af4 <__swhatbuf_r+0x24>

08001b1c <__smakebuf_r>:
 8001b1c:	898b      	ldrh	r3, [r1, #12]
 8001b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b20:	079d      	lsls	r5, r3, #30
 8001b22:	4606      	mov	r6, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	d507      	bpl.n	8001b38 <__smakebuf_r+0x1c>
 8001b28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	6123      	str	r3, [r4, #16]
 8001b30:	2301      	movs	r3, #1
 8001b32:	6163      	str	r3, [r4, #20]
 8001b34:	b003      	add	sp, #12
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	ab01      	add	r3, sp, #4
 8001b3a:	466a      	mov	r2, sp
 8001b3c:	f7ff ffc8 	bl	8001ad0 <__swhatbuf_r>
 8001b40:	9f00      	ldr	r7, [sp, #0]
 8001b42:	4605      	mov	r5, r0
 8001b44:	4639      	mov	r1, r7
 8001b46:	4630      	mov	r0, r6
 8001b48:	f7ff fb18 	bl	800117c <_malloc_r>
 8001b4c:	b948      	cbnz	r0, 8001b62 <__smakebuf_r+0x46>
 8001b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b52:	059a      	lsls	r2, r3, #22
 8001b54:	d4ee      	bmi.n	8001b34 <__smakebuf_r+0x18>
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	81a3      	strh	r3, [r4, #12]
 8001b60:	e7e2      	b.n	8001b28 <__smakebuf_r+0xc>
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	6020      	str	r0, [r4, #0]
 8001b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b72:	b15b      	cbz	r3, 8001b8c <__smakebuf_r+0x70>
 8001b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f000 f81d 	bl	8001bb8 <_isatty_r>
 8001b7e:	b128      	cbz	r0, 8001b8c <__smakebuf_r+0x70>
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	89a3      	ldrh	r3, [r4, #12]
 8001b8e:	431d      	orrs	r5, r3
 8001b90:	81a5      	strh	r5, [r4, #12]
 8001b92:	e7cf      	b.n	8001b34 <__smakebuf_r+0x18>

08001b94 <_fstat_r>:
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	4d07      	ldr	r5, [pc, #28]	@ (8001bb4 <_fstat_r+0x20>)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	f7fe fd0f 	bl	80005c4 <_fstat>
 8001ba6:	1c43      	adds	r3, r0, #1
 8001ba8:	d102      	bne.n	8001bb0 <_fstat_r+0x1c>
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	b103      	cbz	r3, 8001bb0 <_fstat_r+0x1c>
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200001cc 	.word	0x200001cc

08001bb8 <_isatty_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d06      	ldr	r5, [pc, #24]	@ (8001bd4 <_isatty_r+0x1c>)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	f7fe fd0e 	bl	80005e4 <_isatty>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_isatty_r+0x1a>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_isatty_r+0x1a>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	200001cc 	.word	0x200001cc

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
