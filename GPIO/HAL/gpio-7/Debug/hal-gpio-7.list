
hal-gpio-7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001bd0  08001bd0  00002bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c20  08001c20  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001c20  08001c20  00002c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c28  08001c28  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c28  08001c28  00002c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c2c  08001c2c  00002c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001c30  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001c98  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001c98  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e1b  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb1  00000000  00000000  00006eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00007e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000328  00000000  00000000  000082d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216d3  00000000  00000000  00008600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005121  00000000  00000000  00029cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c954c  00000000  00000000  0002edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001758  00000000  00000000  000f8384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f9adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001bb8 	.word	0x08001bb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001bb8 	.word	0x08001bb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d013      	beq.n	80002f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d00b      	beq.n	80002f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002d8:	e000      	b.n	80002dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <main>:
void delay_ms(uint32_t ms);

// Global variable to count switch presses
uint8_t press_count = 0;

int main(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    HAL_Init();               // Initialize HAL Library
 8000304:	f000 f9e8 	bl	80006d8 <HAL_Init>
    SystemClock_Config();      // Configure System Clock
 8000308:	f000 f85c 	bl	80003c4 <SystemClock_Config>
    MX_GPIO_Init();           // Initialize GPIO
 800030c:	f000 f862 	bl	80003d4 <MX_GPIO_Init>

    while (1) {
        // Check if switch (PC13) is pressed
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000314:	4815      	ldr	r0, [pc, #84]	@ (800036c <main+0x6c>)
 8000316:	f000 fcef 	bl	8000cf8 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f7      	bne.n	8000310 <main+0x10>
            HAL_Delay(200); // Debounce delay
 8000320:	20c8      	movs	r0, #200	@ 0xc8
 8000322:	f000 fa4b 	bl	80007bc <HAL_Delay>

            // Wait for switch release
            while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000326:	bf00      	nop
 8000328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032c:	480f      	ldr	r0, [pc, #60]	@ (800036c <main+0x6c>)
 800032e:	f000 fce3 	bl	8000cf8 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f7      	beq.n	8000328 <main+0x28>

            press_count++;  // Increase press count
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <main+0x70>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <main+0x70>)
 8000342:	701a      	strb	r2, [r3, #0]

            // Reset press count after 3 presses
            if (press_count > 3) {
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <main+0x70>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d902      	bls.n	8000352 <main+0x52>
                press_count = 1;
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <main+0x70>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
            }

            // Toggle LED based on press count
            toggle_led(press_count);
 8000352:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <main+0x70>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f80e 	bl	8000378 <toggle_led>

            // Print press count to SWV ITM Data Console
            printf("Switch pressed: %d times\r\n", press_count);
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <main+0x70>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	4804      	ldr	r0, [pc, #16]	@ (8000374 <main+0x74>)
 8000364:	f000 fdbc 	bl	8000ee0 <iprintf>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000368:	e7d2      	b.n	8000310 <main+0x10>
 800036a:	bf00      	nop
 800036c:	40020800 	.word	0x40020800
 8000370:	20000084 	.word	0x20000084
 8000374:	08001bd0 	.word	0x08001bd0

08000378 <toggle_led>:
        }
    }
}

// Function to toggle LED multiple times
void toggle_led(uint8_t times) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e012      	b.n	80003ae <toggle_led+0x36>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000388:	2120      	movs	r1, #32
 800038a:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <toggle_led+0x48>)
 800038c:	f000 fccc 	bl	8000d28 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 8000390:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000394:	f000 fa12 	bl	80007bc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000398:	2120      	movs	r1, #32
 800039a:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <toggle_led+0x48>)
 800039c:	f000 fcc4 	bl	8000d28 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 80003a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003a4:	f000 fa0a 	bl	80007bc <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	3301      	adds	r3, #1
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfa      	ldrb	r2, [r7, #15]
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3e8      	bcc.n	8000388 <toggle_led+0x10>
    }
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40020000 	.word	0x40020000

080003c4 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void) {
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
    // System clock configuration can be generated using STM32CubeMX
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <MX_GPIO_Init>:

// GPIO Initialization
static void MX_GPIO_Init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

    // Enable GPIOA and GPIOC clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000460 <MX_GPIO_Init+0x8c>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000460 <MX_GPIO_Init+0x8c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003fa:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <MX_GPIO_Init+0x8c>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_GPIO_Init+0x8c>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <MX_GPIO_Init+0x8c>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
 8000416:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_GPIO_Init+0x8c>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	f003 0304 	and.w	r3, r3, #4
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

    // Configure PA5 as Output (Onboard LED)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000422:	2320      	movs	r3, #32
 8000424:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	4619      	mov	r1, r3
 8000438:	480a      	ldr	r0, [pc, #40]	@ (8000464 <MX_GPIO_Init+0x90>)
 800043a:	f000 fac9 	bl	80009d0 <HAL_GPIO_Init>

    // Configure PC13 as Input (Onboard Button) with Pull-up
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800043e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	@ (8000468 <MX_GPIO_Init+0x94>)
 8000454:	f000 fabc 	bl	80009d0 <HAL_GPIO_Init>
}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40023800 	.word	0x40023800
 8000464:	40020000 	.word	0x40020000
 8000468:	40020800 	.word	0x40020800

0800046c <_write>:
void delay_ms(uint32_t ms) {
    HAL_Delay(ms);
}

// Redirect printf to ITM (SWV Data Console)
int _write(int file, char *ptr, int len) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e009      	b.n	8000492 <_write+0x26>
        ITM_SendChar(*ptr++);
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	60ba      	str	r2, [r7, #8]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff12 	bl	80002b0 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3301      	adds	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbf1      	blt.n	800047e <_write+0x12>
    }
    return len;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004b2:	4a0f      	ldr	r2, [pc, #60]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ce:	4a08      	ldr	r2, [pc, #32]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f000 fa40 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40023800 	.word	0x40023800

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <NMI_Handler+0x4>

080004fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <MemManage_Handler+0x4>

0800050c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054a:	f000 f917 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e00a      	b.n	800057a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000564:	f3af 8000 	nop.w
 8000568:	4601      	mov	r1, r0
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	60ba      	str	r2, [r7, #8]
 8000570:	b2ca      	uxtb	r2, r1
 8000572:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	3301      	adds	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	dbf0      	blt.n	8000564 <_read+0x12>
  }

  return len;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <_close>:
  }
  return len;
}

int _close(int file)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b4:	605a      	str	r2, [r3, #4]
  return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <_isatty>:

int _isatty(int file)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005cc:	2301      	movs	r3, #1
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005da:	b480      	push	{r7}
 80005dc:	b085      	sub	sp, #20
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005fc:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <_sbrk+0x5c>)
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <_sbrk+0x60>)
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <_sbrk+0x64>)
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <_sbrk+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	429a      	cmp	r2, r3
 8000622:	d207      	bcs.n	8000634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000624:	f000 fd00 	bl	8001028 <__errno>
 8000628:	4603      	mov	r3, r0
 800062a:	220c      	movs	r2, #12
 800062c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	e009      	b.n	8000648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <_sbrk+0x64>)
 8000644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20020000 	.word	0x20020000
 8000654:	00000400 	.word	0x00000400
 8000658:	20000088 	.word	0x20000088
 800065c:	200001e0 	.word	0x200001e0

08000660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <SystemInit+0x20>)
 8000666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800066a:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <SystemInit+0x20>)
 800066c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000688:	f7ff ffea 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	@ (80006c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	@ (80006d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f000 fcbf 	bl	8001034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006b6:	f7ff fe23 	bl	8000300 <main>
  bx  lr    
 80006ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c8:	08001c30 	.word	0x08001c30
  ldr r2, =_sbss
 80006cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006d0:	200001dc 	.word	0x200001dc

080006d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>
	...

080006d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <HAL_Init+0x40>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <HAL_Init+0x40>)
 80006e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <HAL_Init+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <HAL_Init+0x40>)
 80006ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_Init+0x40>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_Init+0x40>)
 80006fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f931 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff feca 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023c00 	.word	0x40023c00

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f93b 	bl	80009b6 <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f911 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000008c 	.word	0x2000008c

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffde 	bl	80007a4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_SetPriorityGrouping>:
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_GetPriorityGrouping>:
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_SetPriority>:
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	@ (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	@ 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	@ 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <SysTick_Config>:
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff8e 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff47 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff5c 	bl	800084c <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff8e 	bl	80008bc <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5d 	bl	8000868 <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffb0 	bl	8000924 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	e165      	b.n	8000cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009ec:	2201      	movs	r2, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f040 8154 	bne.w	8000cb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d005      	beq.n	8000a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d130      	bne.n	8000a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	f003 0201 	and.w	r2, r3, #1
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d017      	beq.n	8000ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d123      	bne.n	8000b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	08da      	lsrs	r2, r3, #3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3208      	adds	r2, #8
 8000ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	08da      	lsrs	r2, r3, #3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3208      	adds	r2, #8
 8000b0e:	69b9      	ldr	r1, [r7, #24]
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0203 	and.w	r2, r3, #3
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 80ae 	beq.w	8000cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b72:	4a58      	ldr	r2, [pc, #352]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd8 <HAL_GPIO_Init+0x308>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d025      	beq.n	8000bea <HAL_GPIO_Init+0x21a>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8000cdc <HAL_GPIO_Init+0x30c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_Init+0x216>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8000ce0 <HAL_GPIO_Init+0x310>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x212>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce4 <HAL_GPIO_Init+0x314>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x20e>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ce8 <HAL_GPIO_Init+0x318>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x20a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8000cec <HAL_GPIO_Init+0x31c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x206>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a49      	ldr	r2, [pc, #292]	@ (8000cf0 <HAL_GPIO_Init+0x320>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x202>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e00c      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bea:	2300      	movs	r3, #0
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bfc:	4935      	ldr	r1, [pc, #212]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c2e:	4a31      	ldr	r2, [pc, #196]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c58:	4a26      	ldr	r2, [pc, #152]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c82:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cac:	4a11      	ldr	r2, [pc, #68]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	f67f ae96 	bls.w	80009ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40021400 	.word	0x40021400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40013c00 	.word	0x40013c00

08000cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e001      	b.n	8000d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43d9      	mvns	r1, r3
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	400b      	ands	r3, r1
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <std>:
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	b510      	push	{r4, lr}
 8000d60:	4604      	mov	r4, r0
 8000d62:	e9c0 3300 	strd	r3, r3, [r0]
 8000d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d6a:	6083      	str	r3, [r0, #8]
 8000d6c:	8181      	strh	r1, [r0, #12]
 8000d6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d70:	81c2      	strh	r2, [r0, #14]
 8000d72:	6183      	str	r3, [r0, #24]
 8000d74:	4619      	mov	r1, r3
 8000d76:	2208      	movs	r2, #8
 8000d78:	305c      	adds	r0, #92	@ 0x5c
 8000d7a:	f000 f906 	bl	8000f8a <memset>
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <std+0x58>)
 8000d80:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <std+0x5c>)
 8000d84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <std+0x60>)
 8000d88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <std+0x64>)
 8000d8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <std+0x68>)
 8000d90:	6224      	str	r4, [r4, #32]
 8000d92:	429c      	cmp	r4, r3
 8000d94:	d006      	beq.n	8000da4 <std+0x48>
 8000d96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d9a:	4294      	cmp	r4, r2
 8000d9c:	d002      	beq.n	8000da4 <std+0x48>
 8000d9e:	33d0      	adds	r3, #208	@ 0xd0
 8000da0:	429c      	cmp	r4, r3
 8000da2:	d105      	bne.n	8000db0 <std+0x54>
 8000da4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dac:	f000 b966 	b.w	800107c <__retarget_lock_init_recursive>
 8000db0:	bd10      	pop	{r4, pc}
 8000db2:	bf00      	nop
 8000db4:	08000f05 	.word	0x08000f05
 8000db8:	08000f27 	.word	0x08000f27
 8000dbc:	08000f5f 	.word	0x08000f5f
 8000dc0:	08000f83 	.word	0x08000f83
 8000dc4:	20000090 	.word	0x20000090

08000dc8 <stdio_exit_handler>:
 8000dc8:	4a02      	ldr	r2, [pc, #8]	@ (8000dd4 <stdio_exit_handler+0xc>)
 8000dca:	4903      	ldr	r1, [pc, #12]	@ (8000dd8 <stdio_exit_handler+0x10>)
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <stdio_exit_handler+0x14>)
 8000dce:	f000 b869 	b.w	8000ea4 <_fwalk_sglue>
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	08001919 	.word	0x08001919
 8000ddc:	2000001c 	.word	0x2000001c

08000de0 <cleanup_stdio>:
 8000de0:	6841      	ldr	r1, [r0, #4]
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <cleanup_stdio+0x34>)
 8000de4:	4299      	cmp	r1, r3
 8000de6:	b510      	push	{r4, lr}
 8000de8:	4604      	mov	r4, r0
 8000dea:	d001      	beq.n	8000df0 <cleanup_stdio+0x10>
 8000dec:	f000 fd94 	bl	8001918 <_fflush_r>
 8000df0:	68a1      	ldr	r1, [r4, #8]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <cleanup_stdio+0x38>)
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d002      	beq.n	8000dfe <cleanup_stdio+0x1e>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f000 fd8d 	bl	8001918 <_fflush_r>
 8000dfe:	68e1      	ldr	r1, [r4, #12]
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <cleanup_stdio+0x3c>)
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d004      	beq.n	8000e10 <cleanup_stdio+0x30>
 8000e06:	4620      	mov	r0, r4
 8000e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e0c:	f000 bd84 	b.w	8001918 <_fflush_r>
 8000e10:	bd10      	pop	{r4, pc}
 8000e12:	bf00      	nop
 8000e14:	20000090 	.word	0x20000090
 8000e18:	200000f8 	.word	0x200000f8
 8000e1c:	20000160 	.word	0x20000160

08000e20 <global_stdio_init.part.0>:
 8000e20:	b510      	push	{r4, lr}
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <global_stdio_init.part.0+0x30>)
 8000e24:	4c0b      	ldr	r4, [pc, #44]	@ (8000e54 <global_stdio_init.part.0+0x34>)
 8000e26:	4a0c      	ldr	r2, [pc, #48]	@ (8000e58 <global_stdio_init.part.0+0x38>)
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	f7ff ff94 	bl	8000d5c <std>
 8000e34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2109      	movs	r1, #9
 8000e3c:	f7ff ff8e 	bl	8000d5c <std>
 8000e40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e44:	2202      	movs	r2, #2
 8000e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e4a:	2112      	movs	r1, #18
 8000e4c:	f7ff bf86 	b.w	8000d5c <std>
 8000e50:	200001c8 	.word	0x200001c8
 8000e54:	20000090 	.word	0x20000090
 8000e58:	08000dc9 	.word	0x08000dc9

08000e5c <__sfp_lock_acquire>:
 8000e5c:	4801      	ldr	r0, [pc, #4]	@ (8000e64 <__sfp_lock_acquire+0x8>)
 8000e5e:	f000 b90e 	b.w	800107e <__retarget_lock_acquire_recursive>
 8000e62:	bf00      	nop
 8000e64:	200001d1 	.word	0x200001d1

08000e68 <__sfp_lock_release>:
 8000e68:	4801      	ldr	r0, [pc, #4]	@ (8000e70 <__sfp_lock_release+0x8>)
 8000e6a:	f000 b909 	b.w	8001080 <__retarget_lock_release_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200001d1 	.word	0x200001d1

08000e74 <__sinit>:
 8000e74:	b510      	push	{r4, lr}
 8000e76:	4604      	mov	r4, r0
 8000e78:	f7ff fff0 	bl	8000e5c <__sfp_lock_acquire>
 8000e7c:	6a23      	ldr	r3, [r4, #32]
 8000e7e:	b11b      	cbz	r3, 8000e88 <__sinit+0x14>
 8000e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e84:	f7ff bff0 	b.w	8000e68 <__sfp_lock_release>
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__sinit+0x28>)
 8000e8a:	6223      	str	r3, [r4, #32]
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__sinit+0x2c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1f5      	bne.n	8000e80 <__sinit+0xc>
 8000e94:	f7ff ffc4 	bl	8000e20 <global_stdio_init.part.0>
 8000e98:	e7f2      	b.n	8000e80 <__sinit+0xc>
 8000e9a:	bf00      	nop
 8000e9c:	08000de1 	.word	0x08000de1
 8000ea0:	200001c8 	.word	0x200001c8

08000ea4 <_fwalk_sglue>:
 8000ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea8:	4607      	mov	r7, r0
 8000eaa:	4688      	mov	r8, r1
 8000eac:	4614      	mov	r4, r2
 8000eae:	2600      	movs	r6, #0
 8000eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8000eb8:	d505      	bpl.n	8000ec6 <_fwalk_sglue+0x22>
 8000eba:	6824      	ldr	r4, [r4, #0]
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d1f7      	bne.n	8000eb0 <_fwalk_sglue+0xc>
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ec6:	89ab      	ldrh	r3, [r5, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d907      	bls.n	8000edc <_fwalk_sglue+0x38>
 8000ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	d003      	beq.n	8000edc <_fwalk_sglue+0x38>
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	47c0      	blx	r8
 8000eda:	4306      	orrs	r6, r0
 8000edc:	3568      	adds	r5, #104	@ 0x68
 8000ede:	e7e9      	b.n	8000eb4 <_fwalk_sglue+0x10>

08000ee0 <iprintf>:
 8000ee0:	b40f      	push	{r0, r1, r2, r3}
 8000ee2:	b507      	push	{r0, r1, r2, lr}
 8000ee4:	4906      	ldr	r1, [pc, #24]	@ (8000f00 <iprintf+0x20>)
 8000ee6:	ab04      	add	r3, sp, #16
 8000ee8:	6808      	ldr	r0, [r1, #0]
 8000eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8000eee:	6881      	ldr	r1, [r0, #8]
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	f000 f9e9 	bl	80012c8 <_vfiprintf_r>
 8000ef6:	b003      	add	sp, #12
 8000ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000efc:	b004      	add	sp, #16
 8000efe:	4770      	bx	lr
 8000f00:	20000018 	.word	0x20000018

08000f04 <__sread>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	460c      	mov	r4, r1
 8000f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0c:	f000 f868 	bl	8000fe0 <_read_r>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	bfab      	itete	ge
 8000f14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f16:	89a3      	ldrhlt	r3, [r4, #12]
 8000f18:	181b      	addge	r3, r3, r0
 8000f1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f1e:	bfac      	ite	ge
 8000f20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f22:	81a3      	strhlt	r3, [r4, #12]
 8000f24:	bd10      	pop	{r4, pc}

08000f26 <__swrite>:
 8000f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2a:	461f      	mov	r7, r3
 8000f2c:	898b      	ldrh	r3, [r1, #12]
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	4605      	mov	r5, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4616      	mov	r6, r2
 8000f36:	d505      	bpl.n	8000f44 <__swrite+0x1e>
 8000f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f000 f83c 	bl	8000fbc <_lseek_r>
 8000f44:	89a3      	ldrh	r3, [r4, #12]
 8000f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f4e:	81a3      	strh	r3, [r4, #12]
 8000f50:	4632      	mov	r2, r6
 8000f52:	463b      	mov	r3, r7
 8000f54:	4628      	mov	r0, r5
 8000f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5a:	f000 b853 	b.w	8001004 <_write_r>

08000f5e <__sseek>:
 8000f5e:	b510      	push	{r4, lr}
 8000f60:	460c      	mov	r4, r1
 8000f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f66:	f000 f829 	bl	8000fbc <_lseek_r>
 8000f6a:	1c43      	adds	r3, r0, #1
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	bf15      	itete	ne
 8000f70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f7a:	81a3      	strheq	r3, [r4, #12]
 8000f7c:	bf18      	it	ne
 8000f7e:	81a3      	strhne	r3, [r4, #12]
 8000f80:	bd10      	pop	{r4, pc}

08000f82 <__sclose>:
 8000f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f86:	f000 b809 	b.w	8000f9c <_close_r>

08000f8a <memset>:
 8000f8a:	4402      	add	r2, r0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d100      	bne.n	8000f94 <memset+0xa>
 8000f92:	4770      	bx	lr
 8000f94:	f803 1b01 	strb.w	r1, [r3], #1
 8000f98:	e7f9      	b.n	8000f8e <memset+0x4>
	...

08000f9c <_close_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4d06      	ldr	r5, [pc, #24]	@ (8000fb8 <_close_r+0x1c>)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	f7ff faf0 	bl	800058c <_close>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_close_r+0x1a>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_close_r+0x1a>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	200001cc 	.word	0x200001cc

08000fbc <_lseek_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d07      	ldr	r5, [pc, #28]	@ (8000fdc <_lseek_r+0x20>)
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	602a      	str	r2, [r5, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f7ff fb05 	bl	80005da <_lseek>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_lseek_r+0x1e>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_lseek_r+0x1e>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	200001cc 	.word	0x200001cc

08000fe0 <_read_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d07      	ldr	r5, [pc, #28]	@ (8001000 <_read_r+0x20>)
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	602a      	str	r2, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f7ff faaf 	bl	8000552 <_read>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_read_r+0x1e>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_read_r+0x1e>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	200001cc 	.word	0x200001cc

08001004 <_write_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d07      	ldr	r5, [pc, #28]	@ (8001024 <_write_r+0x20>)
 8001008:	4604      	mov	r4, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4611      	mov	r1, r2
 800100e:	2200      	movs	r2, #0
 8001010:	602a      	str	r2, [r5, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff fa2a 	bl	800046c <_write>
 8001018:	1c43      	adds	r3, r0, #1
 800101a:	d102      	bne.n	8001022 <_write_r+0x1e>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	b103      	cbz	r3, 8001022 <_write_r+0x1e>
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	200001cc 	.word	0x200001cc

08001028 <__errno>:
 8001028:	4b01      	ldr	r3, [pc, #4]	@ (8001030 <__errno+0x8>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000018 	.word	0x20000018

08001034 <__libc_init_array>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4d0d      	ldr	r5, [pc, #52]	@ (800106c <__libc_init_array+0x38>)
 8001038:	4c0d      	ldr	r4, [pc, #52]	@ (8001070 <__libc_init_array+0x3c>)
 800103a:	1b64      	subs	r4, r4, r5
 800103c:	10a4      	asrs	r4, r4, #2
 800103e:	2600      	movs	r6, #0
 8001040:	42a6      	cmp	r6, r4
 8001042:	d109      	bne.n	8001058 <__libc_init_array+0x24>
 8001044:	4d0b      	ldr	r5, [pc, #44]	@ (8001074 <__libc_init_array+0x40>)
 8001046:	4c0c      	ldr	r4, [pc, #48]	@ (8001078 <__libc_init_array+0x44>)
 8001048:	f000 fdb6 	bl	8001bb8 <_init>
 800104c:	1b64      	subs	r4, r4, r5
 800104e:	10a4      	asrs	r4, r4, #2
 8001050:	2600      	movs	r6, #0
 8001052:	42a6      	cmp	r6, r4
 8001054:	d105      	bne.n	8001062 <__libc_init_array+0x2e>
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	f855 3b04 	ldr.w	r3, [r5], #4
 800105c:	4798      	blx	r3
 800105e:	3601      	adds	r6, #1
 8001060:	e7ee      	b.n	8001040 <__libc_init_array+0xc>
 8001062:	f855 3b04 	ldr.w	r3, [r5], #4
 8001066:	4798      	blx	r3
 8001068:	3601      	adds	r6, #1
 800106a:	e7f2      	b.n	8001052 <__libc_init_array+0x1e>
 800106c:	08001c28 	.word	0x08001c28
 8001070:	08001c28 	.word	0x08001c28
 8001074:	08001c28 	.word	0x08001c28
 8001078:	08001c2c 	.word	0x08001c2c

0800107c <__retarget_lock_init_recursive>:
 800107c:	4770      	bx	lr

0800107e <__retarget_lock_acquire_recursive>:
 800107e:	4770      	bx	lr

08001080 <__retarget_lock_release_recursive>:
 8001080:	4770      	bx	lr
	...

08001084 <_free_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	2900      	cmp	r1, #0
 800108a:	d041      	beq.n	8001110 <_free_r+0x8c>
 800108c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001090:	1f0c      	subs	r4, r1, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	bfb8      	it	lt
 8001096:	18e4      	addlt	r4, r4, r3
 8001098:	f000 f8e0 	bl	800125c <__malloc_lock>
 800109c:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <_free_r+0x90>)
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	b933      	cbnz	r3, 80010b0 <_free_r+0x2c>
 80010a2:	6063      	str	r3, [r4, #4]
 80010a4:	6014      	str	r4, [r2, #0]
 80010a6:	4628      	mov	r0, r5
 80010a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ac:	f000 b8dc 	b.w	8001268 <__malloc_unlock>
 80010b0:	42a3      	cmp	r3, r4
 80010b2:	d908      	bls.n	80010c6 <_free_r+0x42>
 80010b4:	6820      	ldr	r0, [r4, #0]
 80010b6:	1821      	adds	r1, r4, r0
 80010b8:	428b      	cmp	r3, r1
 80010ba:	bf01      	itttt	eq
 80010bc:	6819      	ldreq	r1, [r3, #0]
 80010be:	685b      	ldreq	r3, [r3, #4]
 80010c0:	1809      	addeq	r1, r1, r0
 80010c2:	6021      	streq	r1, [r4, #0]
 80010c4:	e7ed      	b.n	80010a2 <_free_r+0x1e>
 80010c6:	461a      	mov	r2, r3
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	b10b      	cbz	r3, 80010d0 <_free_r+0x4c>
 80010cc:	42a3      	cmp	r3, r4
 80010ce:	d9fa      	bls.n	80010c6 <_free_r+0x42>
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	1850      	adds	r0, r2, r1
 80010d4:	42a0      	cmp	r0, r4
 80010d6:	d10b      	bne.n	80010f0 <_free_r+0x6c>
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	4401      	add	r1, r0
 80010dc:	1850      	adds	r0, r2, r1
 80010de:	4283      	cmp	r3, r0
 80010e0:	6011      	str	r1, [r2, #0]
 80010e2:	d1e0      	bne.n	80010a6 <_free_r+0x22>
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	6053      	str	r3, [r2, #4]
 80010ea:	4408      	add	r0, r1
 80010ec:	6010      	str	r0, [r2, #0]
 80010ee:	e7da      	b.n	80010a6 <_free_r+0x22>
 80010f0:	d902      	bls.n	80010f8 <_free_r+0x74>
 80010f2:	230c      	movs	r3, #12
 80010f4:	602b      	str	r3, [r5, #0]
 80010f6:	e7d6      	b.n	80010a6 <_free_r+0x22>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	1821      	adds	r1, r4, r0
 80010fc:	428b      	cmp	r3, r1
 80010fe:	bf04      	itt	eq
 8001100:	6819      	ldreq	r1, [r3, #0]
 8001102:	685b      	ldreq	r3, [r3, #4]
 8001104:	6063      	str	r3, [r4, #4]
 8001106:	bf04      	itt	eq
 8001108:	1809      	addeq	r1, r1, r0
 800110a:	6021      	streq	r1, [r4, #0]
 800110c:	6054      	str	r4, [r2, #4]
 800110e:	e7ca      	b.n	80010a6 <_free_r+0x22>
 8001110:	bd38      	pop	{r3, r4, r5, pc}
 8001112:	bf00      	nop
 8001114:	200001d8 	.word	0x200001d8

08001118 <sbrk_aligned>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4e0f      	ldr	r6, [pc, #60]	@ (8001158 <sbrk_aligned+0x40>)
 800111c:	460c      	mov	r4, r1
 800111e:	6831      	ldr	r1, [r6, #0]
 8001120:	4605      	mov	r5, r0
 8001122:	b911      	cbnz	r1, 800112a <sbrk_aligned+0x12>
 8001124:	f000 fcb4 	bl	8001a90 <_sbrk_r>
 8001128:	6030      	str	r0, [r6, #0]
 800112a:	4621      	mov	r1, r4
 800112c:	4628      	mov	r0, r5
 800112e:	f000 fcaf 	bl	8001a90 <_sbrk_r>
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	d103      	bne.n	800113e <sbrk_aligned+0x26>
 8001136:	f04f 34ff 	mov.w	r4, #4294967295
 800113a:	4620      	mov	r0, r4
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	1cc4      	adds	r4, r0, #3
 8001140:	f024 0403 	bic.w	r4, r4, #3
 8001144:	42a0      	cmp	r0, r4
 8001146:	d0f8      	beq.n	800113a <sbrk_aligned+0x22>
 8001148:	1a21      	subs	r1, r4, r0
 800114a:	4628      	mov	r0, r5
 800114c:	f000 fca0 	bl	8001a90 <_sbrk_r>
 8001150:	3001      	adds	r0, #1
 8001152:	d1f2      	bne.n	800113a <sbrk_aligned+0x22>
 8001154:	e7ef      	b.n	8001136 <sbrk_aligned+0x1e>
 8001156:	bf00      	nop
 8001158:	200001d4 	.word	0x200001d4

0800115c <_malloc_r>:
 800115c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001160:	1ccd      	adds	r5, r1, #3
 8001162:	f025 0503 	bic.w	r5, r5, #3
 8001166:	3508      	adds	r5, #8
 8001168:	2d0c      	cmp	r5, #12
 800116a:	bf38      	it	cc
 800116c:	250c      	movcc	r5, #12
 800116e:	2d00      	cmp	r5, #0
 8001170:	4606      	mov	r6, r0
 8001172:	db01      	blt.n	8001178 <_malloc_r+0x1c>
 8001174:	42a9      	cmp	r1, r5
 8001176:	d904      	bls.n	8001182 <_malloc_r+0x26>
 8001178:	230c      	movs	r3, #12
 800117a:	6033      	str	r3, [r6, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001258 <_malloc_r+0xfc>
 8001186:	f000 f869 	bl	800125c <__malloc_lock>
 800118a:	f8d8 3000 	ldr.w	r3, [r8]
 800118e:	461c      	mov	r4, r3
 8001190:	bb44      	cbnz	r4, 80011e4 <_malloc_r+0x88>
 8001192:	4629      	mov	r1, r5
 8001194:	4630      	mov	r0, r6
 8001196:	f7ff ffbf 	bl	8001118 <sbrk_aligned>
 800119a:	1c43      	adds	r3, r0, #1
 800119c:	4604      	mov	r4, r0
 800119e:	d158      	bne.n	8001252 <_malloc_r+0xf6>
 80011a0:	f8d8 4000 	ldr.w	r4, [r8]
 80011a4:	4627      	mov	r7, r4
 80011a6:	2f00      	cmp	r7, #0
 80011a8:	d143      	bne.n	8001232 <_malloc_r+0xd6>
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d04b      	beq.n	8001246 <_malloc_r+0xea>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	4639      	mov	r1, r7
 80011b2:	4630      	mov	r0, r6
 80011b4:	eb04 0903 	add.w	r9, r4, r3
 80011b8:	f000 fc6a 	bl	8001a90 <_sbrk_r>
 80011bc:	4581      	cmp	r9, r0
 80011be:	d142      	bne.n	8001246 <_malloc_r+0xea>
 80011c0:	6821      	ldr	r1, [r4, #0]
 80011c2:	1a6d      	subs	r5, r5, r1
 80011c4:	4629      	mov	r1, r5
 80011c6:	4630      	mov	r0, r6
 80011c8:	f7ff ffa6 	bl	8001118 <sbrk_aligned>
 80011cc:	3001      	adds	r0, #1
 80011ce:	d03a      	beq.n	8001246 <_malloc_r+0xea>
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	442b      	add	r3, r5
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	f8d8 3000 	ldr.w	r3, [r8]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	bb62      	cbnz	r2, 8001238 <_malloc_r+0xdc>
 80011de:	f8c8 7000 	str.w	r7, [r8]
 80011e2:	e00f      	b.n	8001204 <_malloc_r+0xa8>
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	1b52      	subs	r2, r2, r5
 80011e8:	d420      	bmi.n	800122c <_malloc_r+0xd0>
 80011ea:	2a0b      	cmp	r2, #11
 80011ec:	d917      	bls.n	800121e <_malloc_r+0xc2>
 80011ee:	1961      	adds	r1, r4, r5
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	6025      	str	r5, [r4, #0]
 80011f4:	bf18      	it	ne
 80011f6:	6059      	strne	r1, [r3, #4]
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	bf08      	it	eq
 80011fc:	f8c8 1000 	streq.w	r1, [r8]
 8001200:	5162      	str	r2, [r4, r5]
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	4630      	mov	r0, r6
 8001206:	f000 f82f 	bl	8001268 <__malloc_unlock>
 800120a:	f104 000b 	add.w	r0, r4, #11
 800120e:	1d23      	adds	r3, r4, #4
 8001210:	f020 0007 	bic.w	r0, r0, #7
 8001214:	1ac2      	subs	r2, r0, r3
 8001216:	bf1c      	itt	ne
 8001218:	1a1b      	subne	r3, r3, r0
 800121a:	50a3      	strne	r3, [r4, r2]
 800121c:	e7af      	b.n	800117e <_malloc_r+0x22>
 800121e:	6862      	ldr	r2, [r4, #4]
 8001220:	42a3      	cmp	r3, r4
 8001222:	bf0c      	ite	eq
 8001224:	f8c8 2000 	streq.w	r2, [r8]
 8001228:	605a      	strne	r2, [r3, #4]
 800122a:	e7eb      	b.n	8001204 <_malloc_r+0xa8>
 800122c:	4623      	mov	r3, r4
 800122e:	6864      	ldr	r4, [r4, #4]
 8001230:	e7ae      	b.n	8001190 <_malloc_r+0x34>
 8001232:	463c      	mov	r4, r7
 8001234:	687f      	ldr	r7, [r7, #4]
 8001236:	e7b6      	b.n	80011a6 <_malloc_r+0x4a>
 8001238:	461a      	mov	r2, r3
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	42a3      	cmp	r3, r4
 800123e:	d1fb      	bne.n	8001238 <_malloc_r+0xdc>
 8001240:	2300      	movs	r3, #0
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	e7de      	b.n	8001204 <_malloc_r+0xa8>
 8001246:	230c      	movs	r3, #12
 8001248:	6033      	str	r3, [r6, #0]
 800124a:	4630      	mov	r0, r6
 800124c:	f000 f80c 	bl	8001268 <__malloc_unlock>
 8001250:	e794      	b.n	800117c <_malloc_r+0x20>
 8001252:	6005      	str	r5, [r0, #0]
 8001254:	e7d6      	b.n	8001204 <_malloc_r+0xa8>
 8001256:	bf00      	nop
 8001258:	200001d8 	.word	0x200001d8

0800125c <__malloc_lock>:
 800125c:	4801      	ldr	r0, [pc, #4]	@ (8001264 <__malloc_lock+0x8>)
 800125e:	f7ff bf0e 	b.w	800107e <__retarget_lock_acquire_recursive>
 8001262:	bf00      	nop
 8001264:	200001d0 	.word	0x200001d0

08001268 <__malloc_unlock>:
 8001268:	4801      	ldr	r0, [pc, #4]	@ (8001270 <__malloc_unlock+0x8>)
 800126a:	f7ff bf09 	b.w	8001080 <__retarget_lock_release_recursive>
 800126e:	bf00      	nop
 8001270:	200001d0 	.word	0x200001d0

08001274 <__sfputc_r>:
 8001274:	6893      	ldr	r3, [r2, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	b410      	push	{r4}
 800127c:	6093      	str	r3, [r2, #8]
 800127e:	da08      	bge.n	8001292 <__sfputc_r+0x1e>
 8001280:	6994      	ldr	r4, [r2, #24]
 8001282:	42a3      	cmp	r3, r4
 8001284:	db01      	blt.n	800128a <__sfputc_r+0x16>
 8001286:	290a      	cmp	r1, #10
 8001288:	d103      	bne.n	8001292 <__sfputc_r+0x1e>
 800128a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800128e:	f000 bb6b 	b.w	8001968 <__swbuf_r>
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	1c58      	adds	r0, r3, #1
 8001296:	6010      	str	r0, [r2, #0]
 8001298:	7019      	strb	r1, [r3, #0]
 800129a:	4608      	mov	r0, r1
 800129c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <__sfputs_r>:
 80012a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a4:	4606      	mov	r6, r0
 80012a6:	460f      	mov	r7, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	18d5      	adds	r5, r2, r3
 80012ac:	42ac      	cmp	r4, r5
 80012ae:	d101      	bne.n	80012b4 <__sfputs_r+0x12>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e007      	b.n	80012c4 <__sfputs_r+0x22>
 80012b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012b8:	463a      	mov	r2, r7
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff ffda 	bl	8001274 <__sfputc_r>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d1f3      	bne.n	80012ac <__sfputs_r+0xa>
 80012c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012c8 <_vfiprintf_r>:
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	460d      	mov	r5, r1
 80012ce:	b09d      	sub	sp, #116	@ 0x74
 80012d0:	4614      	mov	r4, r2
 80012d2:	4698      	mov	r8, r3
 80012d4:	4606      	mov	r6, r0
 80012d6:	b118      	cbz	r0, 80012e0 <_vfiprintf_r+0x18>
 80012d8:	6a03      	ldr	r3, [r0, #32]
 80012da:	b90b      	cbnz	r3, 80012e0 <_vfiprintf_r+0x18>
 80012dc:	f7ff fdca 	bl	8000e74 <__sinit>
 80012e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012e2:	07d9      	lsls	r1, r3, #31
 80012e4:	d405      	bmi.n	80012f2 <_vfiprintf_r+0x2a>
 80012e6:	89ab      	ldrh	r3, [r5, #12]
 80012e8:	059a      	lsls	r2, r3, #22
 80012ea:	d402      	bmi.n	80012f2 <_vfiprintf_r+0x2a>
 80012ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012ee:	f7ff fec6 	bl	800107e <__retarget_lock_acquire_recursive>
 80012f2:	89ab      	ldrh	r3, [r5, #12]
 80012f4:	071b      	lsls	r3, r3, #28
 80012f6:	d501      	bpl.n	80012fc <_vfiprintf_r+0x34>
 80012f8:	692b      	ldr	r3, [r5, #16]
 80012fa:	b99b      	cbnz	r3, 8001324 <_vfiprintf_r+0x5c>
 80012fc:	4629      	mov	r1, r5
 80012fe:	4630      	mov	r0, r6
 8001300:	f000 fb70 	bl	80019e4 <__swsetup_r>
 8001304:	b170      	cbz	r0, 8001324 <_vfiprintf_r+0x5c>
 8001306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001308:	07dc      	lsls	r4, r3, #31
 800130a:	d504      	bpl.n	8001316 <_vfiprintf_r+0x4e>
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	b01d      	add	sp, #116	@ 0x74
 8001312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001316:	89ab      	ldrh	r3, [r5, #12]
 8001318:	0598      	lsls	r0, r3, #22
 800131a:	d4f7      	bmi.n	800130c <_vfiprintf_r+0x44>
 800131c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800131e:	f7ff feaf 	bl	8001080 <__retarget_lock_release_recursive>
 8001322:	e7f3      	b.n	800130c <_vfiprintf_r+0x44>
 8001324:	2300      	movs	r3, #0
 8001326:	9309      	str	r3, [sp, #36]	@ 0x24
 8001328:	2320      	movs	r3, #32
 800132a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800132e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001332:	2330      	movs	r3, #48	@ 0x30
 8001334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80014e4 <_vfiprintf_r+0x21c>
 8001338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800133c:	f04f 0901 	mov.w	r9, #1
 8001340:	4623      	mov	r3, r4
 8001342:	469a      	mov	sl, r3
 8001344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001348:	b10a      	cbz	r2, 800134e <_vfiprintf_r+0x86>
 800134a:	2a25      	cmp	r2, #37	@ 0x25
 800134c:	d1f9      	bne.n	8001342 <_vfiprintf_r+0x7a>
 800134e:	ebba 0b04 	subs.w	fp, sl, r4
 8001352:	d00b      	beq.n	800136c <_vfiprintf_r+0xa4>
 8001354:	465b      	mov	r3, fp
 8001356:	4622      	mov	r2, r4
 8001358:	4629      	mov	r1, r5
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff ffa1 	bl	80012a2 <__sfputs_r>
 8001360:	3001      	adds	r0, #1
 8001362:	f000 80a7 	beq.w	80014b4 <_vfiprintf_r+0x1ec>
 8001366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001368:	445a      	add	r2, fp
 800136a:	9209      	str	r2, [sp, #36]	@ 0x24
 800136c:	f89a 3000 	ldrb.w	r3, [sl]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 809f 	beq.w	80014b4 <_vfiprintf_r+0x1ec>
 8001376:	2300      	movs	r3, #0
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001380:	f10a 0a01 	add.w	sl, sl, #1
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	9307      	str	r3, [sp, #28]
 8001388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800138c:	931a      	str	r3, [sp, #104]	@ 0x68
 800138e:	4654      	mov	r4, sl
 8001390:	2205      	movs	r2, #5
 8001392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001396:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <_vfiprintf_r+0x21c>)
 8001398:	f7fe ff3a 	bl	8000210 <memchr>
 800139c:	9a04      	ldr	r2, [sp, #16]
 800139e:	b9d8      	cbnz	r0, 80013d8 <_vfiprintf_r+0x110>
 80013a0:	06d1      	lsls	r1, r2, #27
 80013a2:	bf44      	itt	mi
 80013a4:	2320      	movmi	r3, #32
 80013a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013aa:	0713      	lsls	r3, r2, #28
 80013ac:	bf44      	itt	mi
 80013ae:	232b      	movmi	r3, #43	@ 0x2b
 80013b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013b4:	f89a 3000 	ldrb.w	r3, [sl]
 80013b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80013ba:	d015      	beq.n	80013e8 <_vfiprintf_r+0x120>
 80013bc:	9a07      	ldr	r2, [sp, #28]
 80013be:	4654      	mov	r4, sl
 80013c0:	2000      	movs	r0, #0
 80013c2:	f04f 0c0a 	mov.w	ip, #10
 80013c6:	4621      	mov	r1, r4
 80013c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013cc:	3b30      	subs	r3, #48	@ 0x30
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	d94b      	bls.n	800146a <_vfiprintf_r+0x1a2>
 80013d2:	b1b0      	cbz	r0, 8001402 <_vfiprintf_r+0x13a>
 80013d4:	9207      	str	r2, [sp, #28]
 80013d6:	e014      	b.n	8001402 <_vfiprintf_r+0x13a>
 80013d8:	eba0 0308 	sub.w	r3, r0, r8
 80013dc:	fa09 f303 	lsl.w	r3, r9, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	9304      	str	r3, [sp, #16]
 80013e4:	46a2      	mov	sl, r4
 80013e6:	e7d2      	b.n	800138e <_vfiprintf_r+0xc6>
 80013e8:	9b03      	ldr	r3, [sp, #12]
 80013ea:	1d19      	adds	r1, r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	9103      	str	r1, [sp, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bfbb      	ittet	lt
 80013f4:	425b      	neglt	r3, r3
 80013f6:	f042 0202 	orrlt.w	r2, r2, #2
 80013fa:	9307      	strge	r3, [sp, #28]
 80013fc:	9307      	strlt	r3, [sp, #28]
 80013fe:	bfb8      	it	lt
 8001400:	9204      	strlt	r2, [sp, #16]
 8001402:	7823      	ldrb	r3, [r4, #0]
 8001404:	2b2e      	cmp	r3, #46	@ 0x2e
 8001406:	d10a      	bne.n	800141e <_vfiprintf_r+0x156>
 8001408:	7863      	ldrb	r3, [r4, #1]
 800140a:	2b2a      	cmp	r3, #42	@ 0x2a
 800140c:	d132      	bne.n	8001474 <_vfiprintf_r+0x1ac>
 800140e:	9b03      	ldr	r3, [sp, #12]
 8001410:	1d1a      	adds	r2, r3, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	9203      	str	r2, [sp, #12]
 8001416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800141a:	3402      	adds	r4, #2
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80014f4 <_vfiprintf_r+0x22c>
 8001422:	7821      	ldrb	r1, [r4, #0]
 8001424:	2203      	movs	r2, #3
 8001426:	4650      	mov	r0, sl
 8001428:	f7fe fef2 	bl	8000210 <memchr>
 800142c:	b138      	cbz	r0, 800143e <_vfiprintf_r+0x176>
 800142e:	9b04      	ldr	r3, [sp, #16]
 8001430:	eba0 000a 	sub.w	r0, r0, sl
 8001434:	2240      	movs	r2, #64	@ 0x40
 8001436:	4082      	lsls	r2, r0
 8001438:	4313      	orrs	r3, r2
 800143a:	3401      	adds	r4, #1
 800143c:	9304      	str	r3, [sp, #16]
 800143e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001442:	4829      	ldr	r0, [pc, #164]	@ (80014e8 <_vfiprintf_r+0x220>)
 8001444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001448:	2206      	movs	r2, #6
 800144a:	f7fe fee1 	bl	8000210 <memchr>
 800144e:	2800      	cmp	r0, #0
 8001450:	d03f      	beq.n	80014d2 <_vfiprintf_r+0x20a>
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <_vfiprintf_r+0x224>)
 8001454:	bb1b      	cbnz	r3, 800149e <_vfiprintf_r+0x1d6>
 8001456:	9b03      	ldr	r3, [sp, #12]
 8001458:	3307      	adds	r3, #7
 800145a:	f023 0307 	bic.w	r3, r3, #7
 800145e:	3308      	adds	r3, #8
 8001460:	9303      	str	r3, [sp, #12]
 8001462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001464:	443b      	add	r3, r7
 8001466:	9309      	str	r3, [sp, #36]	@ 0x24
 8001468:	e76a      	b.n	8001340 <_vfiprintf_r+0x78>
 800146a:	fb0c 3202 	mla	r2, ip, r2, r3
 800146e:	460c      	mov	r4, r1
 8001470:	2001      	movs	r0, #1
 8001472:	e7a8      	b.n	80013c6 <_vfiprintf_r+0xfe>
 8001474:	2300      	movs	r3, #0
 8001476:	3401      	adds	r4, #1
 8001478:	9305      	str	r3, [sp, #20]
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 0c0a 	mov.w	ip, #10
 8001480:	4620      	mov	r0, r4
 8001482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001486:	3a30      	subs	r2, #48	@ 0x30
 8001488:	2a09      	cmp	r2, #9
 800148a:	d903      	bls.n	8001494 <_vfiprintf_r+0x1cc>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0c6      	beq.n	800141e <_vfiprintf_r+0x156>
 8001490:	9105      	str	r1, [sp, #20]
 8001492:	e7c4      	b.n	800141e <_vfiprintf_r+0x156>
 8001494:	fb0c 2101 	mla	r1, ip, r1, r2
 8001498:	4604      	mov	r4, r0
 800149a:	2301      	movs	r3, #1
 800149c:	e7f0      	b.n	8001480 <_vfiprintf_r+0x1b8>
 800149e:	ab03      	add	r3, sp, #12
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	462a      	mov	r2, r5
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <_vfiprintf_r+0x228>)
 80014a6:	a904      	add	r1, sp, #16
 80014a8:	4630      	mov	r0, r6
 80014aa:	f3af 8000 	nop.w
 80014ae:	4607      	mov	r7, r0
 80014b0:	1c78      	adds	r0, r7, #1
 80014b2:	d1d6      	bne.n	8001462 <_vfiprintf_r+0x19a>
 80014b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014b6:	07d9      	lsls	r1, r3, #31
 80014b8:	d405      	bmi.n	80014c6 <_vfiprintf_r+0x1fe>
 80014ba:	89ab      	ldrh	r3, [r5, #12]
 80014bc:	059a      	lsls	r2, r3, #22
 80014be:	d402      	bmi.n	80014c6 <_vfiprintf_r+0x1fe>
 80014c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014c2:	f7ff fddd 	bl	8001080 <__retarget_lock_release_recursive>
 80014c6:	89ab      	ldrh	r3, [r5, #12]
 80014c8:	065b      	lsls	r3, r3, #25
 80014ca:	f53f af1f 	bmi.w	800130c <_vfiprintf_r+0x44>
 80014ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014d0:	e71e      	b.n	8001310 <_vfiprintf_r+0x48>
 80014d2:	ab03      	add	r3, sp, #12
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	462a      	mov	r2, r5
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <_vfiprintf_r+0x228>)
 80014da:	a904      	add	r1, sp, #16
 80014dc:	4630      	mov	r0, r6
 80014de:	f000 f879 	bl	80015d4 <_printf_i>
 80014e2:	e7e4      	b.n	80014ae <_vfiprintf_r+0x1e6>
 80014e4:	08001beb 	.word	0x08001beb
 80014e8:	08001bf5 	.word	0x08001bf5
 80014ec:	00000000 	.word	0x00000000
 80014f0:	080012a3 	.word	0x080012a3
 80014f4:	08001bf1 	.word	0x08001bf1

080014f8 <_printf_common>:
 80014f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014fc:	4616      	mov	r6, r2
 80014fe:	4698      	mov	r8, r3
 8001500:	688a      	ldr	r2, [r1, #8]
 8001502:	690b      	ldr	r3, [r1, #16]
 8001504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001508:	4293      	cmp	r3, r2
 800150a:	bfb8      	it	lt
 800150c:	4613      	movlt	r3, r2
 800150e:	6033      	str	r3, [r6, #0]
 8001510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001514:	4607      	mov	r7, r0
 8001516:	460c      	mov	r4, r1
 8001518:	b10a      	cbz	r2, 800151e <_printf_common+0x26>
 800151a:	3301      	adds	r3, #1
 800151c:	6033      	str	r3, [r6, #0]
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	0699      	lsls	r1, r3, #26
 8001522:	bf42      	ittt	mi
 8001524:	6833      	ldrmi	r3, [r6, #0]
 8001526:	3302      	addmi	r3, #2
 8001528:	6033      	strmi	r3, [r6, #0]
 800152a:	6825      	ldr	r5, [r4, #0]
 800152c:	f015 0506 	ands.w	r5, r5, #6
 8001530:	d106      	bne.n	8001540 <_printf_common+0x48>
 8001532:	f104 0a19 	add.w	sl, r4, #25
 8001536:	68e3      	ldr	r3, [r4, #12]
 8001538:	6832      	ldr	r2, [r6, #0]
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	42ab      	cmp	r3, r5
 800153e:	dc26      	bgt.n	800158e <_printf_common+0x96>
 8001540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	3b00      	subs	r3, #0
 8001548:	bf18      	it	ne
 800154a:	2301      	movne	r3, #1
 800154c:	0692      	lsls	r2, r2, #26
 800154e:	d42b      	bmi.n	80015a8 <_printf_common+0xb0>
 8001550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001554:	4641      	mov	r1, r8
 8001556:	4638      	mov	r0, r7
 8001558:	47c8      	blx	r9
 800155a:	3001      	adds	r0, #1
 800155c:	d01e      	beq.n	800159c <_printf_common+0xa4>
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	6922      	ldr	r2, [r4, #16]
 8001562:	f003 0306 	and.w	r3, r3, #6
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf02      	ittt	eq
 800156a:	68e5      	ldreq	r5, [r4, #12]
 800156c:	6833      	ldreq	r3, [r6, #0]
 800156e:	1aed      	subeq	r5, r5, r3
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	bf0c      	ite	eq
 8001574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001578:	2500      	movne	r5, #0
 800157a:	4293      	cmp	r3, r2
 800157c:	bfc4      	itt	gt
 800157e:	1a9b      	subgt	r3, r3, r2
 8001580:	18ed      	addgt	r5, r5, r3
 8001582:	2600      	movs	r6, #0
 8001584:	341a      	adds	r4, #26
 8001586:	42b5      	cmp	r5, r6
 8001588:	d11a      	bne.n	80015c0 <_printf_common+0xc8>
 800158a:	2000      	movs	r0, #0
 800158c:	e008      	b.n	80015a0 <_printf_common+0xa8>
 800158e:	2301      	movs	r3, #1
 8001590:	4652      	mov	r2, sl
 8001592:	4641      	mov	r1, r8
 8001594:	4638      	mov	r0, r7
 8001596:	47c8      	blx	r9
 8001598:	3001      	adds	r0, #1
 800159a:	d103      	bne.n	80015a4 <_printf_common+0xac>
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	3501      	adds	r5, #1
 80015a6:	e7c6      	b.n	8001536 <_printf_common+0x3e>
 80015a8:	18e1      	adds	r1, r4, r3
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	2030      	movs	r0, #48	@ 0x30
 80015ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015b2:	4422      	add	r2, r4
 80015b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80015bc:	3302      	adds	r3, #2
 80015be:	e7c7      	b.n	8001550 <_printf_common+0x58>
 80015c0:	2301      	movs	r3, #1
 80015c2:	4622      	mov	r2, r4
 80015c4:	4641      	mov	r1, r8
 80015c6:	4638      	mov	r0, r7
 80015c8:	47c8      	blx	r9
 80015ca:	3001      	adds	r0, #1
 80015cc:	d0e6      	beq.n	800159c <_printf_common+0xa4>
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7d9      	b.n	8001586 <_printf_common+0x8e>
	...

080015d4 <_printf_i>:
 80015d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015d8:	7e0f      	ldrb	r7, [r1, #24]
 80015da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80015dc:	2f78      	cmp	r7, #120	@ 0x78
 80015de:	4691      	mov	r9, r2
 80015e0:	4680      	mov	r8, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	469a      	mov	sl, r3
 80015e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80015ea:	d807      	bhi.n	80015fc <_printf_i+0x28>
 80015ec:	2f62      	cmp	r7, #98	@ 0x62
 80015ee:	d80a      	bhi.n	8001606 <_printf_i+0x32>
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	f000 80d1 	beq.w	8001798 <_printf_i+0x1c4>
 80015f6:	2f58      	cmp	r7, #88	@ 0x58
 80015f8:	f000 80b8 	beq.w	800176c <_printf_i+0x198>
 80015fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001604:	e03a      	b.n	800167c <_printf_i+0xa8>
 8001606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800160a:	2b15      	cmp	r3, #21
 800160c:	d8f6      	bhi.n	80015fc <_printf_i+0x28>
 800160e:	a101      	add	r1, pc, #4	@ (adr r1, 8001614 <_printf_i+0x40>)
 8001610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001614:	0800166d 	.word	0x0800166d
 8001618:	08001681 	.word	0x08001681
 800161c:	080015fd 	.word	0x080015fd
 8001620:	080015fd 	.word	0x080015fd
 8001624:	080015fd 	.word	0x080015fd
 8001628:	080015fd 	.word	0x080015fd
 800162c:	08001681 	.word	0x08001681
 8001630:	080015fd 	.word	0x080015fd
 8001634:	080015fd 	.word	0x080015fd
 8001638:	080015fd 	.word	0x080015fd
 800163c:	080015fd 	.word	0x080015fd
 8001640:	0800177f 	.word	0x0800177f
 8001644:	080016ab 	.word	0x080016ab
 8001648:	08001739 	.word	0x08001739
 800164c:	080015fd 	.word	0x080015fd
 8001650:	080015fd 	.word	0x080015fd
 8001654:	080017a1 	.word	0x080017a1
 8001658:	080015fd 	.word	0x080015fd
 800165c:	080016ab 	.word	0x080016ab
 8001660:	080015fd 	.word	0x080015fd
 8001664:	080015fd 	.word	0x080015fd
 8001668:	08001741 	.word	0x08001741
 800166c:	6833      	ldr	r3, [r6, #0]
 800166e:	1d1a      	adds	r2, r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6032      	str	r2, [r6, #0]
 8001674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800167c:	2301      	movs	r3, #1
 800167e:	e09c      	b.n	80017ba <_printf_i+0x1e6>
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	6820      	ldr	r0, [r4, #0]
 8001684:	1d19      	adds	r1, r3, #4
 8001686:	6031      	str	r1, [r6, #0]
 8001688:	0606      	lsls	r6, r0, #24
 800168a:	d501      	bpl.n	8001690 <_printf_i+0xbc>
 800168c:	681d      	ldr	r5, [r3, #0]
 800168e:	e003      	b.n	8001698 <_printf_i+0xc4>
 8001690:	0645      	lsls	r5, r0, #25
 8001692:	d5fb      	bpl.n	800168c <_printf_i+0xb8>
 8001694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001698:	2d00      	cmp	r5, #0
 800169a:	da03      	bge.n	80016a4 <_printf_i+0xd0>
 800169c:	232d      	movs	r3, #45	@ 0x2d
 800169e:	426d      	negs	r5, r5
 80016a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016a4:	4858      	ldr	r0, [pc, #352]	@ (8001808 <_printf_i+0x234>)
 80016a6:	230a      	movs	r3, #10
 80016a8:	e011      	b.n	80016ce <_printf_i+0xfa>
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	6833      	ldr	r3, [r6, #0]
 80016ae:	0608      	lsls	r0, r1, #24
 80016b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80016b4:	d402      	bmi.n	80016bc <_printf_i+0xe8>
 80016b6:	0649      	lsls	r1, r1, #25
 80016b8:	bf48      	it	mi
 80016ba:	b2ad      	uxthmi	r5, r5
 80016bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80016be:	4852      	ldr	r0, [pc, #328]	@ (8001808 <_printf_i+0x234>)
 80016c0:	6033      	str	r3, [r6, #0]
 80016c2:	bf14      	ite	ne
 80016c4:	230a      	movne	r3, #10
 80016c6:	2308      	moveq	r3, #8
 80016c8:	2100      	movs	r1, #0
 80016ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80016ce:	6866      	ldr	r6, [r4, #4]
 80016d0:	60a6      	str	r6, [r4, #8]
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	db05      	blt.n	80016e2 <_printf_i+0x10e>
 80016d6:	6821      	ldr	r1, [r4, #0]
 80016d8:	432e      	orrs	r6, r5
 80016da:	f021 0104 	bic.w	r1, r1, #4
 80016de:	6021      	str	r1, [r4, #0]
 80016e0:	d04b      	beq.n	800177a <_printf_i+0x1a6>
 80016e2:	4616      	mov	r6, r2
 80016e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80016e8:	fb03 5711 	mls	r7, r3, r1, r5
 80016ec:	5dc7      	ldrb	r7, [r0, r7]
 80016ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016f2:	462f      	mov	r7, r5
 80016f4:	42bb      	cmp	r3, r7
 80016f6:	460d      	mov	r5, r1
 80016f8:	d9f4      	bls.n	80016e4 <_printf_i+0x110>
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d10b      	bne.n	8001716 <_printf_i+0x142>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	07df      	lsls	r7, r3, #31
 8001702:	d508      	bpl.n	8001716 <_printf_i+0x142>
 8001704:	6923      	ldr	r3, [r4, #16]
 8001706:	6861      	ldr	r1, [r4, #4]
 8001708:	4299      	cmp	r1, r3
 800170a:	bfde      	ittt	le
 800170c:	2330      	movle	r3, #48	@ 0x30
 800170e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001712:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001716:	1b92      	subs	r2, r2, r6
 8001718:	6122      	str	r2, [r4, #16]
 800171a:	f8cd a000 	str.w	sl, [sp]
 800171e:	464b      	mov	r3, r9
 8001720:	aa03      	add	r2, sp, #12
 8001722:	4621      	mov	r1, r4
 8001724:	4640      	mov	r0, r8
 8001726:	f7ff fee7 	bl	80014f8 <_printf_common>
 800172a:	3001      	adds	r0, #1
 800172c:	d14a      	bne.n	80017c4 <_printf_i+0x1f0>
 800172e:	f04f 30ff 	mov.w	r0, #4294967295
 8001732:	b004      	add	sp, #16
 8001734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	4832      	ldr	r0, [pc, #200]	@ (800180c <_printf_i+0x238>)
 8001742:	2778      	movs	r7, #120	@ 0x78
 8001744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	6831      	ldr	r1, [r6, #0]
 800174c:	061f      	lsls	r7, r3, #24
 800174e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001752:	d402      	bmi.n	800175a <_printf_i+0x186>
 8001754:	065f      	lsls	r7, r3, #25
 8001756:	bf48      	it	mi
 8001758:	b2ad      	uxthmi	r5, r5
 800175a:	6031      	str	r1, [r6, #0]
 800175c:	07d9      	lsls	r1, r3, #31
 800175e:	bf44      	itt	mi
 8001760:	f043 0320 	orrmi.w	r3, r3, #32
 8001764:	6023      	strmi	r3, [r4, #0]
 8001766:	b11d      	cbz	r5, 8001770 <_printf_i+0x19c>
 8001768:	2310      	movs	r3, #16
 800176a:	e7ad      	b.n	80016c8 <_printf_i+0xf4>
 800176c:	4826      	ldr	r0, [pc, #152]	@ (8001808 <_printf_i+0x234>)
 800176e:	e7e9      	b.n	8001744 <_printf_i+0x170>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	f023 0320 	bic.w	r3, r3, #32
 8001776:	6023      	str	r3, [r4, #0]
 8001778:	e7f6      	b.n	8001768 <_printf_i+0x194>
 800177a:	4616      	mov	r6, r2
 800177c:	e7bd      	b.n	80016fa <_printf_i+0x126>
 800177e:	6833      	ldr	r3, [r6, #0]
 8001780:	6825      	ldr	r5, [r4, #0]
 8001782:	6961      	ldr	r1, [r4, #20]
 8001784:	1d18      	adds	r0, r3, #4
 8001786:	6030      	str	r0, [r6, #0]
 8001788:	062e      	lsls	r6, r5, #24
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	d501      	bpl.n	8001792 <_printf_i+0x1be>
 800178e:	6019      	str	r1, [r3, #0]
 8001790:	e002      	b.n	8001798 <_printf_i+0x1c4>
 8001792:	0668      	lsls	r0, r5, #25
 8001794:	d5fb      	bpl.n	800178e <_printf_i+0x1ba>
 8001796:	8019      	strh	r1, [r3, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	6123      	str	r3, [r4, #16]
 800179c:	4616      	mov	r6, r2
 800179e:	e7bc      	b.n	800171a <_printf_i+0x146>
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	1d1a      	adds	r2, r3, #4
 80017a4:	6032      	str	r2, [r6, #0]
 80017a6:	681e      	ldr	r6, [r3, #0]
 80017a8:	6862      	ldr	r2, [r4, #4]
 80017aa:	2100      	movs	r1, #0
 80017ac:	4630      	mov	r0, r6
 80017ae:	f7fe fd2f 	bl	8000210 <memchr>
 80017b2:	b108      	cbz	r0, 80017b8 <_printf_i+0x1e4>
 80017b4:	1b80      	subs	r0, r0, r6
 80017b6:	6060      	str	r0, [r4, #4]
 80017b8:	6863      	ldr	r3, [r4, #4]
 80017ba:	6123      	str	r3, [r4, #16]
 80017bc:	2300      	movs	r3, #0
 80017be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017c2:	e7aa      	b.n	800171a <_printf_i+0x146>
 80017c4:	6923      	ldr	r3, [r4, #16]
 80017c6:	4632      	mov	r2, r6
 80017c8:	4649      	mov	r1, r9
 80017ca:	4640      	mov	r0, r8
 80017cc:	47d0      	blx	sl
 80017ce:	3001      	adds	r0, #1
 80017d0:	d0ad      	beq.n	800172e <_printf_i+0x15a>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	079b      	lsls	r3, r3, #30
 80017d6:	d413      	bmi.n	8001800 <_printf_i+0x22c>
 80017d8:	68e0      	ldr	r0, [r4, #12]
 80017da:	9b03      	ldr	r3, [sp, #12]
 80017dc:	4298      	cmp	r0, r3
 80017de:	bfb8      	it	lt
 80017e0:	4618      	movlt	r0, r3
 80017e2:	e7a6      	b.n	8001732 <_printf_i+0x15e>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4632      	mov	r2, r6
 80017e8:	4649      	mov	r1, r9
 80017ea:	4640      	mov	r0, r8
 80017ec:	47d0      	blx	sl
 80017ee:	3001      	adds	r0, #1
 80017f0:	d09d      	beq.n	800172e <_printf_i+0x15a>
 80017f2:	3501      	adds	r5, #1
 80017f4:	68e3      	ldr	r3, [r4, #12]
 80017f6:	9903      	ldr	r1, [sp, #12]
 80017f8:	1a5b      	subs	r3, r3, r1
 80017fa:	42ab      	cmp	r3, r5
 80017fc:	dcf2      	bgt.n	80017e4 <_printf_i+0x210>
 80017fe:	e7eb      	b.n	80017d8 <_printf_i+0x204>
 8001800:	2500      	movs	r5, #0
 8001802:	f104 0619 	add.w	r6, r4, #25
 8001806:	e7f5      	b.n	80017f4 <_printf_i+0x220>
 8001808:	08001bfc 	.word	0x08001bfc
 800180c:	08001c0d 	.word	0x08001c0d

08001810 <__sflush_r>:
 8001810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001818:	0716      	lsls	r6, r2, #28
 800181a:	4605      	mov	r5, r0
 800181c:	460c      	mov	r4, r1
 800181e:	d454      	bmi.n	80018ca <__sflush_r+0xba>
 8001820:	684b      	ldr	r3, [r1, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	dc02      	bgt.n	800182c <__sflush_r+0x1c>
 8001826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd48      	ble.n	80018be <__sflush_r+0xae>
 800182c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800182e:	2e00      	cmp	r6, #0
 8001830:	d045      	beq.n	80018be <__sflush_r+0xae>
 8001832:	2300      	movs	r3, #0
 8001834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001838:	682f      	ldr	r7, [r5, #0]
 800183a:	6a21      	ldr	r1, [r4, #32]
 800183c:	602b      	str	r3, [r5, #0]
 800183e:	d030      	beq.n	80018a2 <__sflush_r+0x92>
 8001840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	0759      	lsls	r1, r3, #29
 8001846:	d505      	bpl.n	8001854 <__sflush_r+0x44>
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800184e:	b10b      	cbz	r3, 8001854 <__sflush_r+0x44>
 8001850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001858:	6a21      	ldr	r1, [r4, #32]
 800185a:	4628      	mov	r0, r5
 800185c:	47b0      	blx	r6
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	89a3      	ldrh	r3, [r4, #12]
 8001862:	d106      	bne.n	8001872 <__sflush_r+0x62>
 8001864:	6829      	ldr	r1, [r5, #0]
 8001866:	291d      	cmp	r1, #29
 8001868:	d82b      	bhi.n	80018c2 <__sflush_r+0xb2>
 800186a:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <__sflush_r+0x104>)
 800186c:	40ca      	lsrs	r2, r1
 800186e:	07d6      	lsls	r6, r2, #31
 8001870:	d527      	bpl.n	80018c2 <__sflush_r+0xb2>
 8001872:	2200      	movs	r2, #0
 8001874:	6062      	str	r2, [r4, #4]
 8001876:	04d9      	lsls	r1, r3, #19
 8001878:	6922      	ldr	r2, [r4, #16]
 800187a:	6022      	str	r2, [r4, #0]
 800187c:	d504      	bpl.n	8001888 <__sflush_r+0x78>
 800187e:	1c42      	adds	r2, r0, #1
 8001880:	d101      	bne.n	8001886 <__sflush_r+0x76>
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	b903      	cbnz	r3, 8001888 <__sflush_r+0x78>
 8001886:	6560      	str	r0, [r4, #84]	@ 0x54
 8001888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800188a:	602f      	str	r7, [r5, #0]
 800188c:	b1b9      	cbz	r1, 80018be <__sflush_r+0xae>
 800188e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001892:	4299      	cmp	r1, r3
 8001894:	d002      	beq.n	800189c <__sflush_r+0x8c>
 8001896:	4628      	mov	r0, r5
 8001898:	f7ff fbf4 	bl	8001084 <_free_r>
 800189c:	2300      	movs	r3, #0
 800189e:	6363      	str	r3, [r4, #52]	@ 0x34
 80018a0:	e00d      	b.n	80018be <__sflush_r+0xae>
 80018a2:	2301      	movs	r3, #1
 80018a4:	4628      	mov	r0, r5
 80018a6:	47b0      	blx	r6
 80018a8:	4602      	mov	r2, r0
 80018aa:	1c50      	adds	r0, r2, #1
 80018ac:	d1c9      	bne.n	8001842 <__sflush_r+0x32>
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0c6      	beq.n	8001842 <__sflush_r+0x32>
 80018b4:	2b1d      	cmp	r3, #29
 80018b6:	d001      	beq.n	80018bc <__sflush_r+0xac>
 80018b8:	2b16      	cmp	r3, #22
 80018ba:	d11e      	bne.n	80018fa <__sflush_r+0xea>
 80018bc:	602f      	str	r7, [r5, #0]
 80018be:	2000      	movs	r0, #0
 80018c0:	e022      	b.n	8001908 <__sflush_r+0xf8>
 80018c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	e01b      	b.n	8001902 <__sflush_r+0xf2>
 80018ca:	690f      	ldr	r7, [r1, #16]
 80018cc:	2f00      	cmp	r7, #0
 80018ce:	d0f6      	beq.n	80018be <__sflush_r+0xae>
 80018d0:	0793      	lsls	r3, r2, #30
 80018d2:	680e      	ldr	r6, [r1, #0]
 80018d4:	bf08      	it	eq
 80018d6:	694b      	ldreq	r3, [r1, #20]
 80018d8:	600f      	str	r7, [r1, #0]
 80018da:	bf18      	it	ne
 80018dc:	2300      	movne	r3, #0
 80018de:	eba6 0807 	sub.w	r8, r6, r7
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	f1b8 0f00 	cmp.w	r8, #0
 80018e8:	dde9      	ble.n	80018be <__sflush_r+0xae>
 80018ea:	6a21      	ldr	r1, [r4, #32]
 80018ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80018ee:	4643      	mov	r3, r8
 80018f0:	463a      	mov	r2, r7
 80018f2:	4628      	mov	r0, r5
 80018f4:	47b0      	blx	r6
 80018f6:	2800      	cmp	r0, #0
 80018f8:	dc08      	bgt.n	800190c <__sflush_r+0xfc>
 80018fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001902:	81a3      	strh	r3, [r4, #12]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800190c:	4407      	add	r7, r0
 800190e:	eba8 0800 	sub.w	r8, r8, r0
 8001912:	e7e7      	b.n	80018e4 <__sflush_r+0xd4>
 8001914:	20400001 	.word	0x20400001

08001918 <_fflush_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	690b      	ldr	r3, [r1, #16]
 800191c:	4605      	mov	r5, r0
 800191e:	460c      	mov	r4, r1
 8001920:	b913      	cbnz	r3, 8001928 <_fflush_r+0x10>
 8001922:	2500      	movs	r5, #0
 8001924:	4628      	mov	r0, r5
 8001926:	bd38      	pop	{r3, r4, r5, pc}
 8001928:	b118      	cbz	r0, 8001932 <_fflush_r+0x1a>
 800192a:	6a03      	ldr	r3, [r0, #32]
 800192c:	b90b      	cbnz	r3, 8001932 <_fflush_r+0x1a>
 800192e:	f7ff faa1 	bl	8000e74 <__sinit>
 8001932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f3      	beq.n	8001922 <_fflush_r+0xa>
 800193a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800193c:	07d0      	lsls	r0, r2, #31
 800193e:	d404      	bmi.n	800194a <_fflush_r+0x32>
 8001940:	0599      	lsls	r1, r3, #22
 8001942:	d402      	bmi.n	800194a <_fflush_r+0x32>
 8001944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001946:	f7ff fb9a 	bl	800107e <__retarget_lock_acquire_recursive>
 800194a:	4628      	mov	r0, r5
 800194c:	4621      	mov	r1, r4
 800194e:	f7ff ff5f 	bl	8001810 <__sflush_r>
 8001952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001954:	07da      	lsls	r2, r3, #31
 8001956:	4605      	mov	r5, r0
 8001958:	d4e4      	bmi.n	8001924 <_fflush_r+0xc>
 800195a:	89a3      	ldrh	r3, [r4, #12]
 800195c:	059b      	lsls	r3, r3, #22
 800195e:	d4e1      	bmi.n	8001924 <_fflush_r+0xc>
 8001960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001962:	f7ff fb8d 	bl	8001080 <__retarget_lock_release_recursive>
 8001966:	e7dd      	b.n	8001924 <_fflush_r+0xc>

08001968 <__swbuf_r>:
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	460e      	mov	r6, r1
 800196c:	4614      	mov	r4, r2
 800196e:	4605      	mov	r5, r0
 8001970:	b118      	cbz	r0, 800197a <__swbuf_r+0x12>
 8001972:	6a03      	ldr	r3, [r0, #32]
 8001974:	b90b      	cbnz	r3, 800197a <__swbuf_r+0x12>
 8001976:	f7ff fa7d 	bl	8000e74 <__sinit>
 800197a:	69a3      	ldr	r3, [r4, #24]
 800197c:	60a3      	str	r3, [r4, #8]
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	071a      	lsls	r2, r3, #28
 8001982:	d501      	bpl.n	8001988 <__swbuf_r+0x20>
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	b943      	cbnz	r3, 800199a <__swbuf_r+0x32>
 8001988:	4621      	mov	r1, r4
 800198a:	4628      	mov	r0, r5
 800198c:	f000 f82a 	bl	80019e4 <__swsetup_r>
 8001990:	b118      	cbz	r0, 800199a <__swbuf_r+0x32>
 8001992:	f04f 37ff 	mov.w	r7, #4294967295
 8001996:	4638      	mov	r0, r7
 8001998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	6922      	ldr	r2, [r4, #16]
 800199e:	1a98      	subs	r0, r3, r2
 80019a0:	6963      	ldr	r3, [r4, #20]
 80019a2:	b2f6      	uxtb	r6, r6
 80019a4:	4283      	cmp	r3, r0
 80019a6:	4637      	mov	r7, r6
 80019a8:	dc05      	bgt.n	80019b6 <__swbuf_r+0x4e>
 80019aa:	4621      	mov	r1, r4
 80019ac:	4628      	mov	r0, r5
 80019ae:	f7ff ffb3 	bl	8001918 <_fflush_r>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d1ed      	bne.n	8001992 <__swbuf_r+0x2a>
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60a3      	str	r3, [r4, #8]
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	6022      	str	r2, [r4, #0]
 80019c2:	701e      	strb	r6, [r3, #0]
 80019c4:	6962      	ldr	r2, [r4, #20]
 80019c6:	1c43      	adds	r3, r0, #1
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d004      	beq.n	80019d6 <__swbuf_r+0x6e>
 80019cc:	89a3      	ldrh	r3, [r4, #12]
 80019ce:	07db      	lsls	r3, r3, #31
 80019d0:	d5e1      	bpl.n	8001996 <__swbuf_r+0x2e>
 80019d2:	2e0a      	cmp	r6, #10
 80019d4:	d1df      	bne.n	8001996 <__swbuf_r+0x2e>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff ff9d 	bl	8001918 <_fflush_r>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d0d9      	beq.n	8001996 <__swbuf_r+0x2e>
 80019e2:	e7d6      	b.n	8001992 <__swbuf_r+0x2a>

080019e4 <__swsetup_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <__swsetup_r+0xa8>)
 80019e8:	4605      	mov	r5, r0
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	460c      	mov	r4, r1
 80019ee:	b118      	cbz	r0, 80019f8 <__swsetup_r+0x14>
 80019f0:	6a03      	ldr	r3, [r0, #32]
 80019f2:	b90b      	cbnz	r3, 80019f8 <__swsetup_r+0x14>
 80019f4:	f7ff fa3e 	bl	8000e74 <__sinit>
 80019f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019fc:	0719      	lsls	r1, r3, #28
 80019fe:	d422      	bmi.n	8001a46 <__swsetup_r+0x62>
 8001a00:	06da      	lsls	r2, r3, #27
 8001a02:	d407      	bmi.n	8001a14 <__swsetup_r+0x30>
 8001a04:	2209      	movs	r2, #9
 8001a06:	602a      	str	r2, [r5, #0]
 8001a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a12:	e033      	b.n	8001a7c <__swsetup_r+0x98>
 8001a14:	0758      	lsls	r0, r3, #29
 8001a16:	d512      	bpl.n	8001a3e <__swsetup_r+0x5a>
 8001a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a1a:	b141      	cbz	r1, 8001a2e <__swsetup_r+0x4a>
 8001a1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a20:	4299      	cmp	r1, r3
 8001a22:	d002      	beq.n	8001a2a <__swsetup_r+0x46>
 8001a24:	4628      	mov	r0, r5
 8001a26:	f7ff fb2d 	bl	8001084 <_free_r>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a2e:	89a3      	ldrh	r3, [r4, #12]
 8001a30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a34:	81a3      	strh	r3, [r4, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	6063      	str	r3, [r4, #4]
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	89a3      	ldrh	r3, [r4, #12]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	81a3      	strh	r3, [r4, #12]
 8001a46:	6923      	ldr	r3, [r4, #16]
 8001a48:	b94b      	cbnz	r3, 8001a5e <__swsetup_r+0x7a>
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a54:	d003      	beq.n	8001a5e <__swsetup_r+0x7a>
 8001a56:	4621      	mov	r1, r4
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f000 f84f 	bl	8001afc <__smakebuf_r>
 8001a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a62:	f013 0201 	ands.w	r2, r3, #1
 8001a66:	d00a      	beq.n	8001a7e <__swsetup_r+0x9a>
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60a2      	str	r2, [r4, #8]
 8001a6c:	6962      	ldr	r2, [r4, #20]
 8001a6e:	4252      	negs	r2, r2
 8001a70:	61a2      	str	r2, [r4, #24]
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	b942      	cbnz	r2, 8001a88 <__swsetup_r+0xa4>
 8001a76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a7a:	d1c5      	bne.n	8001a08 <__swsetup_r+0x24>
 8001a7c:	bd38      	pop	{r3, r4, r5, pc}
 8001a7e:	0799      	lsls	r1, r3, #30
 8001a80:	bf58      	it	pl
 8001a82:	6962      	ldrpl	r2, [r4, #20]
 8001a84:	60a2      	str	r2, [r4, #8]
 8001a86:	e7f4      	b.n	8001a72 <__swsetup_r+0x8e>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e7f7      	b.n	8001a7c <__swsetup_r+0x98>
 8001a8c:	20000018 	.word	0x20000018

08001a90 <_sbrk_r>:
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4d06      	ldr	r5, [pc, #24]	@ (8001aac <_sbrk_r+0x1c>)
 8001a94:	2300      	movs	r3, #0
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	602b      	str	r3, [r5, #0]
 8001a9c:	f7fe fdaa 	bl	80005f4 <_sbrk>
 8001aa0:	1c43      	adds	r3, r0, #1
 8001aa2:	d102      	bne.n	8001aaa <_sbrk_r+0x1a>
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	b103      	cbz	r3, 8001aaa <_sbrk_r+0x1a>
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
 8001aac:	200001cc 	.word	0x200001cc

08001ab0 <__swhatbuf_r>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	b096      	sub	sp, #88	@ 0x58
 8001abc:	4615      	mov	r5, r2
 8001abe:	461e      	mov	r6, r3
 8001ac0:	da0d      	bge.n	8001ade <__swhatbuf_r+0x2e>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2340      	movne	r3, #64	@ 0x40
 8001ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	6031      	str	r1, [r6, #0]
 8001ad8:	602b      	str	r3, [r5, #0]
 8001ada:	b016      	add	sp, #88	@ 0x58
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
 8001ade:	466a      	mov	r2, sp
 8001ae0:	f000 f848 	bl	8001b74 <_fstat_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	dbec      	blt.n	8001ac2 <__swhatbuf_r+0x12>
 8001ae8:	9901      	ldr	r1, [sp, #4]
 8001aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001af2:	4259      	negs	r1, r3
 8001af4:	4159      	adcs	r1, r3
 8001af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001afa:	e7eb      	b.n	8001ad4 <__swhatbuf_r+0x24>

08001afc <__smakebuf_r>:
 8001afc:	898b      	ldrh	r3, [r1, #12]
 8001afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b00:	079d      	lsls	r5, r3, #30
 8001b02:	4606      	mov	r6, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	d507      	bpl.n	8001b18 <__smakebuf_r+0x1c>
 8001b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b0c:	6023      	str	r3, [r4, #0]
 8001b0e:	6123      	str	r3, [r4, #16]
 8001b10:	2301      	movs	r3, #1
 8001b12:	6163      	str	r3, [r4, #20]
 8001b14:	b003      	add	sp, #12
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	ab01      	add	r3, sp, #4
 8001b1a:	466a      	mov	r2, sp
 8001b1c:	f7ff ffc8 	bl	8001ab0 <__swhatbuf_r>
 8001b20:	9f00      	ldr	r7, [sp, #0]
 8001b22:	4605      	mov	r5, r0
 8001b24:	4639      	mov	r1, r7
 8001b26:	4630      	mov	r0, r6
 8001b28:	f7ff fb18 	bl	800115c <_malloc_r>
 8001b2c:	b948      	cbnz	r0, 8001b42 <__smakebuf_r+0x46>
 8001b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b32:	059a      	lsls	r2, r3, #22
 8001b34:	d4ee      	bmi.n	8001b14 <__smakebuf_r+0x18>
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	81a3      	strh	r3, [r4, #12]
 8001b40:	e7e2      	b.n	8001b08 <__smakebuf_r+0xc>
 8001b42:	89a3      	ldrh	r3, [r4, #12]
 8001b44:	6020      	str	r0, [r4, #0]
 8001b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4a:	81a3      	strh	r3, [r4, #12]
 8001b4c:	9b01      	ldr	r3, [sp, #4]
 8001b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b52:	b15b      	cbz	r3, 8001b6c <__smakebuf_r+0x70>
 8001b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f000 f81d 	bl	8001b98 <_isatty_r>
 8001b5e:	b128      	cbz	r0, 8001b6c <__smakebuf_r+0x70>
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	431d      	orrs	r5, r3
 8001b70:	81a5      	strh	r5, [r4, #12]
 8001b72:	e7cf      	b.n	8001b14 <__smakebuf_r+0x18>

08001b74 <_fstat_r>:
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4d07      	ldr	r5, [pc, #28]	@ (8001b94 <_fstat_r+0x20>)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	602b      	str	r3, [r5, #0]
 8001b82:	f7fe fd0f 	bl	80005a4 <_fstat>
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	d102      	bne.n	8001b90 <_fstat_r+0x1c>
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	b103      	cbz	r3, 8001b90 <_fstat_r+0x1c>
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	200001cc 	.word	0x200001cc

08001b98 <_isatty_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4d06      	ldr	r5, [pc, #24]	@ (8001bb4 <_isatty_r+0x1c>)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	602b      	str	r3, [r5, #0]
 8001ba4:	f7fe fd0e 	bl	80005c4 <_isatty>
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d102      	bne.n	8001bb2 <_isatty_r+0x1a>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	b103      	cbz	r3, 8001bb2 <_isatty_r+0x1a>
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	200001cc 	.word	0x200001cc

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr
