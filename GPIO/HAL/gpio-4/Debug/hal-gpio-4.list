
hal-gpio-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000990  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b54  08000b54  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b54  08000b54  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b54  08000b54  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b54  08000b54  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b54  08000b54  00001b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b58  08000b58  00001b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000b5c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000b68  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b68  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032f1  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c2d  00000000  00000000  0000532d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00005f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000285  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc86  00000000  00000000  0000656d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000040cd  00000000  00000000  000261f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c41  00000000  00000000  0002a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edf01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c40  00000000  00000000  000edf44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000eeb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b3c 	.word	0x08000b3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000b3c 	.word	0x08000b3c

08000204 <main>:

// Function prototypes
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    HAL_Init();               // Initialize the HAL Library
 800020a:	f000 f961 	bl	80004d0 <HAL_Init>
    SystemClock_Config();      // Configure the system clock
 800020e:	f000 f85d 	bl	80002cc <SystemClock_Config>
    MX_GPIO_Init();           // Initialize GPIO
 8000212:	f000 f863 	bl	80002dc <MX_GPIO_Init>

    while (1) {
        // Read switch states
        uint8_t switch1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800021a:	4829      	ldr	r0, [pc, #164]	@ (80002c0 <main+0xbc>)
 800021c:	f000 fc38 	bl	8000a90 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	71fb      	strb	r3, [r7, #7]
        uint8_t switch2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000228:	4825      	ldr	r0, [pc, #148]	@ (80002c0 <main+0xbc>)
 800022a:	f000 fc31 	bl	8000a90 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	71bb      	strb	r3, [r7, #6]
        uint8_t switch3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000236:	4823      	ldr	r0, [pc, #140]	@ (80002c4 <main+0xc0>)
 8000238:	f000 fc2a 	bl	8000a90 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	717b      	strb	r3, [r7, #5]

        // If Switch 1 is pressed (active-low)
        if (switch1 == GPIO_PIN_RESET) {
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d105      	bne.n	8000252 <main+0x4e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // LED 1 ON
 8000246:	2201      	movs	r2, #1
 8000248:	2180      	movs	r1, #128	@ 0x80
 800024a:	481f      	ldr	r0, [pc, #124]	@ (80002c8 <main+0xc4>)
 800024c:	f000 fc38 	bl	8000ac0 <HAL_GPIO_WritePin>
 8000250:	e004      	b.n	800025c <main+0x58>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // LED 1 OFF
 8000252:	2200      	movs	r2, #0
 8000254:	2180      	movs	r1, #128	@ 0x80
 8000256:	481c      	ldr	r0, [pc, #112]	@ (80002c8 <main+0xc4>)
 8000258:	f000 fc32 	bl	8000ac0 <HAL_GPIO_WritePin>
        }

        // If Switch 2 is pressed (active-low)
        if (switch2 == GPIO_PIN_RESET) {
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10b      	bne.n	800027a <main+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // LED 1 ON
 8000262:	2201      	movs	r2, #1
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	4818      	ldr	r0, [pc, #96]	@ (80002c8 <main+0xc4>)
 8000268:	f000 fc2a 	bl	8000ac0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // LED 2 ON
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000272:	4815      	ldr	r0, [pc, #84]	@ (80002c8 <main+0xc4>)
 8000274:	f000 fc24 	bl	8000ac0 <HAL_GPIO_WritePin>
 8000278:	e005      	b.n	8000286 <main+0x82>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // LED 2 OFF
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000280:	4811      	ldr	r0, [pc, #68]	@ (80002c8 <main+0xc4>)
 8000282:	f000 fc1d 	bl	8000ac0 <HAL_GPIO_WritePin>
        }

        // If Switch 3 is pressed (active-low)
        if (switch3 == GPIO_PIN_RESET) {
 8000286:	797b      	ldrb	r3, [r7, #5]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d111      	bne.n	80002b0 <main+0xac>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // LED 1 ON
 800028c:	2201      	movs	r2, #1
 800028e:	2180      	movs	r1, #128	@ 0x80
 8000290:	480d      	ldr	r0, [pc, #52]	@ (80002c8 <main+0xc4>)
 8000292:	f000 fc15 	bl	8000ac0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // LED 2 ON
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800029c:	480a      	ldr	r0, [pc, #40]	@ (80002c8 <main+0xc4>)
 800029e:	f000 fc0f 	bl	8000ac0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // LED 3 ON
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <main+0xc4>)
 80002aa:	f000 fc09 	bl	8000ac0 <HAL_GPIO_WritePin>
 80002ae:	e7b2      	b.n	8000216 <main+0x12>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // LED 3 OFF
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b6:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <main+0xc4>)
 80002b8:	f000 fc02 	bl	8000ac0 <HAL_GPIO_WritePin>
    while (1) {
 80002bc:	e7ab      	b.n	8000216 <main+0x12>
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400
 80002c4:	40020800 	.word	0x40020800
 80002c8:	40020000 	.word	0x40020000

080002cc <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void) {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
    // Configure system clock (This can be generated from STM32CubeMX)
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
    // GPIO Initialization Structure
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

    // Enable GPIOA, GPIOB, GPIOC clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	4b28      	ldr	r3, [pc, #160]	@ (8000398 <MX_GPIO_Init+0xbc>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a27      	ldr	r2, [pc, #156]	@ (8000398 <MX_GPIO_Init+0xbc>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
 8000302:	4b25      	ldr	r3, [pc, #148]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	4b21      	ldr	r3, [pc, #132]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000316:	4a20      	ldr	r2, [pc, #128]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	6313      	str	r3, [r2, #48]	@ 0x30
 800031e:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a19      	ldr	r2, [pc, #100]	@ (8000398 <MX_GPIO_Init+0xbc>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_GPIO_Init+0xbc>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	603b      	str	r3, [r7, #0]
 8000344:	683b      	ldr	r3, [r7, #0]

    // Configure PA7, PA8, PA9 as output (LEDs)
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000346:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800034a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034c:	2301      	movs	r3, #1
 800034e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000354:	2300      	movs	r3, #0
 8000356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4619      	mov	r1, r3
 800035e:	480f      	ldr	r0, [pc, #60]	@ (800039c <MX_GPIO_Init+0xc0>)
 8000360:	f000 fa02 	bl	8000768 <HAL_GPIO_Init>

    // Configure PB8, PB9 as input (Switches with Pull-up)
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000368:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // Enable pull-up resistors
 800036e:	2301      	movs	r3, #1
 8000370:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	4619      	mov	r1, r3
 8000378:	4809      	ldr	r0, [pc, #36]	@ (80003a0 <MX_GPIO_Init+0xc4>)
 800037a:	f000 f9f5 	bl	8000768 <HAL_GPIO_Init>

    // Configure PC9 as input (Switch with Pull-up)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800037e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000382:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <MX_GPIO_Init+0xc8>)
 800038c:	f000 f9ec 	bl	8000768 <HAL_GPIO_Init>
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40023800 	.word	0x40023800
 800039c:	40020000 	.word	0x40020000
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40020800 	.word	0x40020800

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003b6:	4a0f      	ldr	r2, [pc, #60]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80003be:	4b0d      	ldr	r3, [pc, #52]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d2:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <HAL_MspInit+0x4c>)
 80003dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003e6:	2007      	movs	r0, #7
 80003e8:	f000 f98a 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40023800 	.word	0x40023800

080003f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <NMI_Handler+0x4>

08000400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <HardFault_Handler+0x4>

08000408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <MemManage_Handler+0x4>

08000410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <UsageFault_Handler+0x4>

08000420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044e:	f000 f891 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	@ (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000480:	f7ff ffea 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	@ (80004b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	@ (80004bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	@ (80004c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 fb23 	bl	8000af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff fea9 	bl	8000204 <main>
  bx  lr    
 80004b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	08000b5c 	.word	0x08000b5c
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	2000002c 	.word	0x2000002c

080004cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f901 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f7ff ff50 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f90b 	bl	800074e <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f8e1 	bl	8000716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	20000008 	.word	0x20000008
 8000570:	20000004 	.word	0x20000004

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000008 	.word	0x20000008
 8000598:	20000028 	.word	0x20000028

0800059c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ce:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <__NVIC_GetPriorityGrouping+0x18>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 0307 	and.w	r3, r3, #7
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	@ (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	@ (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	@ 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff ff8e 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff47 	bl	800059c <__NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff5c 	bl	80005e4 <__NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff8e 	bl	8000654 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <__NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ffb0 	bl	80006bc <SysTick_Config>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	e165      	b.n	8000a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000784:	2201      	movs	r2, #1
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	429a      	cmp	r2, r3
 800079e:	f040 8154 	bne.w	8000a4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d005      	beq.n	80007ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d130      	bne.n	800081c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2203      	movs	r2, #3
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	4013      	ands	r3, r2
 80007d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	69ba      	ldr	r2, [r7, #24]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f0:	2201      	movs	r2, #1
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	4013      	ands	r3, r2
 80007fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	f003 0201 	and.w	r2, r3, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4313      	orrs	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	2b03      	cmp	r3, #3
 8000826:	d017      	beq.n	8000858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2203      	movs	r2, #3
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b02      	cmp	r3, #2
 8000862:	d123      	bne.n	80008ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3208      	adds	r2, #8
 800086c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	220f      	movs	r2, #15
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4313      	orrs	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	08da      	lsrs	r2, r3, #3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3208      	adds	r2, #8
 80008a6:	69b9      	ldr	r1, [r7, #24]
 80008a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0203 	and.w	r2, r3, #3
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 80ae 	beq.w	8000a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a68 <HAL_GPIO_Init+0x300>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a68 <HAL_GPIO_Init+0x300>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <HAL_GPIO_Init+0x300>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800090a:	4a58      	ldr	r2, [pc, #352]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	3302      	adds	r3, #2
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a4f      	ldr	r2, [pc, #316]	@ (8000a70 <HAL_GPIO_Init+0x308>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d025      	beq.n	8000982 <HAL_GPIO_Init+0x21a>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4e      	ldr	r2, [pc, #312]	@ (8000a74 <HAL_GPIO_Init+0x30c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d01f      	beq.n	800097e <HAL_GPIO_Init+0x216>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4d      	ldr	r2, [pc, #308]	@ (8000a78 <HAL_GPIO_Init+0x310>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d019      	beq.n	800097a <HAL_GPIO_Init+0x212>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a4c      	ldr	r2, [pc, #304]	@ (8000a7c <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d013      	beq.n	8000976 <HAL_GPIO_Init+0x20e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4b      	ldr	r2, [pc, #300]	@ (8000a80 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d00d      	beq.n	8000972 <HAL_GPIO_Init+0x20a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4a      	ldr	r2, [pc, #296]	@ (8000a84 <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d007      	beq.n	800096e <HAL_GPIO_Init+0x206>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a49      	ldr	r2, [pc, #292]	@ (8000a88 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_GPIO_Init+0x202>
 8000966:	2306      	movs	r3, #6
 8000968:	e00c      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 800096a:	2307      	movs	r3, #7
 800096c:	e00a      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 800096e:	2305      	movs	r3, #5
 8000970:	e008      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 8000972:	2304      	movs	r3, #4
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 8000976:	2303      	movs	r3, #3
 8000978:	e004      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 800097a:	2302      	movs	r3, #2
 800097c:	e002      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x21c>
 8000982:	2300      	movs	r3, #0
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	f002 0203 	and.w	r2, r2, #3
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	4093      	lsls	r3, r2
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000994:	4935      	ldr	r1, [pc, #212]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009c6:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009f0:	4a26      	ldr	r2, [pc, #152]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a44:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_GPIO_Init+0x324>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	f67f ae96 	bls.w	8000784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3724      	adds	r7, #36	@ 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40021400 	.word	0x40021400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40013c00 	.word	0x40013c00

08000a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000adc:	e003      	b.n	8000ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4d0d      	ldr	r5, [pc, #52]	@ (8000b2c <__libc_init_array+0x38>)
 8000af8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b30 <__libc_init_array+0x3c>)
 8000afa:	1b64      	subs	r4, r4, r5
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	2600      	movs	r6, #0
 8000b00:	42a6      	cmp	r6, r4
 8000b02:	d109      	bne.n	8000b18 <__libc_init_array+0x24>
 8000b04:	4d0b      	ldr	r5, [pc, #44]	@ (8000b34 <__libc_init_array+0x40>)
 8000b06:	4c0c      	ldr	r4, [pc, #48]	@ (8000b38 <__libc_init_array+0x44>)
 8000b08:	f000 f818 	bl	8000b3c <_init>
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	10a4      	asrs	r4, r4, #2
 8000b10:	2600      	movs	r6, #0
 8000b12:	42a6      	cmp	r6, r4
 8000b14:	d105      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1c:	4798      	blx	r3
 8000b1e:	3601      	adds	r6, #1
 8000b20:	e7ee      	b.n	8000b00 <__libc_init_array+0xc>
 8000b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b26:	4798      	blx	r3
 8000b28:	3601      	adds	r6, #1
 8000b2a:	e7f2      	b.n	8000b12 <__libc_init_array+0x1e>
 8000b2c:	08000b54 	.word	0x08000b54
 8000b30:	08000b54 	.word	0x08000b54
 8000b34:	08000b54 	.word	0x08000b54
 8000b38:	08000b58 	.word	0x08000b58

08000b3c <_init>:
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	bf00      	nop
 8000b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b42:	bc08      	pop	{r3}
 8000b44:	469e      	mov	lr, r3
 8000b46:	4770      	bx	lr

08000b48 <_fini>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	bf00      	nop
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr
