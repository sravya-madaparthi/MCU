
lcd5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bfc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000d94  08000d94  00001d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da8  08000da8  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  08000da8  08000da8  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da8  08000da8  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da8  08000da8  00001da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dac  08000dac  00001dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08000db0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08000ddc  0000202c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000ddc  0000204c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cb0  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cbb  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  000059c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a5  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001438a  00000000  00000000  00006025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004893  00000000  00000000  0001a3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f1ae  00000000  00000000  0001ec42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ddf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb4  00000000  00000000  0009de34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0009eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d7c 	.word	0x08000d7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08000d7c 	.word	0x08000d7c

080001d8 <LCD_SendCommand>:
#define D6_PIN GPIO_PIN_5
#define D7_PIN GPIO_PIN_6

#define LCD_PORT GPIOB  // Change based on your connection

void LCD_SendCommand(uint8_t cmd) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_RESET); // RS = 0 (Command mode)
 80001e2:	2200      	movs	r2, #0
 80001e4:	2101      	movs	r1, #1
 80001e6:	483e      	ldr	r0, [pc, #248]	@ (80002e0 <LCD_SendCommand+0x108>)
 80001e8:	f000 fd8a 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, RW_PIN, GPIO_PIN_RESET); // RW = 0 (Write mode)
 80001ec:	2200      	movs	r2, #0
 80001ee:	2102      	movs	r1, #2
 80001f0:	483b      	ldr	r0, [pc, #236]	@ (80002e0 <LCD_SendCommand+0x108>)
 80001f2:	f000 fd85 	bl	8000d00 <HAL_GPIO_WritePin>

    // Send upper nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (cmd >> 4) & 1);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	091b      	lsrs	r3, r3, #4
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	461a      	mov	r2, r3
 8000204:	2108      	movs	r1, #8
 8000206:	4836      	ldr	r0, [pc, #216]	@ (80002e0 <LCD_SendCommand+0x108>)
 8000208:	f000 fd7a 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (cmd >> 5) & 1);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	095b      	lsrs	r3, r3, #5
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	461a      	mov	r2, r3
 800021a:	2110      	movs	r1, #16
 800021c:	4830      	ldr	r0, [pc, #192]	@ (80002e0 <LCD_SendCommand+0x108>)
 800021e:	f000 fd6f 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (cmd >> 6) & 1);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	099b      	lsrs	r3, r3, #6
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	2120      	movs	r1, #32
 8000232:	482b      	ldr	r0, [pc, #172]	@ (80002e0 <LCD_SendCommand+0x108>)
 8000234:	f000 fd64 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (cmd >> 7) & 1);
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	09db      	lsrs	r3, r3, #7
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2140      	movs	r1, #64	@ 0x40
 8000242:	4827      	ldr	r0, [pc, #156]	@ (80002e0 <LCD_SendCommand+0x108>)
 8000244:	f000 fd5c 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2104      	movs	r1, #4
 800024c:	4824      	ldr	r0, [pc, #144]	@ (80002e0 <LCD_SendCommand+0x108>)
 800024e:	f000 fd57 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fac6 	bl	80007e4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2104      	movs	r1, #4
 800025c:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <LCD_SendCommand+0x108>)
 800025e:	f000 fd4f 	bl	8000d00 <HAL_GPIO_WritePin>

    // Send lower nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (cmd >> 0) & 1);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	2108      	movs	r1, #8
 800026e:	481c      	ldr	r0, [pc, #112]	@ (80002e0 <LCD_SendCommand+0x108>)
 8000270:	f000 fd46 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (cmd >> 1) & 1);
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	085b      	lsrs	r3, r3, #1
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	2110      	movs	r1, #16
 8000284:	4816      	ldr	r0, [pc, #88]	@ (80002e0 <LCD_SendCommand+0x108>)
 8000286:	f000 fd3b 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (cmd >> 2) & 1);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	089b      	lsrs	r3, r3, #2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	b2db      	uxtb	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	2120      	movs	r1, #32
 800029a:	4811      	ldr	r0, [pc, #68]	@ (80002e0 <LCD_SendCommand+0x108>)
 800029c:	f000 fd30 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (cmd >> 3) & 1);
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	08db      	lsrs	r3, r3, #3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	461a      	mov	r2, r3
 80002ae:	2140      	movs	r1, #64	@ 0x40
 80002b0:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <LCD_SendCommand+0x108>)
 80002b2:	f000 fd25 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2104      	movs	r1, #4
 80002ba:	4809      	ldr	r0, [pc, #36]	@ (80002e0 <LCD_SendCommand+0x108>)
 80002bc:	f000 fd20 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 fa8f 	bl	80007e4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2104      	movs	r1, #4
 80002ca:	4805      	ldr	r0, [pc, #20]	@ (80002e0 <LCD_SendCommand+0x108>)
 80002cc:	f000 fd18 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 80002d0:	2002      	movs	r0, #2
 80002d2:	f000 fa87 	bl	80007e4 <HAL_Delay>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40020400 	.word	0x40020400

080002e4 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_SET); // RS = 1 (Data mode)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2101      	movs	r1, #1
 80002f2:	483e      	ldr	r0, [pc, #248]	@ (80003ec <LCD_SendData+0x108>)
 80002f4:	f000 fd04 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, RW_PIN, GPIO_PIN_RESET); // RW = 0 (Write mode)
 80002f8:	2200      	movs	r2, #0
 80002fa:	2102      	movs	r1, #2
 80002fc:	483b      	ldr	r0, [pc, #236]	@ (80003ec <LCD_SendData+0x108>)
 80002fe:	f000 fcff 	bl	8000d00 <HAL_GPIO_WritePin>

    // Send upper nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (data >> 4) & 1);
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	2108      	movs	r1, #8
 8000312:	4836      	ldr	r0, [pc, #216]	@ (80003ec <LCD_SendData+0x108>)
 8000314:	f000 fcf4 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (data >> 5) & 1);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	095b      	lsrs	r3, r3, #5
 800031c:	b2db      	uxtb	r3, r3
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	2110      	movs	r1, #16
 8000328:	4830      	ldr	r0, [pc, #192]	@ (80003ec <LCD_SendData+0x108>)
 800032a:	f000 fce9 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (data >> 6) & 1);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	099b      	lsrs	r3, r3, #6
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	2120      	movs	r1, #32
 800033e:	482b      	ldr	r0, [pc, #172]	@ (80003ec <LCD_SendData+0x108>)
 8000340:	f000 fcde 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (data >> 7) & 1);
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	09db      	lsrs	r3, r3, #7
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	2140      	movs	r1, #64	@ 0x40
 800034e:	4827      	ldr	r0, [pc, #156]	@ (80003ec <LCD_SendData+0x108>)
 8000350:	f000 fcd6 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2104      	movs	r1, #4
 8000358:	4824      	ldr	r0, [pc, #144]	@ (80003ec <LCD_SendData+0x108>)
 800035a:	f000 fcd1 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 fa40 	bl	80007e4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2104      	movs	r1, #4
 8000368:	4820      	ldr	r0, [pc, #128]	@ (80003ec <LCD_SendData+0x108>)
 800036a:	f000 fcc9 	bl	8000d00 <HAL_GPIO_WritePin>

    // Send lower nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (data >> 0) & 1);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	2108      	movs	r1, #8
 800037a:	481c      	ldr	r0, [pc, #112]	@ (80003ec <LCD_SendData+0x108>)
 800037c:	f000 fcc0 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (data >> 1) & 1);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	2110      	movs	r1, #16
 8000390:	4816      	ldr	r0, [pc, #88]	@ (80003ec <LCD_SendData+0x108>)
 8000392:	f000 fcb5 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (data >> 2) & 1);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	2120      	movs	r1, #32
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <LCD_SendData+0x108>)
 80003a8:	f000 fcaa 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (data >> 3) & 1);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	2140      	movs	r1, #64	@ 0x40
 80003bc:	480b      	ldr	r0, [pc, #44]	@ (80003ec <LCD_SendData+0x108>)
 80003be:	f000 fc9f 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2104      	movs	r1, #4
 80003c6:	4809      	ldr	r0, [pc, #36]	@ (80003ec <LCD_SendData+0x108>)
 80003c8:	f000 fc9a 	bl	8000d00 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f000 fa09 	bl	80007e4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2104      	movs	r1, #4
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <LCD_SendData+0x108>)
 80003d8:	f000 fc92 	bl	8000d00 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 fa01 	bl	80007e4 <HAL_Delay>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40020400 	.word	0x40020400

080003f0 <LCD_SendString>:

void LCD_SendString(char *str) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80003f8:	e006      	b.n	8000408 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	1c5a      	adds	r2, r3, #1
 80003fe:	607a      	str	r2, [r7, #4]
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff6e 	bl	80002e4 <LCD_SendData>
    while (*str) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d1f4      	bne.n	80003fa <LCD_SendString+0xa>
    }
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	460a      	mov	r2, r1
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	4613      	mov	r3, r2
 8000428:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x80 + col : 0xC0 + col;
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d103      	bne.n	8000438 <LCD_SetCursor+0x1e>
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	3b80      	subs	r3, #128	@ 0x80
 8000434:	b2db      	uxtb	r3, r3
 8000436:	e002      	b.n	800043e <LCD_SetCursor+0x24>
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	3b40      	subs	r3, #64	@ 0x40
 800043c:	b2db      	uxtb	r3, r3
 800043e:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(address);
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <LCD_SendCommand>
}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <LCD_Init>:
void LCD_Clear(void) {
    LCD_SendCommand(0x01);  // Clear display command
    HAL_Delay(2);
}

void LCD_Init(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
    // GPIO Initialization
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <LCD_Init+0x84>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a1d      	ldr	r2, [pc, #116]	@ (80004d4 <LCD_Init+0x84>)
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
 8000466:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <LCD_Init+0x84>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	f003 0302 	and.w	r3, r3, #2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = RS_PIN | RW_PIN | E_PIN | D4_PIN | D5_PIN | D6_PIN | D7_PIN;
 8000480:	237f      	movs	r3, #127	@ 0x7f
 8000482:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4619      	mov	r1, r3
 8000494:	4810      	ldr	r0, [pc, #64]	@ (80004d8 <LCD_Init+0x88>)
 8000496:	f000 faaf 	bl	80009f8 <HAL_GPIO_Init>

    // LCD Initialization Sequence
    HAL_Delay(50);
 800049a:	2032      	movs	r0, #50	@ 0x32
 800049c:	f000 f9a2 	bl	80007e4 <HAL_Delay>
    LCD_SendCommand(0x33);
 80004a0:	2033      	movs	r0, #51	@ 0x33
 80004a2:	f7ff fe99 	bl	80001d8 <LCD_SendCommand>
    LCD_SendCommand(0x32);
 80004a6:	2032      	movs	r0, #50	@ 0x32
 80004a8:	f7ff fe96 	bl	80001d8 <LCD_SendCommand>
    LCD_SendCommand(0x28); // 4-bit mode, 2 lines, 5x8 font
 80004ac:	2028      	movs	r0, #40	@ 0x28
 80004ae:	f7ff fe93 	bl	80001d8 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 80004b2:	200c      	movs	r0, #12
 80004b4:	f7ff fe90 	bl	80001d8 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode
 80004b8:	2006      	movs	r0, #6
 80004ba:	f7ff fe8d 	bl	80001d8 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff fe8a 	bl	80001d8 <LCD_SendCommand>
    HAL_Delay(2);
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 f98d 	bl	80007e4 <HAL_Delay>
}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400

080004dc <LCD_CreateCustomCharacters>:
uint8_t beta[8]  = { 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x1F, 0x0E, 0x00 };  // β (Beta)
uint8_t pi[8]    = { 0x1F, 0x15, 0x15, 0x15, 0x15, 0x11, 0x11, 0x00 };  // π (Pi)
uint8_t ohm[8]   = { 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x0A, 0x1F, 0x00 };  // Ω (Ohm)

// Function to Create Custom Characters
void LCD_CreateCustomCharacters() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x40);  // Set CGRAM address to 0x40
 80004e2:	2040      	movs	r0, #64	@ 0x40
 80004e4:	f7ff fe78 	bl	80001d8 <LCD_SendCommand>

    for (uint8_t i = 0; i < 8; i++) LCD_SendData(alpha[i]);  // Store α in CGRAM
 80004e8:	2300      	movs	r3, #0
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e008      	b.n	8000500 <LCD_CreateCustomCharacters+0x24>
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4a1e      	ldr	r2, [pc, #120]	@ (800056c <LCD_CreateCustomCharacters+0x90>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fef5 	bl	80002e4 <LCD_SendData>
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	3301      	adds	r3, #1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b07      	cmp	r3, #7
 8000504:	d9f3      	bls.n	80004ee <LCD_CreateCustomCharacters+0x12>
    for (uint8_t i = 0; i < 8; i++) LCD_SendData(beta[i]);   // Store β in CGRAM
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
 800050a:	e008      	b.n	800051e <LCD_CreateCustomCharacters+0x42>
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <LCD_CreateCustomCharacters+0x94>)
 8000510:	5cd3      	ldrb	r3, [r2, r3]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fee6 	bl	80002e4 <LCD_SendData>
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	3301      	adds	r3, #1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	2b07      	cmp	r3, #7
 8000522:	d9f3      	bls.n	800050c <LCD_CreateCustomCharacters+0x30>
    for (uint8_t i = 0; i < 8; i++) LCD_SendData(pi[i]);     // Store π in CGRAM
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
 8000528:	e008      	b.n	800053c <LCD_CreateCustomCharacters+0x60>
 800052a:	797b      	ldrb	r3, [r7, #5]
 800052c:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <LCD_CreateCustomCharacters+0x98>)
 800052e:	5cd3      	ldrb	r3, [r2, r3]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fed7 	bl	80002e4 <LCD_SendData>
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	3301      	adds	r3, #1
 800053a:	717b      	strb	r3, [r7, #5]
 800053c:	797b      	ldrb	r3, [r7, #5]
 800053e:	2b07      	cmp	r3, #7
 8000540:	d9f3      	bls.n	800052a <LCD_CreateCustomCharacters+0x4e>
    for (uint8_t i = 0; i < 8; i++) LCD_SendData(ohm[i]);    // Store Ω in CGRAM
 8000542:	2300      	movs	r3, #0
 8000544:	713b      	strb	r3, [r7, #4]
 8000546:	e008      	b.n	800055a <LCD_CreateCustomCharacters+0x7e>
 8000548:	793b      	ldrb	r3, [r7, #4]
 800054a:	4a0b      	ldr	r2, [pc, #44]	@ (8000578 <LCD_CreateCustomCharacters+0x9c>)
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fec8 	bl	80002e4 <LCD_SendData>
 8000554:	793b      	ldrb	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	713b      	strb	r3, [r7, #4]
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d9f3      	bls.n	8000548 <LCD_CreateCustomCharacters+0x6c>
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	20000008 	.word	0x20000008
 8000574:	20000010 	.word	0x20000010
 8000578:	20000018 	.word	0x20000018

0800057c <main>:

// Main Function
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    HAL_Init();   // Initialize HAL
 8000580:	f000 f8be 	bl	8000700 <HAL_Init>
    LCD_Init();   // Initialize LCD
 8000584:	f7ff ff64 	bl	8000450 <LCD_Init>

    LCD_CreateCustomCharacters(); // Load custom characters into CGRAM
 8000588:	f7ff ffa8 	bl	80004dc <LCD_CreateCustomCharacters>

    LCD_SetCursor(0, 0);  // Set cursor to first line
 800058c:	2100      	movs	r1, #0
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff43 	bl	800041a <LCD_SetCursor>
    LCD_SendString("Special Chars:");
 8000594:	480e      	ldr	r0, [pc, #56]	@ (80005d0 <main+0x54>)
 8000596:	f7ff ff2b 	bl	80003f0 <LCD_SendString>

    // Display Custom Characters
    LCD_SetCursor(1, 0);  // Move to second line
 800059a:	2100      	movs	r1, #0
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff3c 	bl	800041a <LCD_SetCursor>
    LCD_SendData(0);  // Display α (Alpha)
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fe9e 	bl	80002e4 <LCD_SendData>
    LCD_SendString(" ");
 80005a8:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <main+0x58>)
 80005aa:	f7ff ff21 	bl	80003f0 <LCD_SendString>
    LCD_SendData(1);  // Display β (Beta)
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fe98 	bl	80002e4 <LCD_SendData>
    LCD_SendString(" ");
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0x58>)
 80005b6:	f7ff ff1b 	bl	80003f0 <LCD_SendString>
    LCD_SendData(2);  // Display π (Pi)
 80005ba:	2002      	movs	r0, #2
 80005bc:	f7ff fe92 	bl	80002e4 <LCD_SendData>
    LCD_SendString(" ");
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <main+0x58>)
 80005c2:	f7ff ff15 	bl	80003f0 <LCD_SendString>
    LCD_SendData(3);  // Display Ω (Ohm)
 80005c6:	2003      	movs	r0, #3
 80005c8:	f7ff fe8c 	bl	80002e4 <LCD_SendData>

    while (1);
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x50>
 80005d0:	08000d94 	.word	0x08000d94
 80005d4:	08000da4 	.word	0x08000da4

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_MspInit+0x4c>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <HAL_MspInit+0x4c>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_MspInit+0x4c>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x4c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <HAL_MspInit+0x4c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	@ 0x40
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_MspInit+0x4c>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 f9ba 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f891 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <SystemInit+0x20>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000692:	4a05      	ldr	r2, [pc, #20]	@ (80006a8 <SystemInit+0x20>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006b0:	f7ff ffea 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 fb2b 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006de:	f7ff ff4d 	bl	800057c <main>
  bx  lr    
 80006e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80006f0:	08000db0 	.word	0x08000db0
  ldr r2, =_sbss
 80006f4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80006f8:	2000004c 	.word	0x2000004c

080006fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <HAL_Init+0x40>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800070e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_Init+0x40>)
 8000716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800071a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <HAL_Init+0x40>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f931 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff ff50 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023c00 	.word	0x40023c00

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f93b 	bl	80009de <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f911 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000020 	.word	0x20000020
 800079c:	20000028 	.word	0x20000028
 80007a0:	20000024 	.word	0x20000024

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028
 80007c8:	20000048 	.word	0x20000048

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000048 	.word	0x20000048

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff ffee 	bl	80007cc <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffde 	bl	80007cc <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	@ (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	@ 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	@ 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff8e 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff47 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff5c 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff8e 	bl	80008e4 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffb0 	bl	800094c <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	@ 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e159      	b.n	8000cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a14:	2201      	movs	r2, #1
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f040 8148 	bne.w	8000cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d005      	beq.n	8000a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d130      	bne.n	8000aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a80:	2201      	movs	r2, #1
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	f003 0201 	and.w	r2, r3, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d017      	beq.n	8000ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d123      	bne.n	8000b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	69b9      	ldr	r1, [r7, #24]
 8000b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0203 	and.w	r2, r3, #3
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 80a2 	beq.w	8000cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b57      	ldr	r3, [pc, #348]	@ (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a56      	ldr	r2, [pc, #344]	@ (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b54      	ldr	r3, [pc, #336]	@ (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b9a:	4a52      	ldr	r2, [pc, #328]	@ (8000ce4 <HAL_GPIO_Init+0x2ec>)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a49      	ldr	r2, [pc, #292]	@ (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d019      	beq.n	8000bfa <HAL_GPIO_Init+0x202>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <HAL_GPIO_Init+0x2f4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d013      	beq.n	8000bf6 <HAL_GPIO_Init+0x1fe>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a47      	ldr	r2, [pc, #284]	@ (8000cf0 <HAL_GPIO_Init+0x2f8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00d      	beq.n	8000bf2 <HAL_GPIO_Init+0x1fa>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a46      	ldr	r2, [pc, #280]	@ (8000cf4 <HAL_GPIO_Init+0x2fc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d007      	beq.n	8000bee <HAL_GPIO_Init+0x1f6>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a45      	ldr	r2, [pc, #276]	@ (8000cf8 <HAL_GPIO_Init+0x300>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_GPIO_Init+0x1f2>
 8000be6:	2304      	movs	r3, #4
 8000be8:	e008      	b.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bea:	2307      	movs	r3, #7
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x204>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	f002 0203 	and.w	r2, r2, #3
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0c:	4935      	ldr	r1, [pc, #212]	@ (8000ce4 <HAL_GPIO_Init+0x2ec>)
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c44:	4b2d      	ldr	r3, [pc, #180]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c68:	4a24      	ldr	r2, [pc, #144]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_GPIO_Init+0x304>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f67f aea2 	bls.w	8000a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40013c00 	.word	0x40013c00

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d1c:	e003      	b.n	8000d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	619a      	str	r2, [r3, #24]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	4d0d      	ldr	r5, [pc, #52]	@ (8000d6c <__libc_init_array+0x38>)
 8000d38:	4c0d      	ldr	r4, [pc, #52]	@ (8000d70 <__libc_init_array+0x3c>)
 8000d3a:	1b64      	subs	r4, r4, r5
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	2600      	movs	r6, #0
 8000d40:	42a6      	cmp	r6, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	4d0b      	ldr	r5, [pc, #44]	@ (8000d74 <__libc_init_array+0x40>)
 8000d46:	4c0c      	ldr	r4, [pc, #48]	@ (8000d78 <__libc_init_array+0x44>)
 8000d48:	f000 f818 	bl	8000d7c <_init>
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	2600      	movs	r6, #0
 8000d52:	42a6      	cmp	r6, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5c:	4798      	blx	r3
 8000d5e:	3601      	adds	r6, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d66:	4798      	blx	r3
 8000d68:	3601      	adds	r6, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08000da8 	.word	0x08000da8
 8000d70:	08000da8 	.word	0x08000da8
 8000d74:	08000da8 	.word	0x08000da8
 8000d78:	08000dac 	.word	0x08000dac

08000d7c <_init>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr

08000d88 <_fini>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr
