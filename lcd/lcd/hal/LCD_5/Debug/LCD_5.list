
LCD_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c38  08000c38  00001c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c48  08000c48  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c48  08000c48  00001c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c4c  08000c4c  00001c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000c50  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000c5c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000c5c  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b76  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000be6  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  00005798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ac  00000000  00000000  00005b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141de  00000000  00000000  00005e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000414c  00000000  00000000  00019fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f22a  00000000  00000000  0001e12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d20  00000000  00000000  0009d39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c20 	.word	0x08000c20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000c20 	.word	0x08000c20

080001d8 <main>:
/* Function Prototypes for System and GPIO Initialization */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    /* Initialize HAL and system clock */
    HAL_Init();
 80001dc:	f000 f9e2 	bl	80005a4 <HAL_Init>
    SystemClock_Config();
 80001e0:	f000 f812 	bl	8000208 <SystemClock_Config>
    MX_GPIO_Init();
 80001e4:	f000 f818 	bl	8000218 <MX_GPIO_Init>

    /* Initialize LCD in 4-bit mode and clear screen */
    LCD_Init();
 80001e8:	f000 f844 	bl	8000274 <LCD_Init>
    LCD_Clear();
 80001ec:	f000 f86e 	bl	80002cc <LCD_Clear>

    /* Set cursor position and display string */
    LCD_SetCursor(0, 0);
 80001f0:	2100      	movs	r1, #0
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 f874 	bl	80002e0 <LCD_SetCursor>
    LCD_WriteString("Hello, World!");
 80001f8:	4802      	ldr	r0, [pc, #8]	@ (8000204 <main+0x2c>)
 80001fa:	f000 f89c 	bl	8000336 <LCD_WriteString>

    while (1)
 80001fe:	bf00      	nop
 8000200:	e7fd      	b.n	80001fe <main+0x26>
 8000202:	bf00      	nop
 8000204:	08000c38 	.word	0x08000c38

08000208 <SystemClock_Config>:

/* System Clock Configuration
   (Customize this function or generate it with STM32CubeMX)
*/
void SystemClock_Config(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    // Clock configuration code goes here.
    // This is usually auto-generated or customized for your board.
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
	...

08000218 <MX_GPIO_Init>:

/* Initialize GPIO pins for LCD (using GPIOB) */
static void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]

    /* Enable clock for GPIOB */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <MX_GPIO_Init+0x54>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <MX_GPIO_Init+0x54>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
 800023c:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <MX_GPIO_Init+0x54>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	f003 0302 	and.w	r3, r3, #2
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	683b      	ldr	r3, [r7, #0]

    /* Configure LCD pins as output */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000248:	233f      	movs	r3, #63	@ 0x3f
 800024a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024c:	2301      	movs	r3, #1
 800024e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000254:	2300      	movs	r3, #0
 8000256:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4619      	mov	r1, r3
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <MX_GPIO_Init+0x58>)
 800025e:	f000 fb1d 	bl	800089c <HAL_GPIO_Init>
}
 8000262:	bf00      	nop
 8000264:	3718      	adds	r7, #24
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020400 	.word	0x40020400

08000274 <LCD_Init>:

/* --- LCD Driver Functions --- */

/* Initialize LCD in 4-bit mode */
void LCD_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    HAL_Delay(40);  // Wait for LCD to power up
 8000278:	2028      	movs	r0, #40	@ 0x28
 800027a:	f000 fa05 	bl	8000688 <HAL_Delay>

    /* Initialization sequence for 4-bit mode (per HD44780 datasheet) */
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2101      	movs	r1, #1
 8000282:	4811      	ldr	r0, [pc, #68]	@ (80002c8 <LCD_Init+0x54>)
 8000284:	f000 fc8e 	bl	8000ba4 <HAL_GPIO_WritePin>
    LCD_SendNibble(0x03);
 8000288:	2003      	movs	r0, #3
 800028a:	f000 f8a9 	bl	80003e0 <LCD_SendNibble>
    HAL_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f000 f9fa 	bl	8000688 <HAL_Delay>
    LCD_SendNibble(0x03);
 8000294:	2003      	movs	r0, #3
 8000296:	f000 f8a3 	bl	80003e0 <LCD_SendNibble>
    HAL_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f000 f9f4 	bl	8000688 <HAL_Delay>
    LCD_SendNibble(0x03);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f000 f89d 	bl	80003e0 <LCD_SendNibble>
    HAL_Delay(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 f9ee 	bl	8000688 <HAL_Delay>
    LCD_SendNibble(0x02);  // Set to 4-bit mode
 80002ac:	2002      	movs	r0, #2
 80002ae:	f000 f897 	bl	80003e0 <LCD_SendNibble>

    /* Function set: 4-bit, 2-line, 5x8 font */
    LCD_SendCommand(0x28);
 80002b2:	2028      	movs	r0, #40	@ 0x28
 80002b4:	f000 f854 	bl	8000360 <LCD_SendCommand>
    /* Display on, cursor off, blink off */
    LCD_SendCommand(0x0C);
 80002b8:	200c      	movs	r0, #12
 80002ba:	f000 f851 	bl	8000360 <LCD_SendCommand>
    /* Entry mode: Increment cursor */
    LCD_SendCommand(0x06);
 80002be:	2006      	movs	r0, #6
 80002c0:	f000 f84e 	bl	8000360 <LCD_SendCommand>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40020400 	.word	0x40020400

080002cc <LCD_Clear>:

/* Clear LCD display */
void LCD_Clear(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);  // Clear display command
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 f845 	bl	8000360 <LCD_SendCommand>
    HAL_Delay(2);
 80002d6:	2002      	movs	r0, #2
 80002d8:	f000 f9d6 	bl	8000688 <HAL_Delay>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LCD_SetCursor>:

/* Set cursor position: row (0 or 1), col (0 to 15) */
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <LCD_SetCursor+0x1a>
 80002f6:	2300      	movs	r3, #0
 80002f8:	e000      	b.n	80002fc <LCD_SetCursor+0x1c>
 80002fa:	2340      	movs	r3, #64	@ 0x40
 80002fc:	73fb      	strb	r3, [r7, #15]
    address += col;
 80002fe:	7bfa      	ldrb	r2, [r7, #15]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	4413      	add	r3, r2
 8000304:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | address);
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f826 	bl	8000360 <LCD_SendCommand>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <LCD_WriteChar>:

/* Write a single character to the LCD */
void LCD_WriteChar(char ch)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    LCD_SendData((uint8_t)ch);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f839 	bl	80003a0 <LCD_SendData>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <LCD_WriteString>:

/* Write a null-terminated string to the LCD */
void LCD_WriteString(char *str)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
    while (*str)
 800033e:	e006      	b.n	800034e <LCD_WriteString+0x18>
    {
        LCD_WriteChar(*str++);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	607a      	str	r2, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ffe7 	bl	800031c <LCD_WriteChar>
    while (*str)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1f4      	bne.n	8000340 <LCD_WriteString+0xa>
    }
}
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <LCD_SendCommand>:

/* Send a command byte to the LCD */
void LCD_SendCommand(uint8_t cmd)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_RESET);  // RS low for command
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	480b      	ldr	r0, [pc, #44]	@ (800039c <LCD_SendCommand+0x3c>)
 8000370:	f000 fc18 	bl	8000ba4 <HAL_GPIO_WritePin>
    LCD_SendNibble(cmd >> 4);      // Send high nibble
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	091b      	lsrs	r3, r3, #4
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f830 	bl	80003e0 <LCD_SendNibble>
    LCD_SendNibble(cmd & 0x0F);      // Send low nibble
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f003 030f 	and.w	r3, r3, #15
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f829 	bl	80003e0 <LCD_SendNibble>
    HAL_Delay(2);
 800038e:	2002      	movs	r0, #2
 8000390:	f000 f97a 	bl	8000688 <HAL_Delay>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40020400 	.word	0x40020400

080003a0 <LCD_SendData>:

/* Send a data byte (character) to the LCD */
void LCD_SendData(uint8_t data)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_SET);    // RS high for data
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	480b      	ldr	r0, [pc, #44]	@ (80003dc <LCD_SendData+0x3c>)
 80003b0:	f000 fbf8 	bl	8000ba4 <HAL_GPIO_WritePin>
    LCD_SendNibble(data >> 4);       // Send high nibble
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	091b      	lsrs	r3, r3, #4
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f810 	bl	80003e0 <LCD_SendNibble>
    LCD_SendNibble(data & 0x0F);       // Send low nibble
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f003 030f 	and.w	r3, r3, #15
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f809 	bl	80003e0 <LCD_SendNibble>
    HAL_Delay(2);
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 f95a 	bl	8000688 <HAL_Delay>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40020400 	.word	0x40020400

080003e0 <LCD_SendNibble>:

/* Send a 4-bit nibble to the LCD */
static void LCD_SendNibble(uint8_t nibble)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2104      	movs	r1, #4
 80003f6:	4815      	ldr	r0, [pc, #84]	@ (800044c <LCD_SendNibble+0x6c>)
 80003f8:	f000 fbd4 	bl	8000ba4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	2108      	movs	r1, #8
 800040c:	480f      	ldr	r0, [pc, #60]	@ (800044c <LCD_SendNibble+0x6c>)
 800040e:	f000 fbc9 	bl	8000ba4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	109b      	asrs	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	2110      	movs	r1, #16
 8000422:	480a      	ldr	r0, [pc, #40]	@ (800044c <LCD_SendNibble+0x6c>)
 8000424:	f000 fbbe 	bl	8000ba4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	10db      	asrs	r3, r3, #3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	2120      	movs	r1, #32
 8000438:	4804      	ldr	r0, [pc, #16]	@ (800044c <LCD_SendNibble+0x6c>)
 800043a:	f000 fbb3 	bl	8000ba4 <HAL_GPIO_WritePin>
    LCD_ToggleEnable();
 800043e:	f000 f807 	bl	8000450 <LCD_ToggleEnable>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40020400 	.word	0x40020400

08000450 <LCD_ToggleEnable>:

/* Toggle the Enable pin to latch data into the LCD */
static void LCD_ToggleEnable(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2102      	movs	r1, #2
 8000458:	4807      	ldr	r0, [pc, #28]	@ (8000478 <LCD_ToggleEnable+0x28>)
 800045a:	f000 fba3 	bl	8000ba4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800045e:	2001      	movs	r0, #1
 8000460:	f000 f912 	bl	8000688 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2102      	movs	r1, #2
 8000468:	4803      	ldr	r0, [pc, #12]	@ (8000478 <LCD_ToggleEnable+0x28>)
 800046a:	f000 fb9b 	bl	8000ba4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f000 f90a 	bl	8000688 <HAL_Delay>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40020400 	.word	0x40020400

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <HAL_MspInit+0x4c>)
 8000488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800048a:	4a0f      	ldr	r2, [pc, #60]	@ (80004c8 <HAL_MspInit+0x4c>)
 800048c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000490:	6453      	str	r3, [r2, #68]	@ 0x44
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <HAL_MspInit+0x4c>)
 8000494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x4c>)
 80004a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <HAL_MspInit+0x4c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x4c>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ba:	2007      	movs	r0, #7
 80004bc:	f000 f9ba 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40023800 	.word	0x40023800

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000522:	f000 f891 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000554:	f7ff ffea 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	@ (8000590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	@ (800059c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057e:	f000 fb2b 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000582:	f7ff fe29 	bl	80001d8 <main>
  bx  lr    
 8000586:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000594:	08000c50 	.word	0x08000c50
  ldr r2, =_sbss
 8000598:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800059c:	2000002c 	.word	0x2000002c

080005a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <HAL_Init+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <HAL_Init+0x40>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b4:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <HAL_Init+0x40>)
 80005ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <HAL_Init+0x40>)
 80005c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f931 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f808 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff ff50 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023c00 	.word	0x40023c00

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x54>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_InitTick+0x58>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f93b 	bl	8000882 <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e00e      	b.n	8000634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d80a      	bhi.n	8000632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f000 f911 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_InitTick+0x5c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e000      	b.n	8000634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x20>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_IncTick+0x24>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a04      	ldr	r2, [pc, #16]	@ (800066c <HAL_IncTick+0x24>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008
 800066c:	20000028 	.word	0x20000028

08000670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <HAL_GetTick+0x14>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028

08000688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000690:	f7ff ffee 	bl	8000670 <HAL_GetTick>
 8000694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a0:	d005      	beq.n	80006ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <HAL_Delay+0x44>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4413      	add	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ae:	bf00      	nop
 80006b0:	f7ff ffde 	bl	8000670 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f7      	bhi.n	80006b0 <HAL_Delay+0x28>
  {
  }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008

080006d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000702:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	60d3      	str	r3, [r2, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <__NVIC_GetPriorityGrouping+0x18>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	f003 0307 	and.w	r3, r3, #7
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	@ (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	@ (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	@ 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	@ 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff8e 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff47 	bl	80006d0 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff5c 	bl	8000718 <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff8e 	bl	8000788 <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5d 	bl	8000734 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffb0 	bl	80007f0 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e159      	b.n	8000b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b8:	2201      	movs	r2, #1
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	f040 8148 	bne.w	8000b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d005      	beq.n	80008ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b03      	cmp	r3, #3
 800095a:	d017      	beq.n	800098c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b02      	cmp	r3, #2
 8000996:	d123      	bne.n	80009e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	08da      	lsrs	r2, r3, #3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3208      	adds	r2, #8
 80009a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	220f      	movs	r2, #15
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	69b9      	ldr	r1, [r7, #24]
 80009dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0203 	and.w	r2, r3, #3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 80a2 	beq.w	8000b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b57      	ldr	r3, [pc, #348]	@ (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a56      	ldr	r2, [pc, #344]	@ (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b54      	ldr	r3, [pc, #336]	@ (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a3e:	4a52      	ldr	r2, [pc, #328]	@ (8000b88 <HAL_GPIO_Init+0x2ec>)
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a49      	ldr	r2, [pc, #292]	@ (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x202>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a48      	ldr	r2, [pc, #288]	@ (8000b90 <HAL_GPIO_Init+0x2f4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1fe>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a47      	ldr	r2, [pc, #284]	@ (8000b94 <HAL_GPIO_Init+0x2f8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1fa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a46      	ldr	r2, [pc, #280]	@ (8000b98 <HAL_GPIO_Init+0x2fc>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1f6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a45      	ldr	r2, [pc, #276]	@ (8000b9c <HAL_GPIO_Init+0x300>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1f2>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e008      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a8e:	2307      	movs	r3, #7
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e004      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a96:	2302      	movs	r3, #2
 8000a98:	e002      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	f002 0203 	and.w	r2, r2, #3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4093      	lsls	r3, r2
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab0:	4935      	ldr	r1, [pc, #212]	@ (8000b88 <HAL_GPIO_Init+0x2ec>)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b36:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	f67f aea2 	bls.w	80008b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3724      	adds	r7, #36	@ 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40013800 	.word	0x40013800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40013c00 	.word	0x40013c00

08000ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb4:	787b      	ldrb	r3, [r7, #1]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc0:	e003      	b.n	8000bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	041a      	lsls	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	619a      	str	r2, [r3, #24]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4d0d      	ldr	r5, [pc, #52]	@ (8000c10 <__libc_init_array+0x38>)
 8000bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8000c14 <__libc_init_array+0x3c>)
 8000bde:	1b64      	subs	r4, r4, r5
 8000be0:	10a4      	asrs	r4, r4, #2
 8000be2:	2600      	movs	r6, #0
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	4d0b      	ldr	r5, [pc, #44]	@ (8000c18 <__libc_init_array+0x40>)
 8000bea:	4c0c      	ldr	r4, [pc, #48]	@ (8000c1c <__libc_init_array+0x44>)
 8000bec:	f000 f818 	bl	8000c20 <_init>
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	10a4      	asrs	r4, r4, #2
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	42a6      	cmp	r6, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c00:	4798      	blx	r3
 8000c02:	3601      	adds	r6, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0a:	4798      	blx	r3
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08000c48 	.word	0x08000c48
 8000c14:	08000c48 	.word	0x08000c48
 8000c18:	08000c48 	.word	0x08000c48
 8000c1c:	08000c4c 	.word	0x08000c4c

08000c20 <_init>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr

08000c2c <_fini>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr
