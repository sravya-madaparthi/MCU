
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000540  08000540  00001540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800054c  0800054c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800054c  0800054c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800054c  0800054c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800054c  0800054c  0000154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000554  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000558  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000558  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001324  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000567  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  000038c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000162  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f65  00000000  00000000  00003c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002281  00000000  00000000  00017b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a88  00000000  00000000  00019e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a888  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000614  00000000  00000000  0009a8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0009aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000528 	.word	0x08000528

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000528 	.word	0x08000528

080001d8 <main>:
void LCD_string(char str[]);
void LCD_init(void);
void PORTS_init(void);
void LCD_enablePulse(void);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    LCD_init();  // Initialize LCD
 80001dc:	f000 f82e 	bl	800023c <LCD_init>
    while (1) {
        LCD_command(0x01);  // Clear display
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 f891 	bl	8000308 <LCD_command>
        delayMs(2);         // Wait after clear
 80001e6:	2002      	movs	r0, #2
 80001e8:	f000 f8de 	bl	80003a8 <delayMs>
        LCD_string("WELCOME ALL");  // Display string
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <main+0x28>)
 80001ee:	f000 f809 	bl	8000204 <LCD_string>
        delayMs(1000);      // Wait before repeating
 80001f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f6:	f000 f8d7 	bl	80003a8 <delayMs>
        LCD_command(0x01);  // Clear display
 80001fa:	bf00      	nop
 80001fc:	e7f0      	b.n	80001e0 <main+0x8>
 80001fe:	bf00      	nop
 8000200:	08000540 	.word	0x08000540

08000204 <LCD_string>:
    }
}

void LCD_string(char str[]) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    for (int i = 0; str[i] != '\0'; i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e009      	b.n	8000226 <LCD_string+0x22>
        LCD_data(str[i]);
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f898 	bl	8000350 <LCD_data>
    for (int i = 0; str[i] != '\0'; i++) {
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	3301      	adds	r3, #1
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1ef      	bne.n	8000212 <LCD_string+0xe>
    }
}
 8000232:	bf00      	nop
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <LCD_init>:

void LCD_init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    PORTS_init();      // Initialize GPIO ports
 8000240:	f000 f830 	bl	80002a4 <PORTS_init>
    delayMs(50);       // Wait after power on
 8000244:	2032      	movs	r0, #50	@ 0x32
 8000246:	f000 f8af 	bl	80003a8 <delayMs>

    // Initialization sequence
    LCD_command(0x30); delayMs(5);
 800024a:	2030      	movs	r0, #48	@ 0x30
 800024c:	f000 f85c 	bl	8000308 <LCD_command>
 8000250:	2005      	movs	r0, #5
 8000252:	f000 f8a9 	bl	80003a8 <delayMs>
    LCD_command(0x30); delayMs(5);
 8000256:	2030      	movs	r0, #48	@ 0x30
 8000258:	f000 f856 	bl	8000308 <LCD_command>
 800025c:	2005      	movs	r0, #5
 800025e:	f000 f8a3 	bl	80003a8 <delayMs>
    LCD_command(0x30); delayMs(5);
 8000262:	2030      	movs	r0, #48	@ 0x30
 8000264:	f000 f850 	bl	8000308 <LCD_command>
 8000268:	2005      	movs	r0, #5
 800026a:	f000 f89d 	bl	80003a8 <delayMs>

    LCD_command(0x38);  // Function set: 8-bit, 2-line, 5x7 font
 800026e:	2038      	movs	r0, #56	@ 0x38
 8000270:	f000 f84a 	bl	8000308 <LCD_command>
    delayMs(5);
 8000274:	2005      	movs	r0, #5
 8000276:	f000 f897 	bl	80003a8 <delayMs>
    LCD_command(0x06);  // Entry mode: cursor moves right
 800027a:	2006      	movs	r0, #6
 800027c:	f000 f844 	bl	8000308 <LCD_command>
    delayMs(5);
 8000280:	2005      	movs	r0, #5
 8000282:	f000 f891 	bl	80003a8 <delayMs>
    LCD_command(0x01);  // Clear display
 8000286:	2001      	movs	r0, #1
 8000288:	f000 f83e 	bl	8000308 <LCD_command>
    delayMs(2);
 800028c:	2002      	movs	r0, #2
 800028e:	f000 f88b 	bl	80003a8 <delayMs>
    LCD_command(0x0C);  // Display ON, cursor OFF, blink OFF
 8000292:	200c      	movs	r0, #12
 8000294:	f000 f838 	bl	8000308 <LCD_command>
    delayMs(5);
 8000298:	2005      	movs	r0, #5
 800029a:	f000 f885 	bl	80003a8 <delayMs>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <PORTS_init>:

void PORTS_init(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 0x06;         // Enable GPIOB and GPIOC clocks
 80002a8:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <PORTS_init+0x58>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a13      	ldr	r2, [pc, #76]	@ (80002fc <PORTS_init+0x58>)
 80002ae:	f043 0306 	orr.w	r3, r3, #6
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure GPIOB (PB5, PB6, PB7) as output for RS, RW, EN
    GPIOB->MODER &= ~0x0000FC00;  // Clear mode for PB5-PB7
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <PORTS_init+0x5c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <PORTS_init+0x5c>)
 80002ba:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80002be:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 0x00005400;   // Set PB5, PB6, PB7 as output
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <PORTS_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000300 <PORTS_init+0x5c>)
 80002c6:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOB->BSRR = (RW | EN) << 16; // RW=0, EN=0
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <PORTS_init+0x5c>)
 80002ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002d2:	619a      	str	r2, [r3, #24]

    // Configure GPIOC (PC0-PC7) as output for D0-D7
    GPIOC->MODER &= ~0x0000FFFF;  // Clear PC0-PC7 modes
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <PORTS_init+0x60>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <PORTS_init+0x60>)
 80002da:	0c1b      	lsrs	r3, r3, #16
 80002dc:	041b      	lsls	r3, r3, #16
 80002de:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 0x00005555;   // Set PC0-PC7 as output
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <PORTS_init+0x60>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a07      	ldr	r2, [pc, #28]	@ (8000304 <PORTS_init+0x60>)
 80002e6:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80002ea:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400
 8000304:	40020800 	.word	0x40020800

08000308 <LCD_command>:

void LCD_command(unsigned char command) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = (RS | RW) << 16; // RS=0, RW=0 for command
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <LCD_command+0x40>)
 8000314:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000318:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;          // Put command on data bus
 800031a:	4a0c      	ldr	r2, [pc, #48]	@ (800034c <LCD_command+0x44>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	6153      	str	r3, [r2, #20]
    LCD_enablePulse();             // Pulse EN
 8000320:	f000 f832 	bl	8000388 <LCD_enablePulse>

    if (command == 0x01 || command == 0x02)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d002      	beq.n	8000330 <LCD_command+0x28>
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d103      	bne.n	8000338 <LCD_command+0x30>
        delayMs(2);                // Commands requiring longer delay
 8000330:	2002      	movs	r0, #2
 8000332:	f000 f839 	bl	80003a8 <delayMs>
 8000336:	e003      	b.n	8000340 <LCD_command+0x38>
    else
        delayMs(1);                // Short delay for other commands
 8000338:	2001      	movs	r0, #1
 800033a:	f000 f835 	bl	80003a8 <delayMs>
}
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40020400 	.word	0x40020400
 800034c:	40020800 	.word	0x40020800

08000350 <LCD_data>:

void LCD_data(char data) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = RS;             // RS=1 for data
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <LCD_data+0x30>)
 800035c:	2220      	movs	r2, #32
 800035e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = RW << 16;       // RW=0 for write
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <LCD_data+0x30>)
 8000362:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000366:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = data;            // Put data on data bus
 8000368:	4a06      	ldr	r2, [pc, #24]	@ (8000384 <LCD_data+0x34>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	6153      	str	r3, [r2, #20]
    LCD_enablePulse();            // Pulse EN
 800036e:	f000 f80b 	bl	8000388 <LCD_enablePulse>
    delayMs(1);                   // Short delay after data write
 8000372:	2001      	movs	r0, #1
 8000374:	f000 f818 	bl	80003a8 <delayMs>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40020400 	.word	0x40020400
 8000384:	40020800 	.word	0x40020800

08000388 <LCD_enablePulse>:

void LCD_enablePulse(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    GPIOB->BSRR = EN;             // EN=1
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <LCD_enablePulse+0x1c>)
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	619a      	str	r2, [r3, #24]
    delayMs(1);                   // Short delay for latch
 8000392:	2001      	movs	r0, #1
 8000394:	f000 f808 	bl	80003a8 <delayMs>
    GPIOB->BSRR = EN << 16;       // EN=0
 8000398:	4b02      	ldr	r3, [pc, #8]	@ (80003a4 <LCD_enablePulse+0x1c>)
 800039a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800039e:	619a      	str	r2, [r3, #24]
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020400 	.word	0x40020400

080003a8 <delayMs>:

void delayMs(int n) {
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80003b0:	e00d      	b.n	80003ce <delayMs+0x26>
        for (i = 0; i < 3195; i++);  // Approximate 1ms delay
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e002      	b.n	80003be <delayMs+0x16>
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3301      	adds	r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f640 427a 	movw	r2, #3194	@ 0xc7a
 80003c4:	4293      	cmp	r3, r2
 80003c6:	ddf7      	ble.n	80003b8 <delayMs+0x10>
    for (; n > 0; n--)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dcee      	bgt.n	80003b2 <delayMs+0xa>
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <NMI_Handler+0x4>

080003ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	bf00      	nop
 80003f0:	e7fd      	b.n	80003ee <HardFault_Handler+0x4>

080003f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f6:	bf00      	nop
 80003f8:	e7fd      	b.n	80003f6 <MemManage_Handler+0x4>

080003fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fe:	bf00      	nop
 8000400:	e7fd      	b.n	80003fe <BusFault_Handler+0x4>

08000402 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000406:	bf00      	nop
 8000408:	e7fd      	b.n	8000406 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f83e 	bl	80004b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <SystemInit+0x20>)
 8000446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <SystemInit+0x20>)
 800044c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800049c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000468:	f7ff ffea 	bl	8000440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	@ (80004a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	@ (80004a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	@ (80004ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	@ (80004b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000492:	f000 f825 	bl	80004e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000496:	f7ff fe9f 	bl	80001d8 <main>
  bx  lr    
 800049a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a8:	08000554 	.word	0x08000554
  ldr r2, =_sbss
 80004ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b0:	20000024 	.word	0x20000024

080004b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <HAL_IncTick+0x20>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_IncTick+0x24>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <HAL_IncTick+0x24>)
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000020 	.word	0x20000020

080004e0 <__libc_init_array>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000518 <__libc_init_array+0x38>)
 80004e4:	4c0d      	ldr	r4, [pc, #52]	@ (800051c <__libc_init_array+0x3c>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	2600      	movs	r6, #0
 80004ec:	42a6      	cmp	r6, r4
 80004ee:	d109      	bne.n	8000504 <__libc_init_array+0x24>
 80004f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000520 <__libc_init_array+0x40>)
 80004f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000524 <__libc_init_array+0x44>)
 80004f4:	f000 f818 	bl	8000528 <_init>
 80004f8:	1b64      	subs	r4, r4, r5
 80004fa:	10a4      	asrs	r4, r4, #2
 80004fc:	2600      	movs	r6, #0
 80004fe:	42a6      	cmp	r6, r4
 8000500:	d105      	bne.n	800050e <__libc_init_array+0x2e>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	f855 3b04 	ldr.w	r3, [r5], #4
 8000508:	4798      	blx	r3
 800050a:	3601      	adds	r6, #1
 800050c:	e7ee      	b.n	80004ec <__libc_init_array+0xc>
 800050e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000512:	4798      	blx	r3
 8000514:	3601      	adds	r6, #1
 8000516:	e7f2      	b.n	80004fe <__libc_init_array+0x1e>
 8000518:	0800054c 	.word	0x0800054c
 800051c:	0800054c 	.word	0x0800054c
 8000520:	0800054c 	.word	0x0800054c
 8000524:	08000550 	.word	0x08000550

08000528 <_init>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr

08000534 <_fini>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr
