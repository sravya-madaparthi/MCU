
led4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000d70  08000d70  00001d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d88  08000d88  0000200c  2**0
                  CONTENTS
  4 .ARM          00000008  08000d88  08000d88  00001d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d90  08000d90  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d90  08000d90  00001d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d94  08000d94  00001d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000d98  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000da4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000da4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000360b  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cd8  00000000  00000000  00005647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  00006320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b1  00000000  00000000  000066e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ed2  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004421  00000000  00000000  0001b863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088833  00000000  00000000  0001fc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a84b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d5c  00000000  00000000  000a84fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a9258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d58 	.word	0x08000d58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000d58 	.word	0x08000d58

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <main>:
void LCD_Clear(void);
void LCD_Scroll_Text(char *text);

void delay_ms(uint16_t ms);

int main(void) {
 80001e8:	b5b0      	push	{r4, r5, r7, lr}
 80001ea:	b08c      	sub	sp, #48	@ 0x30
 80001ec:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ee:	f000 fa6d 	bl	80006cc <HAL_Init>

    // Enable GPIOA Clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f2:	2300      	movs	r3, #0
 80001f4:	603b      	str	r3, [r7, #0]
 80001f6:	4b19      	ldr	r3, [pc, #100]	@ (800025c <main+0x74>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	4a18      	ldr	r2, [pc, #96]	@ (800025c <main+0x74>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	@ 0x30
 8000202:	4b16      	ldr	r3, [pc, #88]	@ (800025c <main+0x74>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	603b      	str	r3, [r7, #0]
 800020c:	683b      	ldr	r3, [r7, #0]

    // Configure GPIOs for LCD
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	f107 031c 	add.w	r3, r7, #28
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = RS_PIN | E_PIN | D4_PIN | D5_PIN | D6_PIN | D7_PIN;
 800021e:	23f3      	movs	r3, #243	@ 0xf3
 8000220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	2301      	movs	r3, #1
 8000224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000226:	2300      	movs	r3, #0
 8000228:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4619      	mov	r1, r3
 8000230:	480b      	ldr	r0, [pc, #44]	@ (8000260 <main+0x78>)
 8000232:	f000 fbc7 	bl	80009c4 <HAL_GPIO_Init>

    LCD_Init();  // Initialize LCD
 8000236:	f000 f91f 	bl	8000478 <LCD_Init>
    LCD_Clear();
 800023a:	f000 f936 	bl	80004aa <LCD_Clear>

    char message[] = "HELLO, STM32 SCROLLING!";
 800023e:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <main+0x7c>)
 8000240:	1d3c      	adds	r4, r7, #4
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800024c:	e884 0003 	stmia.w	r4, {r0, r1}
    while (1) {
        LCD_Scroll_Text(message);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f948 	bl	80004e8 <LCD_Scroll_Text>
 8000258:	e7fa      	b.n	8000250 <main+0x68>
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	08000d70 	.word	0x08000d70

08000268 <LCD_Command>:
    }
}

// Function to send a command to LCD
void LCD_Command(uint8_t cmd) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_RESET);  // RS = 0 (Command mode)
 8000272:	2200      	movs	r2, #0
 8000274:	2101      	movs	r1, #1
 8000276:	483d      	ldr	r0, [pc, #244]	@ (800036c <LCD_Command+0x104>)
 8000278:	f000 fd28 	bl	8000ccc <HAL_GPIO_WritePin>

    // Send higher nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (cmd >> 4) & 1);
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	091b      	lsrs	r3, r3, #4
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
 8000288:	461a      	mov	r2, r3
 800028a:	2110      	movs	r1, #16
 800028c:	4837      	ldr	r0, [pc, #220]	@ (800036c <LCD_Command+0x104>)
 800028e:	f000 fd1d 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (cmd >> 5) & 1);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	095b      	lsrs	r3, r3, #5
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	2120      	movs	r1, #32
 80002a2:	4832      	ldr	r0, [pc, #200]	@ (800036c <LCD_Command+0x104>)
 80002a4:	f000 fd12 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (cmd >> 6) & 1);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	099b      	lsrs	r3, r3, #6
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	482c      	ldr	r0, [pc, #176]	@ (800036c <LCD_Command+0x104>)
 80002ba:	f000 fd07 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (cmd >> 7) & 1);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	09db      	lsrs	r3, r3, #7
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	461a      	mov	r2, r3
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	4828      	ldr	r0, [pc, #160]	@ (800036c <LCD_Command+0x104>)
 80002ca:	f000 fcff 	bl	8000ccc <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2102      	movs	r1, #2
 80002d2:	4826      	ldr	r0, [pc, #152]	@ (800036c <LCD_Command+0x104>)
 80002d4:	f000 fcfa 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 f955 	bl	8000588 <delay_ms>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2102      	movs	r1, #2
 80002e2:	4822      	ldr	r0, [pc, #136]	@ (800036c <LCD_Command+0x104>)
 80002e4:	f000 fcf2 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 f94d 	bl	8000588 <delay_ms>

    // Send lower nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (cmd >> 0) & 1);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	2110      	movs	r1, #16
 80002fa:	481c      	ldr	r0, [pc, #112]	@ (800036c <LCD_Command+0x104>)
 80002fc:	f000 fce6 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (cmd >> 1) & 1);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	085b      	lsrs	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	2120      	movs	r1, #32
 8000310:	4816      	ldr	r0, [pc, #88]	@ (800036c <LCD_Command+0x104>)
 8000312:	f000 fcdb 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (cmd >> 2) & 1);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	2140      	movs	r1, #64	@ 0x40
 8000326:	4811      	ldr	r0, [pc, #68]	@ (800036c <LCD_Command+0x104>)
 8000328:	f000 fcd0 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (cmd >> 3) & 1);
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	08db      	lsrs	r3, r3, #3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	2180      	movs	r1, #128	@ 0x80
 800033c:	480b      	ldr	r0, [pc, #44]	@ (800036c <LCD_Command+0x104>)
 800033e:	f000 fcc5 	bl	8000ccc <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2102      	movs	r1, #2
 8000346:	4809      	ldr	r0, [pc, #36]	@ (800036c <LCD_Command+0x104>)
 8000348:	f000 fcc0 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 f91b 	bl	8000588 <delay_ms>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <LCD_Command+0x104>)
 8000358:	f000 fcb8 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f000 f913 	bl	8000588 <delay_ms>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40020000 	.word	0x40020000

08000370 <LCD_Write_Char>:

// Function to write a character
void LCD_Write_Char(char data) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_SET);  // RS = 1 (Data mode)
 800037a:	2201      	movs	r2, #1
 800037c:	2101      	movs	r1, #1
 800037e:	483d      	ldr	r0, [pc, #244]	@ (8000474 <LCD_Write_Char+0x104>)
 8000380:	f000 fca4 	bl	8000ccc <HAL_GPIO_WritePin>

    // Send higher nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (data >> 4) & 1);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	091b      	lsrs	r3, r3, #4
 8000388:	b2db      	uxtb	r3, r3
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	461a      	mov	r2, r3
 8000392:	2110      	movs	r1, #16
 8000394:	4837      	ldr	r0, [pc, #220]	@ (8000474 <LCD_Write_Char+0x104>)
 8000396:	f000 fc99 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (data >> 5) & 1);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	095b      	lsrs	r3, r3, #5
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	2120      	movs	r1, #32
 80003aa:	4832      	ldr	r0, [pc, #200]	@ (8000474 <LCD_Write_Char+0x104>)
 80003ac:	f000 fc8e 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (data >> 6) & 1);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	099b      	lsrs	r3, r3, #6
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	461a      	mov	r2, r3
 80003be:	2140      	movs	r1, #64	@ 0x40
 80003c0:	482c      	ldr	r0, [pc, #176]	@ (8000474 <LCD_Write_Char+0x104>)
 80003c2:	f000 fc83 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (data >> 7) & 1);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	09db      	lsrs	r3, r3, #7
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	2180      	movs	r1, #128	@ 0x80
 80003d0:	4828      	ldr	r0, [pc, #160]	@ (8000474 <LCD_Write_Char+0x104>)
 80003d2:	f000 fc7b 	bl	8000ccc <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2102      	movs	r1, #2
 80003da:	4826      	ldr	r0, [pc, #152]	@ (8000474 <LCD_Write_Char+0x104>)
 80003dc:	f000 fc76 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 f8d1 	bl	8000588 <delay_ms>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2102      	movs	r1, #2
 80003ea:	4822      	ldr	r0, [pc, #136]	@ (8000474 <LCD_Write_Char+0x104>)
 80003ec:	f000 fc6e 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 f8c9 	bl	8000588 <delay_ms>

    // Send lower nibble
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (data >> 0) & 1);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	2110      	movs	r1, #16
 8000402:	481c      	ldr	r0, [pc, #112]	@ (8000474 <LCD_Write_Char+0x104>)
 8000404:	f000 fc62 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (data >> 1) & 1);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	085b      	lsrs	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	2120      	movs	r1, #32
 8000418:	4816      	ldr	r0, [pc, #88]	@ (8000474 <LCD_Write_Char+0x104>)
 800041a:	f000 fc57 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (data >> 2) & 1);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	089b      	lsrs	r3, r3, #2
 8000422:	b2db      	uxtb	r3, r3
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	4811      	ldr	r0, [pc, #68]	@ (8000474 <LCD_Write_Char+0x104>)
 8000430:	f000 fc4c 	bl	8000ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (data >> 3) & 1);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2180      	movs	r1, #128	@ 0x80
 8000444:	480b      	ldr	r0, [pc, #44]	@ (8000474 <LCD_Write_Char+0x104>)
 8000446:	f000 fc41 	bl	8000ccc <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2102      	movs	r1, #2
 800044e:	4809      	ldr	r0, [pc, #36]	@ (8000474 <LCD_Write_Char+0x104>)
 8000450:	f000 fc3c 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 f897 	bl	8000588 <delay_ms>
    HAL_GPIO_WritePin(LCD_PORT, E_PIN, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2102      	movs	r1, #2
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <LCD_Write_Char+0x104>)
 8000460:	f000 fc34 	bl	8000ccc <HAL_GPIO_WritePin>
    delay_ms(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 f88f 	bl	8000588 <delay_ms>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40020000 	.word	0x40020000

08000478 <LCD_Init>:

// Function to initialize LCD
void LCD_Init(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    delay_ms(50);
 800047c:	2032      	movs	r0, #50	@ 0x32
 800047e:	f000 f883 	bl	8000588 <delay_ms>
    LCD_Command(0x02); // 4-bit mode
 8000482:	2002      	movs	r0, #2
 8000484:	f7ff fef0 	bl	8000268 <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x8 font
 8000488:	2028      	movs	r0, #40	@ 0x28
 800048a:	f7ff feed 	bl	8000268 <LCD_Command>
    LCD_Command(0x0C); // Display on, cursor off
 800048e:	200c      	movs	r0, #12
 8000490:	f7ff feea 	bl	8000268 <LCD_Command>
    LCD_Command(0x06); // Entry mode
 8000494:	2006      	movs	r0, #6
 8000496:	f7ff fee7 	bl	8000268 <LCD_Command>
    LCD_Command(0x01); // Clear display
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff fee4 	bl	8000268 <LCD_Command>
    delay_ms(2);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 f871 	bl	8000588 <delay_ms>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}

080004aa <LCD_Clear>:

// Function to clear LCD
void LCD_Clear(void) {
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
    LCD_Command(0x01);
 80004ae:	2001      	movs	r0, #1
 80004b0:	f7ff feda 	bl	8000268 <LCD_Command>
    delay_ms(2);
 80004b4:	2002      	movs	r0, #2
 80004b6:	f000 f867 	bl	8000588 <delay_ms>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}

080004be <LCD_Write_String>:

// Function to print a string
void LCD_Write_String(char *str) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
    while (*str) {
 80004c6:	e006      	b.n	80004d6 <LCD_Write_String+0x18>
        LCD_Write_Char(*str++);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff4d 	bl	8000370 <LCD_Write_Char>
    while (*str) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1f4      	bne.n	80004c8 <LCD_Write_String+0xa>
    }
}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <LCD_Scroll_Text>:

// Function to scroll text
void LCD_Scroll_Text(char *text) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    char buffer[17] = {0};
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	731a      	strb	r2, [r3, #12]
    uint8_t len = strlen(text);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff fe68 	bl	80001d8 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	777b      	strb	r3, [r7, #29]

    for (uint8_t i = 0; i < len + 16; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	77fb      	strb	r3, [r7, #31]
 8000510:	e02f      	b.n	8000572 <LCD_Scroll_Text+0x8a>
        memset(buffer, ' ', 16);
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2210      	movs	r2, #16
 8000518:	2120      	movs	r1, #32
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fbef 	bl	8000cfe <memset>
        for (uint8_t j = 0; j < 16; j++) {
 8000520:	2300      	movs	r3, #0
 8000522:	77bb      	strb	r3, [r7, #30]
 8000524:	e014      	b.n	8000550 <LCD_Scroll_Text+0x68>
            if (i + j < len) buffer[j] = text[i + j];
 8000526:	7ffa      	ldrb	r2, [r7, #31]
 8000528:	7fbb      	ldrb	r3, [r7, #30]
 800052a:	441a      	add	r2, r3
 800052c:	7f7b      	ldrb	r3, [r7, #29]
 800052e:	429a      	cmp	r2, r3
 8000530:	da0b      	bge.n	800054a <LCD_Scroll_Text+0x62>
 8000532:	7ffa      	ldrb	r2, [r7, #31]
 8000534:	7fbb      	ldrb	r3, [r7, #30]
 8000536:	4413      	add	r3, r2
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	441a      	add	r2, r3
 800053e:	7fbb      	ldrb	r3, [r7, #30]
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	3320      	adds	r3, #32
 8000544:	443b      	add	r3, r7
 8000546:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t j = 0; j < 16; j++) {
 800054a:	7fbb      	ldrb	r3, [r7, #30]
 800054c:	3301      	adds	r3, #1
 800054e:	77bb      	strb	r3, [r7, #30]
 8000550:	7fbb      	ldrb	r3, [r7, #30]
 8000552:	2b0f      	cmp	r3, #15
 8000554:	d9e7      	bls.n	8000526 <LCD_Scroll_Text+0x3e>
        }

        LCD_Clear();
 8000556:	f7ff ffa8 	bl	80004aa <LCD_Clear>
        LCD_Write_String(buffer);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffad 	bl	80004be <LCD_Write_String>
        delay_ms(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000568:	f000 f80e 	bl	8000588 <delay_ms>
    for (uint8_t i = 0; i < len + 16; i++) {
 800056c:	7ffb      	ldrb	r3, [r7, #31]
 800056e:	3301      	adds	r3, #1
 8000570:	77fb      	strb	r3, [r7, #31]
 8000572:	7f7b      	ldrb	r3, [r7, #29]
 8000574:	f103 020f 	add.w	r2, r3, #15
 8000578:	7ffb      	ldrb	r3, [r7, #31]
 800057a:	429a      	cmp	r2, r3
 800057c:	dac9      	bge.n	8000512 <LCD_Scroll_Text+0x2a>
    }
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <delay_ms>:

// Function to create delay
void delay_ms(uint16_t ms) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f90b 	bl	80007b0 <HAL_Delay>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_MspInit+0x4c>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005e2:	2007      	movs	r0, #7
 80005e4:	f000 f9ba 	bl	800095c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f891 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800067c:	f7ff ffea 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a6:	f000 fb33 	bl	8000d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006aa:	f7ff fd9d 	bl	80001e8 <main>
  bx  lr    
 80006ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006bc:	08000d98 	.word	0x08000d98
  ldr r2, =_sbss
 80006c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c4:	2000002c 	.word	0x2000002c

080006c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC_IRQHandler>
	...

080006cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <HAL_Init+0x40>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <HAL_Init+0x40>)
 80006d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006dc:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <HAL_Init+0x40>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_Init+0x40>)
 80006e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_Init+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_Init+0x40>)
 80006ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f931 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff ff50 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023c00 	.word	0x40023c00

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f93b 	bl	80009aa <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f911 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	20000028 	.word	0x20000028

08000798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000028 	.word	0x20000028

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff ffee 	bl	8000798 <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffde 	bl	8000798 <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	@ (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	@ (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	@ 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	@ 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff8e 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff47 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff5c 	bl	8000840 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff8e 	bl	80008b0 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5d 	bl	800085c <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb0 	bl	8000918 <SysTick_Config>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	@ 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	e159      	b.n	8000c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009e0:	2201      	movs	r2, #1
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8148 	bne.w	8000c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d005      	beq.n	8000a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d130      	bne.n	8000a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	f003 0201 	and.w	r2, r3, #1
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d017      	beq.n	8000ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d123      	bne.n	8000b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	69b9      	ldr	r1, [r7, #24]
 8000b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0203 	and.w	r2, r3, #3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80a2 	beq.w	8000c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b57      	ldr	r3, [pc, #348]	@ (8000cac <HAL_GPIO_Init+0x2e8>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a56      	ldr	r2, [pc, #344]	@ (8000cac <HAL_GPIO_Init+0x2e8>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b54      	ldr	r3, [pc, #336]	@ (8000cac <HAL_GPIO_Init+0x2e8>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b66:	4a52      	ldr	r2, [pc, #328]	@ (8000cb0 <HAL_GPIO_Init+0x2ec>)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a49      	ldr	r2, [pc, #292]	@ (8000cb4 <HAL_GPIO_Init+0x2f0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d019      	beq.n	8000bc6 <HAL_GPIO_Init+0x202>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a48      	ldr	r2, [pc, #288]	@ (8000cb8 <HAL_GPIO_Init+0x2f4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x1fe>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a47      	ldr	r2, [pc, #284]	@ (8000cbc <HAL_GPIO_Init+0x2f8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x1fa>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <HAL_GPIO_Init+0x2fc>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x1f6>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a45      	ldr	r2, [pc, #276]	@ (8000cc4 <HAL_GPIO_Init+0x300>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x1f2>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e008      	b.n	8000bc8 <HAL_GPIO_Init+0x204>
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x204>
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e004      	b.n	8000bc8 <HAL_GPIO_Init+0x204>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e002      	b.n	8000bc8 <HAL_GPIO_Init+0x204>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <HAL_GPIO_Init+0x204>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	f002 0203 	and.w	r2, r2, #3
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	4093      	lsls	r3, r2
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd8:	4935      	ldr	r1, [pc, #212]	@ (8000cb0 <HAL_GPIO_Init+0x2ec>)
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be6:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c34:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	f67f aea2 	bls.w	80009e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	@ 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40013c00 	.word	0x40013c00

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <memset>:
 8000cfe:	4402      	add	r2, r0
 8000d00:	4603      	mov	r3, r0
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d100      	bne.n	8000d08 <memset+0xa>
 8000d06:	4770      	bx	lr
 8000d08:	f803 1b01 	strb.w	r1, [r3], #1
 8000d0c:	e7f9      	b.n	8000d02 <memset+0x4>
	...

08000d10 <__libc_init_array>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	4d0d      	ldr	r5, [pc, #52]	@ (8000d48 <__libc_init_array+0x38>)
 8000d14:	4c0d      	ldr	r4, [pc, #52]	@ (8000d4c <__libc_init_array+0x3c>)
 8000d16:	1b64      	subs	r4, r4, r5
 8000d18:	10a4      	asrs	r4, r4, #2
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	42a6      	cmp	r6, r4
 8000d1e:	d109      	bne.n	8000d34 <__libc_init_array+0x24>
 8000d20:	4d0b      	ldr	r5, [pc, #44]	@ (8000d50 <__libc_init_array+0x40>)
 8000d22:	4c0c      	ldr	r4, [pc, #48]	@ (8000d54 <__libc_init_array+0x44>)
 8000d24:	f000 f818 	bl	8000d58 <_init>
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	10a4      	asrs	r4, r4, #2
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	42a6      	cmp	r6, r4
 8000d30:	d105      	bne.n	8000d3e <__libc_init_array+0x2e>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d38:	4798      	blx	r3
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7ee      	b.n	8000d1c <__libc_init_array+0xc>
 8000d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d42:	4798      	blx	r3
 8000d44:	3601      	adds	r6, #1
 8000d46:	e7f2      	b.n	8000d2e <__libc_init_array+0x1e>
 8000d48:	08000d90 	.word	0x08000d90
 8000d4c:	08000d90 	.word	0x08000d90
 8000d50:	08000d90 	.word	0x08000d90
 8000d54:	08000d94 	.word	0x08000d94

08000d58 <_init>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr

08000d64 <_fini>:
 8000d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d66:	bf00      	nop
 8000d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	469e      	mov	lr, r3
 8000d6e:	4770      	bx	lr
