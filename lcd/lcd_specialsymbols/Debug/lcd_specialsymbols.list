
lcd_specialsymbols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000d44  08000d44  00001d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d84  08000d84  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d84  08000d84  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d84  08000d84  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d84  08000d84  00001d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d88  08000d88  00001d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000d8c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000d98  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d98  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c0c  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c00  00000000  00000000  00004c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00005848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b3  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141de  00000000  00000000  00005ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041b7  00000000  00000000  0001a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f287  00000000  00000000  0001e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d48  00000000  00000000  0009d524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0009e26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d2c 	.word	0x08000d2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000d2c 	.word	0x08000d2c

080001d8 <main>:
/* Function Prototypes for System and GPIO Initialization */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
    /* Initialize HAL, system clock, and GPIO */
    HAL_Init();
 80001de:	f000 fa67 	bl	80006b0 <HAL_Init>
    SystemClock_Config();
 80001e2:	f000 f86b 	bl	80002bc <SystemClock_Config>
    MX_GPIO_Init();
 80001e6:	f000 f871 	bl	80002cc <MX_GPIO_Init>

    /* Initialize and clear the LCD */
    LCD_Init();
 80001ea:	f000 f89d 	bl	8000328 <LCD_Init>
    LCD_Clear();
 80001ee:	f000 f8cb 	bl	8000388 <LCD_Clear>
    /* Define custom characters (5x8 dot matrix):
       Only the lower 5 bits of each byte are used to form the pattern.
    */

    // Custom character for alpha (α)
    uint8_t customAlpha[8] = {
 80001f2:	4a2a      	ldr	r2, [pc, #168]	@ (800029c <main+0xc4>)
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001fc:	e883 0003 	stmia.w	r3, {r0, r1}
        0x00,  // 00000
        0x00   // 00000
    };

    // Custom character for beta (β)
    uint8_t customBeta[8] = {
 8000200:	4a27      	ldr	r2, [pc, #156]	@ (80002a0 <main+0xc8>)
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800020a:	e883 0003 	stmia.w	r3, {r0, r1}
        0x0E,  // 01110
        0x00   // 00000
    };

    // Custom character for pi (π)
    uint8_t customPi[8] = {
 800020e:	4a25      	ldr	r2, [pc, #148]	@ (80002a4 <main+0xcc>)
 8000210:	f107 0308 	add.w	r3, r7, #8
 8000214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000218:	e883 0003 	stmia.w	r3, {r0, r1}
        0x04,  // 00100
        0x00   // 00000
    };

    // Custom character for ohm (Ω)
    uint8_t customOhm[8] = {
 800021c:	4a22      	ldr	r2, [pc, #136]	@ (80002a8 <main+0xd0>)
 800021e:	463b      	mov	r3, r7
 8000220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000224:	e883 0003 	stmia.w	r3, {r0, r1}
        0x0E,  // 01110
        0x00   // 00000
    };

    /* Load custom characters into CGRAM at locations 0, 1, 2, and 3 */
    LCD_CreateCustomChar(0, customAlpha);
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	4619      	mov	r1, r3
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f4 	bl	800041c <LCD_CreateCustomChar>
    LCD_CreateCustomChar(1, customBeta);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	2001      	movs	r0, #1
 800023c:	f000 f8ee 	bl	800041c <LCD_CreateCustomChar>
    LCD_CreateCustomChar(2, customPi);
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	4619      	mov	r1, r3
 8000246:	2002      	movs	r0, #2
 8000248:	f000 f8e8 	bl	800041c <LCD_CreateCustomChar>
    LCD_CreateCustomChar(3, customOhm);
 800024c:	463b      	mov	r3, r7
 800024e:	4619      	mov	r1, r3
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f8e3 	bl	800041c <LCD_CreateCustomChar>

    /* Display the custom characters along with labels on the LCD */
    LCD_SetCursor(0, 0);
 8000256:	2100      	movs	r1, #0
 8000258:	2000      	movs	r0, #0
 800025a:	f000 f89f 	bl	800039c <LCD_SetCursor>
    LCD_WriteString("Alpha: ");
 800025e:	4813      	ldr	r0, [pc, #76]	@ (80002ac <main+0xd4>)
 8000260:	f000 f8c7 	bl	80003f2 <LCD_WriteString>
    LCD_WriteChar(0);  // Displays custom alpha (α)
 8000264:	2000      	movs	r0, #0
 8000266:	f000 f8b7 	bl	80003d8 <LCD_WriteChar>
    LCD_WriteString(" Beta: ");
 800026a:	4811      	ldr	r0, [pc, #68]	@ (80002b0 <main+0xd8>)
 800026c:	f000 f8c1 	bl	80003f2 <LCD_WriteString>
    LCD_WriteChar(1);  // Displays custom beta (β)
 8000270:	2001      	movs	r0, #1
 8000272:	f000 f8b1 	bl	80003d8 <LCD_WriteChar>

    LCD_SetCursor(1, 0);
 8000276:	2100      	movs	r1, #0
 8000278:	2001      	movs	r0, #1
 800027a:	f000 f88f 	bl	800039c <LCD_SetCursor>
    LCD_WriteString("Pi: ");
 800027e:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <main+0xdc>)
 8000280:	f000 f8b7 	bl	80003f2 <LCD_WriteString>
    LCD_WriteChar(2);  // Displays custom pi (π)
 8000284:	2002      	movs	r0, #2
 8000286:	f000 f8a7 	bl	80003d8 <LCD_WriteChar>
    LCD_WriteString(" Ohm: ");
 800028a:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <main+0xe0>)
 800028c:	f000 f8b1 	bl	80003f2 <LCD_WriteString>
    LCD_WriteChar(3);  // Displays custom ohm (Ω)
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f8a1 	bl	80003d8 <LCD_WriteChar>

    while (1)
 8000296:	bf00      	nop
 8000298:	e7fd      	b.n	8000296 <main+0xbe>
 800029a:	bf00      	nop
 800029c:	08000d64 	.word	0x08000d64
 80002a0:	08000d6c 	.word	0x08000d6c
 80002a4:	08000d74 	.word	0x08000d74
 80002a8:	08000d7c 	.word	0x08000d7c
 80002ac:	08000d44 	.word	0x08000d44
 80002b0:	08000d4c 	.word	0x08000d4c
 80002b4:	08000d54 	.word	0x08000d54
 80002b8:	08000d5c 	.word	0x08000d5c

080002bc <SystemClock_Config>:
    }
}

/* System Clock Configuration (customize as needed) */
void SystemClock_Config(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    // This is a stub. In practice, configure your clocks using STM32CubeMX or manually.
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <MX_GPIO_Init>:

/* Initialize GPIOB pins for LCD control and data */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]

    /* Enable clock for GPIOB */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	2300      	movs	r3, #0
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <MX_GPIO_Init+0x54>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <MX_GPIO_Init+0x54>)
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <MX_GPIO_Init+0x54>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

    /* Configure PB0-PB5 as outputs */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 80002fc:	233f      	movs	r3, #63	@ 0x3f
 80002fe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4619      	mov	r1, r3
 8000310:	4804      	ldr	r0, [pc, #16]	@ (8000324 <MX_GPIO_Init+0x58>)
 8000312:	f000 fb49 	bl	80009a8 <HAL_GPIO_Init>
}
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020400 	.word	0x40020400

08000328 <LCD_Init>:

/* LCD Initialization: sets 4-bit mode and basic display settings */
void LCD_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    HAL_Delay(40);  // Wait for LCD power-up
 800032c:	2028      	movs	r0, #40	@ 0x28
 800032e:	f000 fa31 	bl	8000794 <HAL_Delay>

    /* Initialization sequence for many HD44780 LCDs */
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2101      	movs	r1, #1
 8000336:	4813      	ldr	r0, [pc, #76]	@ (8000384 <LCD_Init+0x5c>)
 8000338:	f000 fcba 	bl	8000cb0 <HAL_GPIO_WritePin>
    LCD_SendNibble(0x30);  // Function set (8-bit mode command, sent as upper nibble)
 800033c:	2030      	movs	r0, #48	@ 0x30
 800033e:	f000 f8d7 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(5);
 8000342:	2005      	movs	r0, #5
 8000344:	f000 fa26 	bl	8000794 <HAL_Delay>
    LCD_SendNibble(0x30);
 8000348:	2030      	movs	r0, #48	@ 0x30
 800034a:	f000 f8d1 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(5);
 800034e:	2005      	movs	r0, #5
 8000350:	f000 fa20 	bl	8000794 <HAL_Delay>
    LCD_SendNibble(0x30);
 8000354:	2030      	movs	r0, #48	@ 0x30
 8000356:	f000 f8cb 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fa1a 	bl	8000794 <HAL_Delay>
    LCD_SendNibble(0x20);  // Set to 4-bit mode
 8000360:	2020      	movs	r0, #32
 8000362:	f000 f8c5 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fa14 	bl	8000794 <HAL_Delay>

    LCD_SendCommand(0x28);  // Function set: 4-bit, 2-line, 5x8 font
 800036c:	2028      	movs	r0, #40	@ 0x28
 800036e:	f000 f87f 	bl	8000470 <LCD_SendCommand>
    LCD_SendCommand(0x0C);  // Display on, cursor off, blink off
 8000372:	200c      	movs	r0, #12
 8000374:	f000 f87c 	bl	8000470 <LCD_SendCommand>
    LCD_SendCommand(0x06);  // Entry mode: auto-increment cursor
 8000378:	2006      	movs	r0, #6
 800037a:	f000 f879 	bl	8000470 <LCD_SendCommand>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020400 	.word	0x40020400

08000388 <LCD_Clear>:

/* Clear LCD display */
void LCD_Clear(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);  // Clear display command
 800038c:	2001      	movs	r0, #1
 800038e:	f000 f86f 	bl	8000470 <LCD_SendCommand>
    HAL_Delay(2);
 8000392:	2002      	movs	r0, #2
 8000394:	f000 f9fe 	bl	8000794 <HAL_Delay>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <LCD_SetCursor>:

/* Set the cursor position (row: 0 or 1, col: 0 to 15) */
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <LCD_SetCursor+0x1a>
 80003b2:	2300      	movs	r3, #0
 80003b4:	e000      	b.n	80003b8 <LCD_SetCursor+0x1c>
 80003b6:	2340      	movs	r3, #64	@ 0x40
 80003b8:	73fb      	strb	r3, [r7, #15]
    address += col;
 80003ba:	7bfa      	ldrb	r2, [r7, #15]
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	4413      	add	r3, r2
 80003c0:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | address);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f850 	bl	8000470 <LCD_SendCommand>
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <LCD_WriteChar>:

/* Write a single character to the LCD */
void LCD_WriteChar(char ch)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    LCD_SendData((uint8_t)ch);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f863 	bl	80004b0 <LCD_SendData>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <LCD_WriteString>:

/* Write a null-terminated string to the LCD */
void LCD_WriteString(char *str)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b082      	sub	sp, #8
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
    while (*str)
 80003fa:	e006      	b.n	800040a <LCD_WriteString+0x18>
    {
        LCD_WriteChar(*str++);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	607a      	str	r2, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ffe7 	bl	80003d8 <LCD_WriteChar>
    while (*str)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f4      	bne.n	80003fc <LCD_WriteString+0xa>
    }
}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <LCD_CreateCustomChar>:

/* Create a custom character in CGRAM at a specified location (0-7) */
void LCD_CreateCustomChar(uint8_t location, uint8_t charmap[])
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
    location &= 0x07;  // Only 8 locations available (0 to 7)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	71fb      	strb	r3, [r7, #7]
    LCD_SendCommand(0x40 | (location << 3));  // Set CGRAM address for custom character
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	b25b      	sxtb	r3, r3
 8000436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800043a:	b25b      	sxtb	r3, r3
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f816 	bl	8000470 <LCD_SendCommand>
    for (int i = 0; i < 8; i++)
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	e009      	b.n	800045e <LCD_CreateCustomChar+0x42>
    {
        LCD_SendData(charmap[i]);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	683a      	ldr	r2, [r7, #0]
 800044e:	4413      	add	r3, r2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f82c 	bl	80004b0 <LCD_SendData>
    for (int i = 0; i < 8; i++)
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3301      	adds	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2b07      	cmp	r3, #7
 8000462:	ddf2      	ble.n	800044a <LCD_CreateCustomChar+0x2e>
    }
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <LCD_SendCommand>:

/* Send a command byte to the LCD */
void LCD_SendCommand(uint8_t cmd)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_RESET);  // RS = 0 for command
 800047a:	2200      	movs	r2, #0
 800047c:	2101      	movs	r1, #1
 800047e:	480b      	ldr	r0, [pc, #44]	@ (80004ac <LCD_SendCommand+0x3c>)
 8000480:	f000 fc16 	bl	8000cb0 <HAL_GPIO_WritePin>
    LCD_SendNibble(cmd & 0xF0);        // Send upper nibble
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	f023 030f 	bic.w	r3, r3, #15
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f82f 	bl	80004f0 <LCD_SendNibble>
    LCD_SendNibble((cmd << 4) & 0xF0); // Send lower nibble
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	011b      	lsls	r3, r3, #4
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f829 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(2);
 800049e:	2002      	movs	r0, #2
 80004a0:	f000 f978 	bl	8000794 <HAL_Delay>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40020400 	.word	0x40020400

080004b0 <LCD_SendData>:

/* Send a data byte (character) to the LCD */
void LCD_SendData(uint8_t data)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_SET);  // RS = 1 for data
 80004ba:	2201      	movs	r2, #1
 80004bc:	2101      	movs	r1, #1
 80004be:	480b      	ldr	r0, [pc, #44]	@ (80004ec <LCD_SendData+0x3c>)
 80004c0:	f000 fbf6 	bl	8000cb0 <HAL_GPIO_WritePin>
    LCD_SendNibble(data & 0xF0);         // Send upper nibble
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	f023 030f 	bic.w	r3, r3, #15
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f80f 	bl	80004f0 <LCD_SendNibble>
    LCD_SendNibble((data << 4) & 0xF0);  // Send lower nibble
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f809 	bl	80004f0 <LCD_SendNibble>
    HAL_Delay(2);
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 f958 	bl	8000794 <HAL_Delay>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40020400 	.word	0x40020400

080004f0 <LCD_SendNibble>:

/* Send a 4-bit nibble to the LCD data lines (D4-D7 on PB2-PB5)
   The nibble should be in the upper four bits of the input.
*/
static void LCD_SendNibble(uint8_t nibble)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
    /* Clear PB2-PB5 */
    HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4_Pin, (nibble & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	111b      	asrs	r3, r3, #4
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2104      	movs	r1, #4
 800050a:	4813      	ldr	r0, [pc, #76]	@ (8000558 <LCD_SendNibble+0x68>)
 800050c:	f000 fbd0 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5_Pin, (nibble & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	115b      	asrs	r3, r3, #5
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	2108      	movs	r1, #8
 8000520:	480d      	ldr	r0, [pc, #52]	@ (8000558 <LCD_SendNibble+0x68>)
 8000522:	f000 fbc5 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6_Pin, (nibble & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	119b      	asrs	r3, r3, #6
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	2110      	movs	r1, #16
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <LCD_SendNibble+0x68>)
 8000538:	f000 fbba 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7_Pin, (nibble & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	09db      	lsrs	r3, r3, #7
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	2120      	movs	r1, #32
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <LCD_SendNibble+0x68>)
 8000548:	f000 fbb2 	bl	8000cb0 <HAL_GPIO_WritePin>
    LCD_ToggleEnable();
 800054c:	f000 f806 	bl	800055c <LCD_ToggleEnable>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020400 	.word	0x40020400

0800055c <LCD_ToggleEnable>:

/* Pulse the Enable pin to latch the data into the LCD */
static void LCD_ToggleEnable(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2102      	movs	r1, #2
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <LCD_ToggleEnable+0x28>)
 8000566:	f000 fba3 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f000 f912 	bl	8000794 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <LCD_ToggleEnable+0x28>)
 8000576:	f000 fb9b 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f000 f90a 	bl	8000794 <HAL_Delay>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40020400 	.word	0x40020400

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <HAL_MspInit+0x4c>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <HAL_MspInit+0x4c>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <HAL_MspInit+0x4c>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_MspInit+0x4c>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_MspInit+0x4c>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_MspInit+0x4c>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005c6:	2007      	movs	r0, #7
 80005c8:	f000 f9ba 	bl	8000940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <NMI_Handler+0x4>

080005e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f891 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <SystemInit+0x20>)
 800063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000642:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <SystemInit+0x20>)
 8000644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000660:	f7ff ffea 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f000 fb2b 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068e:	f7ff fda3 	bl	80001d8 <main>
  bx  lr    
 8000692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	08000d8c 	.word	0x08000d8c
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	2000002c 	.word	0x2000002c

080006ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <HAL_Init+0x40>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <HAL_Init+0x40>)
 80006ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <HAL_Init+0x40>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <HAL_Init+0x40>)
 80006c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <HAL_Init+0x40>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <HAL_Init+0x40>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f931 	bl	8000940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff ff50 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023c00 	.word	0x40023c00

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f93b 	bl	800098e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f911 	bl	8000956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_IncTick+0x20>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_IncTick+0x24>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <HAL_IncTick+0x24>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	20000028 	.word	0x20000028

0800077c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <HAL_GetTick+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028

08000794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff ffee 	bl	800077c <HAL_GetTick>
 80007a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d005      	beq.n	80007ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_Delay+0x44>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ba:	bf00      	nop
 80007bc:	f7ff ffde 	bl	800077c <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f7      	bhi.n	80007bc <HAL_Delay+0x28>
  {
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	@ (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	@ 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800090c:	d301      	bcc.n	8000912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090e:	2301      	movs	r3, #1
 8000910:	e00f      	b.n	8000932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <SysTick_Config+0x40>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f7ff ff8e 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <SysTick_Config+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SysTick_Config+0x40>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff47 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000968:	f7ff ff5c 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800096c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff ff8e 	bl	8000894 <NVIC_EncodePriority>
 8000978:	4602      	mov	r2, r0
 800097a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff5d 	bl	8000840 <__NVIC_SetPriority>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffb0 	bl	80008fc <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	@ 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e159      	b.n	8000c78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009c4:	2201      	movs	r2, #1
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	429a      	cmp	r2, r3
 80009de:	f040 8148 	bne.w	8000c72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d005      	beq.n	80009fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d130      	bne.n	8000a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a30:	2201      	movs	r2, #1
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	f003 0201 	and.w	r2, r3, #1
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d017      	beq.n	8000a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d123      	bne.n	8000aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	691a      	ldr	r2, [r3, #16]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	69b9      	ldr	r1, [r7, #24]
 8000ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4013      	ands	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0203 	and.w	r2, r3, #3
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 80a2 	beq.w	8000c72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b57      	ldr	r3, [pc, #348]	@ (8000c90 <HAL_GPIO_Init+0x2e8>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a56      	ldr	r2, [pc, #344]	@ (8000c90 <HAL_GPIO_Init+0x2e8>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b54      	ldr	r3, [pc, #336]	@ (8000c90 <HAL_GPIO_Init+0x2e8>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b4a:	4a52      	ldr	r2, [pc, #328]	@ (8000c94 <HAL_GPIO_Init+0x2ec>)
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3302      	adds	r3, #2
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a49      	ldr	r2, [pc, #292]	@ (8000c98 <HAL_GPIO_Init+0x2f0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d019      	beq.n	8000baa <HAL_GPIO_Init+0x202>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a48      	ldr	r2, [pc, #288]	@ (8000c9c <HAL_GPIO_Init+0x2f4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0x1fe>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a47      	ldr	r2, [pc, #284]	@ (8000ca0 <HAL_GPIO_Init+0x2f8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d00d      	beq.n	8000ba2 <HAL_GPIO_Init+0x1fa>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a46      	ldr	r2, [pc, #280]	@ (8000ca4 <HAL_GPIO_Init+0x2fc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d007      	beq.n	8000b9e <HAL_GPIO_Init+0x1f6>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a45      	ldr	r2, [pc, #276]	@ (8000ca8 <HAL_GPIO_Init+0x300>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_GPIO_Init+0x1f2>
 8000b96:	2304      	movs	r3, #4
 8000b98:	e008      	b.n	8000bac <HAL_GPIO_Init+0x204>
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x204>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x204>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x204>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x204>
 8000baa:	2300      	movs	r3, #0
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bbc:	4935      	ldr	r1, [pc, #212]	@ (8000c94 <HAL_GPIO_Init+0x2ec>)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bee:	4a2f      	ldr	r2, [pc, #188]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c18:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c42:	4a1a      	ldr	r2, [pc, #104]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	f67f aea2 	bls.w	80009c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40013c00 	.word	0x40013c00

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ccc:	e003      	b.n	8000cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	041a      	lsls	r2, r3, #16
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	619a      	str	r2, [r3, #24]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8000d1c <__libc_init_array+0x38>)
 8000ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8000d20 <__libc_init_array+0x3c>)
 8000cea:	1b64      	subs	r4, r4, r5
 8000cec:	10a4      	asrs	r4, r4, #2
 8000cee:	2600      	movs	r6, #0
 8000cf0:	42a6      	cmp	r6, r4
 8000cf2:	d109      	bne.n	8000d08 <__libc_init_array+0x24>
 8000cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8000d24 <__libc_init_array+0x40>)
 8000cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8000d28 <__libc_init_array+0x44>)
 8000cf8:	f000 f818 	bl	8000d2c <_init>
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	10a4      	asrs	r4, r4, #2
 8000d00:	2600      	movs	r6, #0
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d105      	bne.n	8000d12 <__libc_init_array+0x2e>
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0c:	4798      	blx	r3
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7ee      	b.n	8000cf0 <__libc_init_array+0xc>
 8000d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d16:	4798      	blx	r3
 8000d18:	3601      	adds	r6, #1
 8000d1a:	e7f2      	b.n	8000d02 <__libc_init_array+0x1e>
 8000d1c:	08000d84 	.word	0x08000d84
 8000d20:	08000d84 	.word	0x08000d84
 8000d24:	08000d84 	.word	0x08000d84
 8000d28:	08000d88 	.word	0x08000d88

08000d2c <_init>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	bf00      	nop
 8000d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d32:	bc08      	pop	{r3}
 8000d34:	469e      	mov	lr, r3
 8000d36:	4770      	bx	lr

08000d38 <_fini>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr
