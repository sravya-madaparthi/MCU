
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800173c  0800173c  0000273c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001754  08001754  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001754  08001754  00002754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800175c  0800175c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800175c  0800175c  0000275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001760  08001760  00002760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001764  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001770  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001770  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c0a  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c6  00000000  00000000  00009c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  0000af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ab  00000000  00000000  0000b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001514a  00000000  00000000  0000b9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000797f  00000000  00000000  00020b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f20  00000000  00000000  000284a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad3c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017fc  00000000  00000000  000ad408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000aec04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001724 	.word	0x08001724

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001724 	.word	0x08001724

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* Initialize the HAL Library */
  HAL_Init();
 80004de:	f000 f95f 	bl	80007a0 <HAL_Init>
  /* Configure the system clock */
  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 80004e2:	f000 f81d 	bl	8000520 <MX_USART2_UART_Init>

  // Start non-blocking UART reception
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 80004e6:	220a      	movs	r2, #10
 80004e8:	490a      	ldr	r1, [pc, #40]	@ (8000514 <main+0x3c>)
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <main+0x40>)
 80004ec:	f000 fd67 	bl	8000fbe <HAL_UART_Receive_IT>

  while (1)
  {
    char *msg = "Hello, UART\r\n";
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <main+0x44>)
 80004f2:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff fe6f 	bl	80001d8 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2364      	movs	r3, #100	@ 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4805      	ldr	r0, [pc, #20]	@ (8000518 <main+0x40>)
 8000504:	f000 fcd0 	bl	8000ea8 <HAL_UART_Transmit>
    HAL_Delay(500); // Short delay to observe output frequency
 8000508:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800050c:	f000 f9ba 	bl	8000884 <HAL_Delay>
  {
 8000510:	bf00      	nop
 8000512:	e7ed      	b.n	80004f0 <main+0x18>
 8000514:	20000070 	.word	0x20000070
 8000518:	20000028 	.word	0x20000028
 800051c:	0800173c 	.word	0x0800173c

08000520 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <MX_USART2_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800052c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000558:	f000 fc56 	bl	8000e08 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000562:	f000 f807 	bl	8000574 <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028
 8000570:	40004400 	.word	0x40004400

08000574 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  __disable_irq();
  while (1) {}
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <HAL_MspInit+0x4c>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <HAL_MspInit+0x4c>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000594:	6453      	str	r3, [r2, #68]	@ 0x44
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <HAL_MspInit+0x4c>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <HAL_MspInit+0x4c>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	4a08      	ldr	r2, [pc, #32]	@ (80005cc <HAL_MspInit+0x4c>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <HAL_MspInit+0x4c>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005be:	2007      	movs	r0, #7
 80005c0:	f000 fa36 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a32      	ldr	r2, [pc, #200]	@ (80006b8 <HAL_UART_MspInit+0xe8>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d12d      	bne.n	800064e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <HAL_UART_MspInit+0xec>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fa:	4a30      	ldr	r2, [pc, #192]	@ (80006bc <HAL_UART_MspInit+0xec>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6453      	str	r3, [r2, #68]	@ 0x44
 8000602:	4b2e      	ldr	r3, [pc, #184]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a29      	ldr	r2, [pc, #164]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800062a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800062e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800063c:	2307      	movs	r3, #7
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	481e      	ldr	r0, [pc, #120]	@ (80006c0 <HAL_UART_MspInit+0xf0>)
 8000648:	f000 fa26 	bl	8000a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064c:	e030      	b.n	80006b0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <HAL_UART_MspInit+0xf4>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d12b      	bne.n	80006b0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_UART_MspInit+0xec>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_UART_MspInit+0xec>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <HAL_UART_MspInit+0xec>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <HAL_UART_MspInit+0xec>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <HAL_UART_MspInit+0xec>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000690:	230c      	movs	r3, #12
 8000692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a0:	2307      	movs	r3, #7
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <HAL_UART_MspInit+0xf0>)
 80006ac:	f000 f9f4 	bl	8000a98 <HAL_GPIO_Init>
}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	@ 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40011000 	.word	0x40011000
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40004400 	.word	0x40004400

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <NMI_Handler+0x4>

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <UsageFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f000 f891 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000750:	f7ff ffea 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	@ (8000798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f000 ffaf 	bl	80016dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077e:	f7ff feab 	bl	80004d8 <main>
  bx  lr    
 8000782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000790:	08001764 	.word	0x08001764
  ldr r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000798:	20000080 	.word	0x20000080

0800079c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <HAL_Init+0x40>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_Init+0x40>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_Init+0x40>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f931 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f808 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff fed4 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x54>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_InitTick+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f93b 	bl	8000a7e <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f911 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <HAL_InitTick+0x5c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	20000004 	.word	0x20000004

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008
 8000868:	2000007c 	.word	0x2000007c

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000007c 	.word	0x2000007c

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff ffee 	bl	800086c <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_Delay+0x44>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffde 	bl	800086c <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	@ (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	@ 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff5c 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffb0 	bl	80009ec <SysTick_Config>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e159      	b.n	8000d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8148 	bne.w	8000d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d130      	bne.n	8000b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	091b      	lsrs	r3, r3, #4
 8000b36:	f003 0201 	and.w	r2, r3, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d017      	beq.n	8000b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d123      	bne.n	8000bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	69b9      	ldr	r1, [r7, #24]
 8000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0203 	and.w	r2, r3, #3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a2 	beq.w	8000d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b57      	ldr	r3, [pc, #348]	@ (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a56      	ldr	r2, [pc, #344]	@ (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b54      	ldr	r3, [pc, #336]	@ (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3a:	4a52      	ldr	r2, [pc, #328]	@ (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a49      	ldr	r2, [pc, #292]	@ (8000d88 <HAL_GPIO_Init+0x2f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d019      	beq.n	8000c9a <HAL_GPIO_Init+0x202>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a48      	ldr	r2, [pc, #288]	@ (8000d8c <HAL_GPIO_Init+0x2f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1fe>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a47      	ldr	r2, [pc, #284]	@ (8000d90 <HAL_GPIO_Init+0x2f8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1fa>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a46      	ldr	r2, [pc, #280]	@ (8000d94 <HAL_GPIO_Init+0x2fc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1f6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a45      	ldr	r2, [pc, #276]	@ (8000d98 <HAL_GPIO_Init+0x300>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1f2>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	f002 0203 	and.w	r2, r2, #3
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	@ (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cba:	4b38      	ldr	r3, [pc, #224]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cde:	4a2f      	ldr	r2, [pc, #188]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d08:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d32:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <HAL_GPIO_Init+0x304>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	f67f aea2 	bls.w	8000ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	@ 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dbc:	f7ff fff0 	bl	8000da0 <HAL_RCC_GetHCLKFreq>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	0a9b      	lsrs	r3, r3, #10
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	4903      	ldr	r1, [pc, #12]	@ (8000ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dce:	5ccb      	ldrb	r3, [r1, r3]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	0800174c 	.word	0x0800174c

08000de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000de4:	f7ff ffdc 	bl	8000da0 <HAL_RCC_GetHCLKFreq>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	0b5b      	lsrs	r3, r3, #13
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	4903      	ldr	r1, [pc, #12]	@ (8000e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000df6:	5ccb      	ldrb	r3, [r1, r3]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	0800174c 	.word	0x0800174c

08000e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e042      	b.n	8000ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fbce 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	@ 0x24
 8000e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f9d1 	bl	80011f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d175      	bne.n	8000fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_UART_Transmit+0x2c>
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e06e      	b.n	8000fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2221      	movs	r2, #33	@ 0x21
 8000ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000ee6:	f7ff fcc1 	bl	800086c <HAL_GetTick>
 8000eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	88fa      	ldrh	r2, [r7, #6]
 8000ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f00:	d108      	bne.n	8000f14 <HAL_UART_Transmit+0x6c>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	e003      	b.n	8000f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000f1c:	e02e      	b.n	8000f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 f86d 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2220      	movs	r2, #32
 8000f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e03a      	b.n	8000fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10b      	bne.n	8000f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	e007      	b.n	8000f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1cb      	bne.n	8000f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	@ 0x40
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 f839 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e006      	b.n	8000fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2220      	movs	r2, #32
 8000fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8000fb4:	2302      	movs	r3, #2
  }
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d112      	bne.n	8000ffe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_UART_Receive_IT+0x26>
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00b      	b.n	8001000 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f860 	bl	80010ba <UART_Start_Receive_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	e000      	b.n	8001000 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8000ffe:	2302      	movs	r3, #2
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001018:	e03b      	b.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d037      	beq.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001022:	f7ff fc23 	bl	800086c <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	6a3a      	ldr	r2, [r7, #32]
 800102e:	429a      	cmp	r2, r3
 8001030:	d302      	bcc.n	8001038 <UART_WaitOnFlagUntilTimeout+0x30>
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e03a      	b.n	80010b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	2b00      	cmp	r3, #0
 8001048:	d023      	beq.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b80      	cmp	r3, #128	@ 0x80
 800104e:	d020      	beq.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b40      	cmp	r3, #64	@ 0x40
 8001054:	d01d      	beq.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b08      	cmp	r3, #8
 8001062:	d116      	bne.n	8001092 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f857 	bl	800112e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2208      	movs	r2, #8
 8001084:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4013      	ands	r3, r2
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	429a      	cmp	r2, r3
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d0b4      	beq.n	800101a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2222      	movs	r2, #34	@ 0x22
 80010e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800112e:	b480      	push	{r7}
 8001130:	b095      	sub	sp, #84	@ 0x54
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	330c      	adds	r3, #12
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800113e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001140:	e853 3f00 	ldrex	r3, [r3]
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800114c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	330c      	adds	r3, #12
 8001154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001156:	643a      	str	r2, [r7, #64]	@ 0x40
 8001158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800115a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800115c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800115e:	e841 2300 	strex	r3, r2, [r1]
 8001162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1e5      	bne.n	8001136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3314      	adds	r3, #20
 8001170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	e853 3f00 	ldrex	r3, [r3]
 8001178:	61fb      	str	r3, [r7, #28]
   return(result);
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3314      	adds	r3, #20
 8001188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800118a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800118e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001192:	e841 2300 	strex	r3, r2, [r1]
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e5      	bne.n	800116a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d119      	bne.n	80011da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	330c      	adds	r3, #12
 80011ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e853 3f00 	ldrex	r3, [r3]
 80011b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f023 0310 	bic.w	r3, r3, #16
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	330c      	adds	r3, #12
 80011c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011c6:	61ba      	str	r2, [r7, #24]
 80011c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ca:	6979      	ldr	r1, [r7, #20]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	e841 2300 	strex	r3, r2, [r1]
 80011d2:	613b      	str	r3, [r7, #16]
   return(result);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1e5      	bne.n	80011a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2220      	movs	r2, #32
 80011de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80011e8:	bf00      	nop
 80011ea:	3754      	adds	r7, #84	@ 0x54
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f8:	b0c0      	sub	sp, #256	@ 0x100
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800120c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001210:	68d9      	ldr	r1, [r3, #12]
 8001212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	ea40 0301 	orr.w	r3, r0, r1
 800121c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800121e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	431a      	orrs	r2, r3
 800122c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	431a      	orrs	r2, r3
 8001234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4313      	orrs	r3, r2
 800123c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800124c:	f021 010c 	bic.w	r1, r1, #12
 8001250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800125a:	430b      	orrs	r3, r1
 800125c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800125e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800126a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800126e:	6999      	ldr	r1, [r3, #24]
 8001270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	ea40 0301 	orr.w	r3, r0, r1
 800127a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800127c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b8f      	ldr	r3, [pc, #572]	@ (80014c0 <UART_SetConfig+0x2cc>)
 8001284:	429a      	cmp	r2, r3
 8001286:	d005      	beq.n	8001294 <UART_SetConfig+0xa0>
 8001288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b8d      	ldr	r3, [pc, #564]	@ (80014c4 <UART_SetConfig+0x2d0>)
 8001290:	429a      	cmp	r2, r3
 8001292:	d104      	bne.n	800129e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001294:	f7ff fda4 	bl	8000de0 <HAL_RCC_GetPCLK2Freq>
 8001298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800129c:	e003      	b.n	80012a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800129e:	f7ff fd8b 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 80012a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012b0:	f040 810c 	bne.w	80014cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80012b8:	2200      	movs	r2, #0
 80012ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80012be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80012c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80012c6:	4622      	mov	r2, r4
 80012c8:	462b      	mov	r3, r5
 80012ca:	1891      	adds	r1, r2, r2
 80012cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80012ce:	415b      	adcs	r3, r3
 80012d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80012d6:	4621      	mov	r1, r4
 80012d8:	eb12 0801 	adds.w	r8, r2, r1
 80012dc:	4629      	mov	r1, r5
 80012de:	eb43 0901 	adc.w	r9, r3, r1
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012f6:	4690      	mov	r8, r2
 80012f8:	4699      	mov	r9, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	eb18 0303 	adds.w	r3, r8, r3
 8001300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001304:	462b      	mov	r3, r5
 8001306:	eb49 0303 	adc.w	r3, r9, r3
 800130a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800130e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800131a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800131e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001322:	460b      	mov	r3, r1
 8001324:	18db      	adds	r3, r3, r3
 8001326:	653b      	str	r3, [r7, #80]	@ 0x50
 8001328:	4613      	mov	r3, r2
 800132a:	eb42 0303 	adc.w	r3, r2, r3
 800132e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001338:	f7fe ff56 	bl	80001e8 <__aeabi_uldivmod>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4b61      	ldr	r3, [pc, #388]	@ (80014c8 <UART_SetConfig+0x2d4>)
 8001342:	fba3 2302 	umull	r2, r3, r3, r2
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	011c      	lsls	r4, r3, #4
 800134a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800134e:	2200      	movs	r2, #0
 8001350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001354:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800135c:	4642      	mov	r2, r8
 800135e:	464b      	mov	r3, r9
 8001360:	1891      	adds	r1, r2, r2
 8001362:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001364:	415b      	adcs	r3, r3
 8001366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800136c:	4641      	mov	r1, r8
 800136e:	eb12 0a01 	adds.w	sl, r2, r1
 8001372:	4649      	mov	r1, r9
 8001374:	eb43 0b01 	adc.w	fp, r3, r1
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800138c:	4692      	mov	sl, r2
 800138e:	469b      	mov	fp, r3
 8001390:	4643      	mov	r3, r8
 8001392:	eb1a 0303 	adds.w	r3, sl, r3
 8001396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800139a:	464b      	mov	r3, r9
 800139c:	eb4b 0303 	adc.w	r3, fp, r3
 80013a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80013a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80013b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80013b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80013b8:	460b      	mov	r3, r1
 80013ba:	18db      	adds	r3, r3, r3
 80013bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80013be:	4613      	mov	r3, r2
 80013c0:	eb42 0303 	adc.w	r3, r2, r3
 80013c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80013c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80013ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013ce:	f7fe ff0b 	bl	80001e8 <__aeabi_uldivmod>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4611      	mov	r1, r2
 80013d8:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <UART_SetConfig+0x2d4>)
 80013da:	fba3 2301 	umull	r2, r3, r3, r1
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2264      	movs	r2, #100	@ 0x64
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	1acb      	subs	r3, r1, r3
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80013ee:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <UART_SetConfig+0x2d4>)
 80013f0:	fba3 2302 	umull	r2, r3, r3, r2
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80013fc:	441c      	add	r4, r3
 80013fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001408:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800140c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001410:	4642      	mov	r2, r8
 8001412:	464b      	mov	r3, r9
 8001414:	1891      	adds	r1, r2, r2
 8001416:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001418:	415b      	adcs	r3, r3
 800141a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800141c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001420:	4641      	mov	r1, r8
 8001422:	1851      	adds	r1, r2, r1
 8001424:	6339      	str	r1, [r7, #48]	@ 0x30
 8001426:	4649      	mov	r1, r9
 8001428:	414b      	adcs	r3, r1
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001438:	4659      	mov	r1, fp
 800143a:	00cb      	lsls	r3, r1, #3
 800143c:	4651      	mov	r1, sl
 800143e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001442:	4651      	mov	r1, sl
 8001444:	00ca      	lsls	r2, r1, #3
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	4603      	mov	r3, r0
 800144c:	4642      	mov	r2, r8
 800144e:	189b      	adds	r3, r3, r2
 8001450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001454:	464b      	mov	r3, r9
 8001456:	460a      	mov	r2, r1
 8001458:	eb42 0303 	adc.w	r3, r2, r3
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800146c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001474:	460b      	mov	r3, r1
 8001476:	18db      	adds	r3, r3, r3
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800147a:	4613      	mov	r3, r2
 800147c:	eb42 0303 	adc.w	r3, r2, r3
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800148a:	f7fe fead 	bl	80001e8 <__aeabi_uldivmod>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <UART_SetConfig+0x2d4>)
 8001494:	fba3 1302 	umull	r1, r3, r3, r2
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	2164      	movs	r1, #100	@ 0x64
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	3332      	adds	r3, #50	@ 0x32
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <UART_SetConfig+0x2d4>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	f003 0207 	and.w	r2, r3, #7
 80014b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4422      	add	r2, r4
 80014ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80014bc:	e106      	b.n	80016cc <UART_SetConfig+0x4d8>
 80014be:	bf00      	nop
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40011400 	.word	0x40011400
 80014c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80014d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80014da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80014de:	4642      	mov	r2, r8
 80014e0:	464b      	mov	r3, r9
 80014e2:	1891      	adds	r1, r2, r2
 80014e4:	6239      	str	r1, [r7, #32]
 80014e6:	415b      	adcs	r3, r3
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014ee:	4641      	mov	r1, r8
 80014f0:	1854      	adds	r4, r2, r1
 80014f2:	4649      	mov	r1, r9
 80014f4:	eb43 0501 	adc.w	r5, r3, r1
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	00eb      	lsls	r3, r5, #3
 8001502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001506:	00e2      	lsls	r2, r4, #3
 8001508:	4614      	mov	r4, r2
 800150a:	461d      	mov	r5, r3
 800150c:	4643      	mov	r3, r8
 800150e:	18e3      	adds	r3, r4, r3
 8001510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001514:	464b      	mov	r3, r9
 8001516:	eb45 0303 	adc.w	r3, r5, r3
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800151e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800152a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800153a:	4629      	mov	r1, r5
 800153c:	008b      	lsls	r3, r1, #2
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001544:	4621      	mov	r1, r4
 8001546:	008a      	lsls	r2, r1, #2
 8001548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800154c:	f7fe fe4c 	bl	80001e8 <__aeabi_uldivmod>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4b60      	ldr	r3, [pc, #384]	@ (80016d8 <UART_SetConfig+0x4e4>)
 8001556:	fba3 2302 	umull	r2, r3, r3, r2
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	011c      	lsls	r4, r3, #4
 800155e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800156c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001570:	4642      	mov	r2, r8
 8001572:	464b      	mov	r3, r9
 8001574:	1891      	adds	r1, r2, r2
 8001576:	61b9      	str	r1, [r7, #24]
 8001578:	415b      	adcs	r3, r3
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001580:	4641      	mov	r1, r8
 8001582:	1851      	adds	r1, r2, r1
 8001584:	6139      	str	r1, [r7, #16]
 8001586:	4649      	mov	r1, r9
 8001588:	414b      	adcs	r3, r1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001598:	4659      	mov	r1, fp
 800159a:	00cb      	lsls	r3, r1, #3
 800159c:	4651      	mov	r1, sl
 800159e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015a2:	4651      	mov	r1, sl
 80015a4:	00ca      	lsls	r2, r1, #3
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	4642      	mov	r2, r8
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015b4:	464b      	mov	r3, r9
 80015b6:	460a      	mov	r2, r1
 80015b8:	eb42 0303 	adc.w	r3, r2, r3
 80015bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80015c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80015d8:	4649      	mov	r1, r9
 80015da:	008b      	lsls	r3, r1, #2
 80015dc:	4641      	mov	r1, r8
 80015de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015e2:	4641      	mov	r1, r8
 80015e4:	008a      	lsls	r2, r1, #2
 80015e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80015ea:	f7fe fdfd 	bl	80001e8 <__aeabi_uldivmod>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <UART_SetConfig+0x4e4>)
 80015f6:	fba3 2301 	umull	r2, r3, r3, r1
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2264      	movs	r2, #100	@ 0x64
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	1acb      	subs	r3, r1, r3
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	3332      	adds	r3, #50	@ 0x32
 8001608:	4a33      	ldr	r2, [pc, #204]	@ (80016d8 <UART_SetConfig+0x4e4>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001614:	441c      	add	r4, r3
 8001616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800161a:	2200      	movs	r2, #0
 800161c:	673b      	str	r3, [r7, #112]	@ 0x70
 800161e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001624:	4642      	mov	r2, r8
 8001626:	464b      	mov	r3, r9
 8001628:	1891      	adds	r1, r2, r2
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	415b      	adcs	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001634:	4641      	mov	r1, r8
 8001636:	1851      	adds	r1, r2, r1
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	4649      	mov	r1, r9
 800163c:	414b      	adcs	r3, r1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800164c:	4659      	mov	r1, fp
 800164e:	00cb      	lsls	r3, r1, #3
 8001650:	4651      	mov	r1, sl
 8001652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001656:	4651      	mov	r1, sl
 8001658:	00ca      	lsls	r2, r1, #3
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	4603      	mov	r3, r0
 8001660:	4642      	mov	r2, r8
 8001662:	189b      	adds	r3, r3, r2
 8001664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001666:	464b      	mov	r3, r9
 8001668:	460a      	mov	r2, r1
 800166a:	eb42 0303 	adc.w	r3, r2, r3
 800166e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	663b      	str	r3, [r7, #96]	@ 0x60
 800167a:	667a      	str	r2, [r7, #100]	@ 0x64
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001688:	4649      	mov	r1, r9
 800168a:	008b      	lsls	r3, r1, #2
 800168c:	4641      	mov	r1, r8
 800168e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001692:	4641      	mov	r1, r8
 8001694:	008a      	lsls	r2, r1, #2
 8001696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800169a:	f7fe fda5 	bl	80001e8 <__aeabi_uldivmod>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <UART_SetConfig+0x4e4>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	2164      	movs	r1, #100	@ 0x64
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	3332      	adds	r3, #50	@ 0x32
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <UART_SetConfig+0x4e4>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	f003 020f 	and.w	r2, r3, #15
 80016c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4422      	add	r2, r4
 80016ca:	609a      	str	r2, [r3, #8]
}
 80016cc:	bf00      	nop
 80016ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80016d2:	46bd      	mov	sp, r7
 80016d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016d8:	51eb851f 	.word	0x51eb851f

080016dc <__libc_init_array>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	4d0d      	ldr	r5, [pc, #52]	@ (8001714 <__libc_init_array+0x38>)
 80016e0:	4c0d      	ldr	r4, [pc, #52]	@ (8001718 <__libc_init_array+0x3c>)
 80016e2:	1b64      	subs	r4, r4, r5
 80016e4:	10a4      	asrs	r4, r4, #2
 80016e6:	2600      	movs	r6, #0
 80016e8:	42a6      	cmp	r6, r4
 80016ea:	d109      	bne.n	8001700 <__libc_init_array+0x24>
 80016ec:	4d0b      	ldr	r5, [pc, #44]	@ (800171c <__libc_init_array+0x40>)
 80016ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001720 <__libc_init_array+0x44>)
 80016f0:	f000 f818 	bl	8001724 <_init>
 80016f4:	1b64      	subs	r4, r4, r5
 80016f6:	10a4      	asrs	r4, r4, #2
 80016f8:	2600      	movs	r6, #0
 80016fa:	42a6      	cmp	r6, r4
 80016fc:	d105      	bne.n	800170a <__libc_init_array+0x2e>
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
 8001700:	f855 3b04 	ldr.w	r3, [r5], #4
 8001704:	4798      	blx	r3
 8001706:	3601      	adds	r6, #1
 8001708:	e7ee      	b.n	80016e8 <__libc_init_array+0xc>
 800170a:	f855 3b04 	ldr.w	r3, [r5], #4
 800170e:	4798      	blx	r3
 8001710:	3601      	adds	r6, #1
 8001712:	e7f2      	b.n	80016fa <__libc_init_array+0x1e>
 8001714:	0800175c 	.word	0x0800175c
 8001718:	0800175c 	.word	0x0800175c
 800171c:	0800175c 	.word	0x0800175c
 8001720:	08001760 	.word	0x08001760

08001724 <_init>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr

08001730 <_fini>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr
