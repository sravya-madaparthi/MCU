
usart_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b98  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000d30  08000d30  00001d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d60  08000d60  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d60  08000d60  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d64  08000d64  00001d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000d68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000d74  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d74  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003421  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dfb  00000000  00000000  0000545d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00006258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002bd  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014854  00000000  00000000  000068f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005077  00000000  00000000  0001b149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008134d  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a150d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d04  00000000  00000000  000a1550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a2254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d18 	.word	0x08000d18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000d18 	.word	0x08000d18

080001d8 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]

    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	2300      	movs	r3, #0
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <MX_GPIO_Init+0x68>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f4:	4a12      	ldr	r2, [pc, #72]	@ (8000240 <MX_GPIO_Init+0x68>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fc:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <MX_GPIO_Init+0x68>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000200:	f003 0302 	and.w	r3, r3, #2
 8000204:	603b      	str	r3, [r7, #0]
 8000206:	683b      	ldr	r3, [r7, #0]

    /* Configure GPIO pins: PB0 to PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 8000208:	233f      	movs	r3, #63	@ 0x3f
 800020a:	607b      	str	r3, [r7, #4]
                          GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2301      	movs	r3, #1
 800020e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000214:	2302      	movs	r3, #2
 8000216:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4619      	mov	r1, r3
 800021c:	4809      	ldr	r0, [pc, #36]	@ (8000244 <MX_GPIO_Init+0x6c>)
 800021e:	f000 fbb9 	bl	8000994 <HAL_GPIO_Init>

    /* Ensure LCD starts in a known state */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // RS = 0
 8000222:	2200      	movs	r2, #0
 8000224:	2101      	movs	r1, #1
 8000226:	4807      	ldr	r0, [pc, #28]	@ (8000244 <MX_GPIO_Init+0x6c>)
 8000228:	f000 fd38 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Enable = 0
 800022c:	2200      	movs	r2, #0
 800022e:	2102      	movs	r1, #2
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <MX_GPIO_Init+0x6c>)
 8000232:	f000 fd33 	bl	8000c9c <HAL_GPIO_WritePin>
}
 8000236:	bf00      	nop
 8000238:	3718      	adds	r7, #24
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020400 	.word	0x40020400

08000248 <LCD_Init>:
#include "lcd.h"
#include "gpio.h"

/* LCD Initialization Function */
void LCD_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Power-on delay for LCD
 800024c:	2064      	movs	r0, #100	@ 0x64
 800024e:	f000 fa97 	bl	8000780 <HAL_Delay>

    LCD_SendCommand(0x33);  // Initialize to 8-bit mode
 8000252:	2033      	movs	r0, #51	@ 0x33
 8000254:	f000 f826 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(5);
 8000258:	2005      	movs	r0, #5
 800025a:	f000 fa91 	bl	8000780 <HAL_Delay>
    LCD_SendCommand(0x32);  // Switch to 4-bit mode
 800025e:	2032      	movs	r0, #50	@ 0x32
 8000260:	f000 f820 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(5);
 8000264:	2005      	movs	r0, #5
 8000266:	f000 fa8b 	bl	8000780 <HAL_Delay>

    LCD_SendCommand(0x28);  // 4-bit mode, 2 lines, 5x8 dots
 800026a:	2028      	movs	r0, #40	@ 0x28
 800026c:	f000 f81a 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(5);
 8000270:	2005      	movs	r0, #5
 8000272:	f000 fa85 	bl	8000780 <HAL_Delay>

    LCD_SendCommand(0x0C);  // Display ON, Cursor OFF
 8000276:	200c      	movs	r0, #12
 8000278:	f000 f814 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(5);
 800027c:	2005      	movs	r0, #5
 800027e:	f000 fa7f 	bl	8000780 <HAL_Delay>

    LCD_SendCommand(0x06);  // Auto-increment cursor
 8000282:	2006      	movs	r0, #6
 8000284:	f000 f80e 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(5);
 8000288:	2005      	movs	r0, #5
 800028a:	f000 fa79 	bl	8000780 <HAL_Delay>

    LCD_Clear();            // Clear display
 800028e:	f000 f91a 	bl	80004c6 <LCD_Clear>
    HAL_Delay(10);          // Important delay after clear display
 8000292:	200a      	movs	r0, #10
 8000294:	f000 fa74 	bl	8000780 <HAL_Delay>

    LCD_SetCursor(0, 0);    // Set cursor to start position
 8000298:	2100      	movs	r1, #0
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f91d 	bl	80004da <LCD_SetCursor>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <LCD_SendCommand>:

/* Send Command to LCD */
void LCD_SendCommand(uint8_t cmd)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // RS = 0 (Command mode)
 80002ae:	2200      	movs	r2, #0
 80002b0:	2101      	movs	r1, #1
 80002b2:	483a      	ldr	r0, [pc, #232]	@ (800039c <LCD_SendCommand+0xf8>)
 80002b4:	f000 fcf2 	bl	8000c9c <HAL_GPIO_WritePin>

    // Upper nibble
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (cmd >> 4) & 0x01);
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	091b      	lsrs	r3, r3, #4
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	461a      	mov	r2, r3
 80002c6:	2104      	movs	r1, #4
 80002c8:	4834      	ldr	r0, [pc, #208]	@ (800039c <LCD_SendCommand+0xf8>)
 80002ca:	f000 fce7 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (cmd >> 5) & 0x01);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	095b      	lsrs	r3, r3, #5
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	461a      	mov	r2, r3
 80002dc:	2108      	movs	r1, #8
 80002de:	482f      	ldr	r0, [pc, #188]	@ (800039c <LCD_SendCommand+0xf8>)
 80002e0:	f000 fcdc 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (cmd >> 6) & 0x01);
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	099b      	lsrs	r3, r3, #6
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	2110      	movs	r1, #16
 80002f4:	4829      	ldr	r0, [pc, #164]	@ (800039c <LCD_SendCommand+0xf8>)
 80002f6:	f000 fcd1 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (cmd >> 7) & 0x01);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	09db      	lsrs	r3, r3, #7
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	461a      	mov	r2, r3
 8000302:	2120      	movs	r1, #32
 8000304:	4825      	ldr	r0, [pc, #148]	@ (800039c <LCD_SendCommand+0xf8>)
 8000306:	f000 fcc9 	bl	8000c9c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Enable pulse
 800030a:	2201      	movs	r2, #1
 800030c:	2102      	movs	r1, #2
 800030e:	4823      	ldr	r0, [pc, #140]	@ (800039c <LCD_SendCommand+0xf8>)
 8000310:	f000 fcc4 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 fa33 	bl	8000780 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	481f      	ldr	r0, [pc, #124]	@ (800039c <LCD_SendCommand+0xf8>)
 8000320:	f000 fcbc 	bl	8000c9c <HAL_GPIO_WritePin>

    // Lower nibble
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, cmd & 0x01);
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	b2db      	uxtb	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	2104      	movs	r1, #4
 8000330:	481a      	ldr	r0, [pc, #104]	@ (800039c <LCD_SendCommand+0xf8>)
 8000332:	f000 fcb3 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (cmd >> 1) & 0x01);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	085b      	lsrs	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	2108      	movs	r1, #8
 8000346:	4815      	ldr	r0, [pc, #84]	@ (800039c <LCD_SendCommand+0xf8>)
 8000348:	f000 fca8 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (cmd >> 2) & 0x01);
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	2110      	movs	r1, #16
 800035c:	480f      	ldr	r0, [pc, #60]	@ (800039c <LCD_SendCommand+0xf8>)
 800035e:	f000 fc9d 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (cmd >> 3) & 0x01);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	08db      	lsrs	r3, r3, #3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	2120      	movs	r1, #32
 8000372:	480a      	ldr	r0, [pc, #40]	@ (800039c <LCD_SendCommand+0xf8>)
 8000374:	f000 fc92 	bl	8000c9c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Enable pulse
 8000378:	2201      	movs	r2, #1
 800037a:	2102      	movs	r1, #2
 800037c:	4807      	ldr	r0, [pc, #28]	@ (800039c <LCD_SendCommand+0xf8>)
 800037e:	f000 fc8d 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000382:	2002      	movs	r0, #2
 8000384:	f000 f9fc 	bl	8000780 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2102      	movs	r1, #2
 800038c:	4803      	ldr	r0, [pc, #12]	@ (800039c <LCD_SendCommand+0xf8>)
 800038e:	f000 fc85 	bl	8000c9c <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020400 	.word	0x40020400

080003a0 <LCD_SendData>:

/* Send Data to LCD */
void LCD_SendData(uint8_t data)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // RS = 1 (Data mode)
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	483a      	ldr	r0, [pc, #232]	@ (8000498 <LCD_SendData+0xf8>)
 80003b0:	f000 fc74 	bl	8000c9c <HAL_GPIO_WritePin>

    // Upper nibble
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, (data >> 4) & 0x01);
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	091b      	lsrs	r3, r3, #4
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	2104      	movs	r1, #4
 80003c4:	4834      	ldr	r0, [pc, #208]	@ (8000498 <LCD_SendData+0xf8>)
 80003c6:	f000 fc69 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (data >> 5) & 0x01);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	095b      	lsrs	r3, r3, #5
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	2108      	movs	r1, #8
 80003da:	482f      	ldr	r0, [pc, #188]	@ (8000498 <LCD_SendData+0xf8>)
 80003dc:	f000 fc5e 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (data >> 6) & 0x01);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	099b      	lsrs	r3, r3, #6
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	461a      	mov	r2, r3
 80003ee:	2110      	movs	r1, #16
 80003f0:	4829      	ldr	r0, [pc, #164]	@ (8000498 <LCD_SendData+0xf8>)
 80003f2:	f000 fc53 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (data >> 7) & 0x01);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	09db      	lsrs	r3, r3, #7
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	2120      	movs	r1, #32
 8000400:	4825      	ldr	r0, [pc, #148]	@ (8000498 <LCD_SendData+0xf8>)
 8000402:	f000 fc4b 	bl	8000c9c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Enable pulse
 8000406:	2201      	movs	r2, #1
 8000408:	2102      	movs	r1, #2
 800040a:	4823      	ldr	r0, [pc, #140]	@ (8000498 <LCD_SendData+0xf8>)
 800040c:	f000 fc46 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000410:	2002      	movs	r0, #2
 8000412:	f000 f9b5 	bl	8000780 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2102      	movs	r1, #2
 800041a:	481f      	ldr	r0, [pc, #124]	@ (8000498 <LCD_SendData+0xf8>)
 800041c:	f000 fc3e 	bl	8000c9c <HAL_GPIO_WritePin>

    // Lower nibble
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, data & 0x01);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	2104      	movs	r1, #4
 800042c:	481a      	ldr	r0, [pc, #104]	@ (8000498 <LCD_SendData+0xf8>)
 800042e:	f000 fc35 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (data >> 1) & 0x01);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	085b      	lsrs	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	2108      	movs	r1, #8
 8000442:	4815      	ldr	r0, [pc, #84]	@ (8000498 <LCD_SendData+0xf8>)
 8000444:	f000 fc2a 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (data >> 2) & 0x01);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	2110      	movs	r1, #16
 8000458:	480f      	ldr	r0, [pc, #60]	@ (8000498 <LCD_SendData+0xf8>)
 800045a:	f000 fc1f 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (data >> 3) & 0x01);
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	2120      	movs	r1, #32
 800046e:	480a      	ldr	r0, [pc, #40]	@ (8000498 <LCD_SendData+0xf8>)
 8000470:	f000 fc14 	bl	8000c9c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Enable pulse
 8000474:	2201      	movs	r2, #1
 8000476:	2102      	movs	r1, #2
 8000478:	4807      	ldr	r0, [pc, #28]	@ (8000498 <LCD_SendData+0xf8>)
 800047a:	f000 fc0f 	bl	8000c9c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800047e:	2002      	movs	r0, #2
 8000480:	f000 f97e 	bl	8000780 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2102      	movs	r1, #2
 8000488:	4803      	ldr	r0, [pc, #12]	@ (8000498 <LCD_SendData+0xf8>)
 800048a:	f000 fc07 	bl	8000c9c <HAL_GPIO_WritePin>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40020400 	.word	0x40020400

0800049c <LCD_SendString>:

/* Send String to LCD */
void LCD_SendString(char *str)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    while (*str)
 80004a4:	e006      	b.n	80004b4 <LCD_SendString+0x18>
    {
        LCD_SendData(*str++);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff76 	bl	80003a0 <LCD_SendData>
    while (*str)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f4      	bne.n	80004a6 <LCD_SendString+0xa>
    }
}
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <LCD_Clear>:

/* Clear Display */
void LCD_Clear(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);  // Clear display
 80004ca:	2001      	movs	r0, #1
 80004cc:	f7ff feea 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(10);          // Important delay for clear command
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 f955 	bl	8000780 <HAL_Delay>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}

080004da <LCD_SetCursor>:

/* Set Cursor Position */
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b084      	sub	sp, #16
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	460a      	mov	r2, r1
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	4613      	mov	r3, r2
 80004e8:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <LCD_SetCursor+0x1e>
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	3b80      	subs	r3, #128	@ 0x80
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	e002      	b.n	80004fe <LCD_SetCursor+0x24>
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	3b40      	subs	r3, #64	@ 0x40
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(address);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fece 	bl	80002a4 <LCD_SendCommand>
    HAL_Delay(2);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 f939 	bl	8000780 <HAL_Delay>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <main>:
#include "main.h"
#include "gpio.h"
#include "lcd.h"

int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    HAL_Init();
 800051c:	f000 f8be 	bl	800069c <HAL_Init>

    MX_GPIO_Init();
 8000520:	f7ff fe5a 	bl	80001d8 <MX_GPIO_Init>

    LCD_Init();  // Initialize LCD
 8000524:	f7ff fe90 	bl	8000248 <LCD_Init>

    LCD_SetCursor(0, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffd5 	bl	80004da <LCD_SetCursor>
    LCD_SendString("Hello World!");
 8000530:	480d      	ldr	r0, [pc, #52]	@ (8000568 <main+0x50>)
 8000532:	f7ff ffb3 	bl	800049c <LCD_SendString>

    while (1)
    {
        LCD_SetCursor(1, 0);
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f7ff ffce 	bl	80004da <LCD_SetCursor>
        LCD_SendString("STM32F411RE");
 800053e:	480b      	ldr	r0, [pc, #44]	@ (800056c <main+0x54>)
 8000540:	f7ff ffac 	bl	800049c <LCD_SendString>
        HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000548:	f000 f91a 	bl	8000780 <HAL_Delay>

        LCD_SetCursor(1, 0);
 800054c:	2100      	movs	r1, #0
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ffc3 	bl	80004da <LCD_SetCursor>
        LCD_SendString("                "); // Clear line 2
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <main+0x58>)
 8000556:	f7ff ffa1 	bl	800049c <LCD_SendString>
        HAL_Delay(1000);
 800055a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800055e:	f000 f90f 	bl	8000780 <HAL_Delay>
        LCD_SetCursor(1, 0);
 8000562:	bf00      	nop
 8000564:	e7e7      	b.n	8000536 <main+0x1e>
 8000566:	bf00      	nop
 8000568:	08000d30 	.word	0x08000d30
 800056c:	08000d40 	.word	0x08000d40
 8000570:	08000d4c 	.word	0x08000d4c

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <HAL_MspInit+0x4c>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000582:	4a0f      	ldr	r2, [pc, #60]	@ (80005c0 <HAL_MspInit+0x4c>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000588:	6453      	str	r3, [r2, #68]	@ 0x44
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <HAL_MspInit+0x4c>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800058e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_MspInit+0x4c>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_MspInit+0x4c>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_MspInit+0x4c>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005b2:	2007      	movs	r0, #7
 80005b4:	f000 f9ba 	bl	800092c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f891 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <SystemInit+0x20>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <SystemInit+0x20>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800064c:	f7ff ffea 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f000 fb2b 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067a:	f7ff ff4d 	bl	8000518 <main>
  bx  lr    
 800067e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	2000002c 	.word	0x2000002c

08000698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <HAL_Init+0x40>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <HAL_Init+0x40>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <HAL_Init+0x40>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <HAL_Init+0x40>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <HAL_Init+0x40>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <HAL_Init+0x40>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f931 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff ff50 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f93b 	bl	800097a <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f911 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	20000028 	.word	0x20000028

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000028 	.word	0x20000028

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff ffee 	bl	8000768 <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_Delay+0x44>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffde 	bl	8000768 <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	@ (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	@ (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	@ (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	@ 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff8e 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff47 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff5c 	bl	8000810 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff8e 	bl	8000880 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffb0 	bl	80008e8 <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	@ 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	e159      	b.n	8000c64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009b0:	2201      	movs	r2, #1
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8148 	bne.w	8000c5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d005      	beq.n	80009e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d130      	bne.n	8000a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d017      	beq.n	8000a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d123      	bne.n	8000ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	69b9      	ldr	r1, [r7, #24]
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0203 	and.w	r2, r3, #3
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80a2 	beq.w	8000c5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b57      	ldr	r3, [pc, #348]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a56      	ldr	r2, [pc, #344]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b54      	ldr	r3, [pc, #336]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b36:	4a52      	ldr	r2, [pc, #328]	@ (8000c80 <HAL_GPIO_Init+0x2ec>)
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a49      	ldr	r2, [pc, #292]	@ (8000c84 <HAL_GPIO_Init+0x2f0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d019      	beq.n	8000b96 <HAL_GPIO_Init+0x202>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a48      	ldr	r2, [pc, #288]	@ (8000c88 <HAL_GPIO_Init+0x2f4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0x1fe>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a47      	ldr	r2, [pc, #284]	@ (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00d      	beq.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a46      	ldr	r2, [pc, #280]	@ (8000c90 <HAL_GPIO_Init+0x2fc>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d007      	beq.n	8000b8a <HAL_GPIO_Init+0x1f6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a45      	ldr	r2, [pc, #276]	@ (8000c94 <HAL_GPIO_Init+0x300>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_GPIO_Init+0x1f2>
 8000b82:	2304      	movs	r3, #4
 8000b84:	e008      	b.n	8000b98 <HAL_GPIO_Init+0x204>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x204>
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e004      	b.n	8000b98 <HAL_GPIO_Init+0x204>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_Init+0x204>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x204>
 8000b96:	2300      	movs	r3, #0
 8000b98:	69fa      	ldr	r2, [r7, #28]
 8000b9a:	f002 0203 	and.w	r2, r2, #3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba8:	4935      	ldr	r1, [pc, #212]	@ (8000c80 <HAL_GPIO_Init+0x2ec>)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb6:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bda:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c04:	4a24      	ldr	r2, [pc, #144]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c58:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_GPIO_Init+0x304>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	f67f aea2 	bls.w	80009b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40013c00 	.word	0x40013c00

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	619a      	str	r2, [r3, #24]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8000d08 <__libc_init_array+0x38>)
 8000cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8000d0c <__libc_init_array+0x3c>)
 8000cd6:	1b64      	subs	r4, r4, r5
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	2600      	movs	r6, #0
 8000cdc:	42a6      	cmp	r6, r4
 8000cde:	d109      	bne.n	8000cf4 <__libc_init_array+0x24>
 8000ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8000d10 <__libc_init_array+0x40>)
 8000ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8000d14 <__libc_init_array+0x44>)
 8000ce4:	f000 f818 	bl	8000d18 <_init>
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	2600      	movs	r6, #0
 8000cee:	42a6      	cmp	r6, r4
 8000cf0:	d105      	bne.n	8000cfe <__libc_init_array+0x2e>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf8:	4798      	blx	r3
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7ee      	b.n	8000cdc <__libc_init_array+0xc>
 8000cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d02:	4798      	blx	r3
 8000d04:	3601      	adds	r6, #1
 8000d06:	e7f2      	b.n	8000cee <__libc_init_array+0x1e>
 8000d08:	08000d60 	.word	0x08000d60
 8000d0c:	08000d60 	.word	0x08000d60
 8000d10:	08000d60 	.word	0x08000d60
 8000d14:	08000d64 	.word	0x08000d64

08000d18 <_init>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr

08000d24 <_fini>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr
