
USART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004cc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004d0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004d0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000132f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000551  00000000  00000000  00003363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000038b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c76  00000000  00000000  00003be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021f9  00000000  00000000  0001785f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb45  00000000  00000000  00019a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009859d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  000985e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00098b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004ac 	.word	0x080004ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004ac 	.word	0x080004ac

080001d8 <main>:
void USART2_init(void); char USART2_read(void); void LED_blink(int
value); void delayMs(int);
/*------------------------------------------------------------------
---------MAIN function
*-------------------------------------------------------------------
---------*/ int main (void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
char c;
RCC->AHB1ENR |= 1; /* enable GPIOA clock */ GPIOA->MODER &=
 80001de:	4b0f      	ldr	r3, [pc, #60]	@ (800021c <main+0x44>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <main+0x44>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <main+0x48>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000220 <main+0x48>)
 80001f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001f4:	6013      	str	r3, [r2, #0]
~0x00000C00; /* clear pin mode */ GPIOA->MODER |= 0x00000400; /* set
 80001f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <main+0x48>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <main+0x48>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000200:	6013      	str	r3, [r2, #0]
pin to output mode */
USART2_init(); /* initialize USART2 */
 8000202:	f000 f80f 	bl	8000224 <USART2_init>
while(1) { /* Loop forever */
c = USART2_read(); /* wait for a character received */ LED_blink(c);
 8000206:	f000 f851 	bl	80002ac <USART2_read>
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f85f 	bl	80002d4 <LED_blink>
 8000216:	bf00      	nop
 8000218:	e7f5      	b.n	8000206 <main+0x2e>
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	40020000 	.word	0x40020000

08000224 <USART2_init>:
}
}
/*------------------------------------------------------------------
---------Initialize UART pins, Baudrate
*-------------------------------------------------------------------
---------*/ void USART2_init (void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= 1; /* Enable GPIOA clock */
 8000228:	4b1d      	ldr	r3, [pc, #116]	@ (80002a0 <USART2_init+0x7c>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a1c      	ldr	r2, [pc, #112]	@ (80002a0 <USART2_init+0x7c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30
RCC->APB1ENR |= 0x20000; /* Enable USART2 clock */
 8000234:	4b1a      	ldr	r3, [pc, #104]	@ (80002a0 <USART2_init+0x7c>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000238:	4a19      	ldr	r2, [pc, #100]	@ (80002a0 <USART2_init+0x7c>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800023e:	6413      	str	r3, [r2, #64]	@ 0x40
USART2->BRR = 0x008B; /* 115200 baud @ 16 MHz */ USART2->CR1 =
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <USART2_init+0x80>)
 8000242:	228b      	movs	r2, #139	@ 0x8b
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <USART2_init+0x80>)
 8000248:	2204      	movs	r2, #4
 800024a:	60da      	str	r2, [r3, #12]
0x0004; /* enable Rx, 8-bit data */ USART2->CR2 = 0x0000; /* 1 stop
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <USART2_init+0x80>)
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
bit */ USART2->CR3 = 0x0000; /* no flow control */ USART2->CR1 |=
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <USART2_init+0x80>)
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <USART2_init+0x80>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a11      	ldr	r2, [pc, #68]	@ (80002a4 <USART2_init+0x80>)
 800025e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000262:	60d3      	str	r3, [r2, #12]
0x2000; /* enable USART2 */
/* Configure PA3 for USART2 RX */
GPIOA->AFR[0] &= ~0xF000;
 8000264:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <USART2_init+0x84>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a0f      	ldr	r2, [pc, #60]	@ (80002a8 <USART2_init+0x84>)
 800026a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800026e:	6213      	str	r3, [r2, #32]
GPIOA->AFR[0] |= 0x7000; /* alt7 for USART2 */
 8000270:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <USART2_init+0x84>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a0c      	ldr	r2, [pc, #48]	@ (80002a8 <USART2_init+0x84>)
 8000276:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800027a:	6213      	str	r3, [r2, #32]
GPIOA->MODER &= ~0x00C0;
 800027c:	4b0a      	ldr	r3, [pc, #40]	@ (80002a8 <USART2_init+0x84>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <USART2_init+0x84>)
 8000282:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000286:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= 0x0080; /* enable alternate function for PA3 */
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <USART2_init+0x84>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a06      	ldr	r2, [pc, #24]	@ (80002a8 <USART2_init+0x84>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40004400 	.word	0x40004400
 80002a8:	40020000 	.word	0x40020000

080002ac <USART2_read>:
/* Read a character from USART2 */
char USART2_read(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
while (!(USART2->SR & 0x0020)) {} // wait until char arrives
 80002b0:	bf00      	nop
 80002b2:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <USART2_read+0x24>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0320 	and.w	r3, r3, #32
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <USART2_read+0x6>
return USART2->DR;
 80002be:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <USART2_read+0x24>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	b2db      	uxtb	r3, r3
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40004400 	.word	0x40004400

080002d4 <LED_blink>:
/* turn on or off the LEDs according to the value */
void LED_blink(int value) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
value %= 16; /* cap the max count at 15 */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	425a      	negs	r2, r3
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	f002 020f 	and.w	r2, r2, #15
 80002e8:	bf58      	it	pl
 80002ea:	4253      	negpl	r3, r2
 80002ec:	607b      	str	r3, [r7, #4]
for (; value > 0; value--) {
 80002ee:	e00f      	b.n	8000310 <LED_blink+0x3c>
GPIOA->BSRR = 0x00000020; /* turn on LED */ delayMs(200);
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <LED_blink+0x54>)
 80002f2:	2220      	movs	r2, #32
 80002f4:	619a      	str	r2, [r3, #24]
 80002f6:	20c8      	movs	r0, #200	@ 0xc8
 80002f8:	f000 f818 	bl	800032c <delayMs>
GPIOA->BSRR = 0x00200000; /* turn off LED */ delayMs(200);
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <LED_blink+0x54>)
 80002fe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000302:	619a      	str	r2, [r3, #24]
 8000304:	20c8      	movs	r0, #200	@ 0xc8
 8000306:	f000 f811 	bl	800032c <delayMs>
for (; value > 0; value--) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3b01      	subs	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dcec      	bgt.n	80002f0 <LED_blink+0x1c>
}
delayMs(800);
 8000316:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800031a:	f000 f807 	bl	800032c <delayMs>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000

0800032c <delayMs>:
void delayMs(int n) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
int i;
for (; n > 0; n--)
 8000334:	e00c      	b.n	8000350 <delayMs+0x24>
for (i = 0; i < 2000; i++) ; }
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	e002      	b.n	8000342 <delayMs+0x16>
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000348:	dbf8      	blt.n	800033c <delayMs+0x10>
for (; n > 0; n--)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3b01      	subs	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	dcef      	bgt.n	8000336 <delayMs+0xa>
for (i = 0; i < 2000; i++) ; }
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <NMI_Handler+0x4>

0800036c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <MemManage_Handler+0x4>

0800037c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <UsageFault_Handler+0x4>

0800038c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ba:	f000 f83f 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <SystemInit+0x20>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ce:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <SystemInit+0x20>)
 80003d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000420 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ec:	f7ff ffea 	bl	80003c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	@ (8000424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	@ (8000428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	@ (800042c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	@ (8000434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000416:	f000 f825 	bl	8000464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800041a:	f7ff fedd 	bl	80001d8 <main>
  bx  lr    
 800041e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800042c:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000430:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000434:	20000024 	.word	0x20000024

08000438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <HAL_IncTick+0x20>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <HAL_IncTick+0x24>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <HAL_IncTick+0x24>)
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000
 8000460:	20000020 	.word	0x20000020

08000464 <__libc_init_array>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4d0d      	ldr	r5, [pc, #52]	@ (800049c <__libc_init_array+0x38>)
 8000468:	4c0d      	ldr	r4, [pc, #52]	@ (80004a0 <__libc_init_array+0x3c>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	2600      	movs	r6, #0
 8000470:	42a6      	cmp	r6, r4
 8000472:	d109      	bne.n	8000488 <__libc_init_array+0x24>
 8000474:	4d0b      	ldr	r5, [pc, #44]	@ (80004a4 <__libc_init_array+0x40>)
 8000476:	4c0c      	ldr	r4, [pc, #48]	@ (80004a8 <__libc_init_array+0x44>)
 8000478:	f000 f818 	bl	80004ac <_init>
 800047c:	1b64      	subs	r4, r4, r5
 800047e:	10a4      	asrs	r4, r4, #2
 8000480:	2600      	movs	r6, #0
 8000482:	42a6      	cmp	r6, r4
 8000484:	d105      	bne.n	8000492 <__libc_init_array+0x2e>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	3601      	adds	r6, #1
 8000490:	e7ee      	b.n	8000470 <__libc_init_array+0xc>
 8000492:	f855 3b04 	ldr.w	r3, [r5], #4
 8000496:	4798      	blx	r3
 8000498:	3601      	adds	r6, #1
 800049a:	e7f2      	b.n	8000482 <__libc_init_array+0x1e>
 800049c:	080004c4 	.word	0x080004c4
 80004a0:	080004c4 	.word	0x080004c4
 80004a4:	080004c4 	.word	0x080004c4
 80004a8:	080004c8 	.word	0x080004c8

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
