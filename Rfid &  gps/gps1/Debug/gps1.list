
gps1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001618  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080017b0  080017b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001830  08001830  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001830  08001830  00002830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001838  08001838  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001838  08001838  00002838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800183c  0800183c  0000283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001840  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  0800184c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800184c  000030f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007722  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001583  00000000  00000000  0000a75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004df  00000000  00000000  0000c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001565d  00000000  00000000  0000c827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087f1  00000000  00000000  00021e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854e2  00000000  00000000  0002a675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afb57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001868  00000000  00000000  000afb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b1404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001798 	.word	0x08001798

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001798 	.word	0x08001798

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
 *      Author: Bhargavi
 */
#include "main.h"

void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable clock for GPIOC
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <MX_GPIO_Init+0x60>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <MX_GPIO_Init+0x60>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <MX_GPIO_Init+0x60>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fe:	480b      	ldr	r0, [pc, #44]	@ (800052c <MX_GPIO_Init+0x64>)
 8000500:	f000 fc54 	bl	8000dac <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000508:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_GPIO_Init+0x64>)
 800051c:	f000 fac2 	bl	8000aa4 <HAL_GPIO_Init>
}
 8000520:	bf00      	nop
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40023800 	.word	0x40023800
 800052c:	40020800 	.word	0x40020800

08000530 <main>:
    }
}

// Main Function
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    HAL_Init();
 8000534:	f000 f93a 	bl	80007ac <HAL_Init>

    MX_GPIO_Init();
 8000538:	f7ff ffc6 	bl	80004c8 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800053c:	f000 f8e2 	bl	8000704 <MX_USART1_UART_Init>

    HAL_UART_Transmit(&huart1, (uint8_t *)"Starting GPS Receiver...\r\n", 27, HAL_MAX_DELAY);
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	221b      	movs	r2, #27
 8000546:	490a      	ldr	r1, [pc, #40]	@ (8000570 <main+0x40>)
 8000548:	480a      	ldr	r0, [pc, #40]	@ (8000574 <main+0x44>)
 800054a:	f000 fce7 	bl	8000f1c <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, gps_buffer, GPS_BUFFER_SIZE);  // Start UART Reception
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	4909      	ldr	r1, [pc, #36]	@ (8000578 <main+0x48>)
 8000552:	4808      	ldr	r0, [pc, #32]	@ (8000574 <main+0x44>)
 8000554:	f000 fd6d 	bl	8001032 <HAL_UART_Receive_IT>

    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Blink LED for status
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	4807      	ldr	r0, [pc, #28]	@ (800057c <main+0x4c>)
 800055e:	f000 fc3e 	bl	8000dde <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000566:	f000 f993 	bl	8000890 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Blink LED for status
 800056a:	bf00      	nop
 800056c:	e7f4      	b.n	8000558 <main+0x28>
 800056e:	bf00      	nop
 8000570:	0800180c 	.word	0x0800180c
 8000574:	200000a8 	.word	0x200000a8
 8000578:	20000028 	.word	0x20000028
 800057c:	40020800 	.word	0x40020800

08000580 <Error_Handler>:
    }
}

// Error Handler
void Error_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Blink rapidly for error indication
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <Error_Handler+0x1c>)
 800058e:	f000 fc26 	bl	8000dde <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8000592:	20c8      	movs	r0, #200	@ 0xc8
 8000594:	f000 f97c 	bl	8000890 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Blink rapidly for error indication
 8000598:	bf00      	nop
 800059a:	e7f5      	b.n	8000588 <Error_Handler+0x8>
 800059c:	40020800 	.word	0x40020800

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <HAL_MspInit+0x4c>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ae:	4a0f      	ldr	r2, [pc, #60]	@ (80005ec <HAL_MspInit+0x4c>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <HAL_MspInit+0x4c>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_MspInit+0x4c>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <HAL_MspInit+0x4c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_MspInit+0x4c>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005de:	2007      	movs	r0, #7
 80005e0:	f000 fa2c 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800

080005f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <HAL_UART_MspInit+0x84>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d12c      	bne.n	800066c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <HAL_UART_MspInit+0x88>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061a:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <HAL_UART_MspInit+0x88>)
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	6453      	str	r3, [r2, #68]	@ 0x44
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <HAL_UART_MspInit+0x88>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <HAL_UART_MspInit+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <HAL_UART_MspInit+0x88>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <HAL_UART_MspInit+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800064a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800065c:	2307      	movs	r3, #7
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <HAL_UART_MspInit+0x8c>)
 8000668:	f000 fa1c 	bl	8000aa4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	@ 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40011000 	.word	0x40011000
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <NMI_Handler+0x4>

08000688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <MemManage_Handler+0x4>

08000698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 f8bb 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <MX_USART1_UART_Init>:
#include "main.h"

UART_HandleTypeDef huart1;

void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000714:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f000 fb9e 	bl	8000e7c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000746:	f7ff ff1b 	bl	8000580 <Error_Handler>
    }
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000a8 	.word	0x200000a8
 8000754:	40011000 	.word	0x40011000

08000758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800075c:	f7ff ffc0 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	@ (8000798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	@ (80007a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f000 ffe3 	bl	8001750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078a:	f7ff fed1 	bl	8000530 <main>
  bx  lr    
 800078e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800079c:	08001840 	.word	0x08001840
  ldr r2, =_sbss
 80007a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a4:	200000f4 	.word	0x200000f4

080007a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <HAL_Init+0x40>)
 80007b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <HAL_Init+0x40>)
 80007c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_Init+0x40>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <HAL_Init+0x40>)
 80007ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f931 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fede 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023c00 	.word	0x40023c00

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f93b 	bl	8000a8a <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f911 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	200000f0 	.word	0x200000f0

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200000f0 	.word	0x200000f0

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	@ (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	@ 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff8e 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff47 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff5c 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff8e 	bl	8000990 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffb0 	bl	80009f8 <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	e159      	b.n	8000d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f040 8148 	bne.w	8000d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d130      	bne.n	8000b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	f003 0201 	and.w	r2, r3, #1
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d017      	beq.n	8000b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d123      	bne.n	8000be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	08da      	lsrs	r2, r3, #3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3208      	adds	r2, #8
 8000ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	69b9      	ldr	r1, [r7, #24]
 8000be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0203 	and.w	r2, r3, #3
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 80a2 	beq.w	8000d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b57      	ldr	r3, [pc, #348]	@ (8000d8c <HAL_GPIO_Init+0x2e8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a56      	ldr	r2, [pc, #344]	@ (8000d8c <HAL_GPIO_Init+0x2e8>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b54      	ldr	r3, [pc, #336]	@ (8000d8c <HAL_GPIO_Init+0x2e8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c46:	4a52      	ldr	r2, [pc, #328]	@ (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <HAL_GPIO_Init+0x2f0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d019      	beq.n	8000ca6 <HAL_GPIO_Init+0x202>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a48      	ldr	r2, [pc, #288]	@ (8000d98 <HAL_GPIO_Init+0x2f4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0x1fe>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a47      	ldr	r2, [pc, #284]	@ (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00d      	beq.n	8000c9e <HAL_GPIO_Init+0x1fa>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a46      	ldr	r2, [pc, #280]	@ (8000da0 <HAL_GPIO_Init+0x2fc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x1f6>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a45      	ldr	r2, [pc, #276]	@ (8000da4 <HAL_GPIO_Init+0x300>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_Init+0x1f2>
 8000c92:	2304      	movs	r3, #4
 8000c94:	e008      	b.n	8000ca8 <HAL_GPIO_Init+0x204>
 8000c96:	2307      	movs	r3, #7
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x204>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e004      	b.n	8000ca8 <HAL_GPIO_Init+0x204>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e002      	b.n	8000ca8 <HAL_GPIO_Init+0x204>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <HAL_GPIO_Init+0x204>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	f002 0203 	and.w	r2, r2, #3
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4093      	lsls	r3, r2
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb8:	4935      	ldr	r1, [pc, #212]	@ (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cea:	4a2f      	ldr	r2, [pc, #188]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d14:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d68:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	f67f aea2 	bls.w	8000ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40013800 	.word	0x40013800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40013c00 	.word	0x40013c00

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	619a      	str	r2, [r3, #24]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df0:	887a      	ldrh	r2, [r7, #2]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	041a      	lsls	r2, r3, #16
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	400b      	ands	r3, r1
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	619a      	str	r2, [r3, #24]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e30:	f7ff fff0 	bl	8000e14 <HAL_RCC_GetHCLKFreq>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	0a9b      	lsrs	r3, r3, #10
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	4903      	ldr	r1, [pc, #12]	@ (8000e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e42:	5ccb      	ldrb	r3, [r1, r3]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	08001828 	.word	0x08001828

08000e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e58:	f7ff ffdc 	bl	8000e14 <HAL_RCC_GetHCLKFreq>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	0b5b      	lsrs	r3, r3, #13
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	4903      	ldr	r1, [pc, #12]	@ (8000e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	08001828 	.word	0x08001828

08000e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e042      	b.n	8000f14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fba4 	bl	80005f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2224      	movs	r2, #36	@ 0x24
 8000eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f9d1 	bl	8001268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	695a      	ldr	r2, [r3, #20]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2220      	movs	r2, #32
 8000f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b20      	cmp	r3, #32
 8000f3a:	d175      	bne.n	8001028 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <HAL_UART_Transmit+0x2c>
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e06e      	b.n	800102a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2221      	movs	r2, #33	@ 0x21
 8000f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000f5a:	f7ff fc8d 	bl	8000878 <HAL_GetTick>
 8000f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f74:	d108      	bne.n	8000f88 <HAL_UART_Transmit+0x6c>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	e003      	b.n	8000f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000f90:	e02e      	b.n	8000ff0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f86d 	bl	800107c <UART_WaitOnFlagUntilTimeout>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2220      	movs	r2, #32
 8000fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e03a      	b.n	800102a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	e007      	b.n	8000fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1cb      	bne.n	8000f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2200      	movs	r2, #0
 8001002:	2140      	movs	r1, #64	@ 0x40
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 f839 	bl	800107c <UART_WaitOnFlagUntilTimeout>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e006      	b.n	800102a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2220      	movs	r2, #32
 8001020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	e000      	b.n	800102a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001028:	2302      	movs	r3, #2
  }
}
 800102a:	4618      	mov	r0, r3
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	4613      	mov	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b20      	cmp	r3, #32
 800104a:	d112      	bne.n	8001072 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_UART_Receive_IT+0x26>
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e00b      	b.n	8001074 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	461a      	mov	r2, r3
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f860 	bl	800112e <UART_Start_Receive_IT>
 800106e:	4603      	mov	r3, r0
 8001070:	e000      	b.n	8001074 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001072:	2302      	movs	r3, #2
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800108c:	e03b      	b.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d037      	beq.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001096:	f7ff fbef 	bl	8000878 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	6a3a      	ldr	r2, [r7, #32]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d302      	bcc.n	80010ac <UART_WaitOnFlagUntilTimeout+0x30>
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e03a      	b.n	8001126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b80      	cmp	r3, #128	@ 0x80
 80010c2:	d020      	beq.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b40      	cmp	r3, #64	@ 0x40
 80010c8:	d01d      	beq.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d116      	bne.n	8001106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f857 	bl	80011a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2208      	movs	r2, #8
 80010f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4013      	ands	r3, r2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	429a      	cmp	r2, r3
 8001122:	d0b4      	beq.n	800108e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	4613      	mov	r3, r2
 800113a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	88fa      	ldrh	r2, [r7, #6]
 800114c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2222      	movs	r2, #34	@ 0x22
 8001158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001172:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b095      	sub	sp, #84	@ 0x54
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	330c      	adds	r3, #12
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b4:	e853 3f00 	ldrex	r3, [r3]
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80011ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	330c      	adds	r3, #12
 80011c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80011d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011d2:	e841 2300 	strex	r3, r2, [r1]
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80011d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e5      	bne.n	80011aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3314      	adds	r3, #20
 80011e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	e853 3f00 	ldrex	r3, [r3]
 80011ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3314      	adds	r3, #20
 80011fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001206:	e841 2300 	strex	r3, r2, [r1]
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e5      	bne.n	80011de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	2b01      	cmp	r3, #1
 8001218:	d119      	bne.n	800124e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	330c      	adds	r3, #12
 8001220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	e853 3f00 	ldrex	r3, [r3]
 8001228:	60bb      	str	r3, [r7, #8]
   return(result);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f023 0310 	bic.w	r3, r3, #16
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	330c      	adds	r3, #12
 8001238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800123a:	61ba      	str	r2, [r7, #24]
 800123c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800123e:	6979      	ldr	r1, [r7, #20]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	e841 2300 	strex	r3, r2, [r1]
 8001246:	613b      	str	r3, [r7, #16]
   return(result);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e5      	bne.n	800121a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800125c:	bf00      	nop
 800125e:	3754      	adds	r7, #84	@ 0x54
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	b0c0      	sub	sp, #256	@ 0x100
 800126e:	af00      	add	r7, sp, #0
 8001270:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001284:	68d9      	ldr	r1, [r3, #12]
 8001286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	ea40 0301 	orr.w	r3, r0, r1
 8001290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	431a      	orrs	r2, r3
 80012a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80012b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80012c0:	f021 010c 	bic.w	r1, r1, #12
 80012c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80012ce:	430b      	orrs	r3, r1
 80012d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80012de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012e2:	6999      	ldr	r1, [r3, #24]
 80012e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	ea40 0301 	orr.w	r3, r0, r1
 80012ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <UART_SetConfig+0x2cc>)
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d005      	beq.n	8001308 <UART_SetConfig+0xa0>
 80012fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b8d      	ldr	r3, [pc, #564]	@ (8001538 <UART_SetConfig+0x2d0>)
 8001304:	429a      	cmp	r2, r3
 8001306:	d104      	bne.n	8001312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001308:	f7ff fda4 	bl	8000e54 <HAL_RCC_GetPCLK2Freq>
 800130c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001310:	e003      	b.n	800131a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001312:	f7ff fd8b 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 8001316:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800131a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001324:	f040 810c 	bne.w	8001540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800132c:	2200      	movs	r2, #0
 800132e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001332:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800133a:	4622      	mov	r2, r4
 800133c:	462b      	mov	r3, r5
 800133e:	1891      	adds	r1, r2, r2
 8001340:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001342:	415b      	adcs	r3, r3
 8001344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800134a:	4621      	mov	r1, r4
 800134c:	eb12 0801 	adds.w	r8, r2, r1
 8001350:	4629      	mov	r1, r5
 8001352:	eb43 0901 	adc.w	r9, r3, r1
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	4623      	mov	r3, r4
 8001370:	eb18 0303 	adds.w	r3, r8, r3
 8001374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001378:	462b      	mov	r3, r5
 800137a:	eb49 0303 	adc.w	r3, r9, r3
 800137e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800138e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001396:	460b      	mov	r3, r1
 8001398:	18db      	adds	r3, r3, r3
 800139a:	653b      	str	r3, [r7, #80]	@ 0x50
 800139c:	4613      	mov	r3, r2
 800139e:	eb42 0303 	adc.w	r3, r2, r3
 80013a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80013a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80013ac:	f7fe ff14 	bl	80001d8 <__aeabi_uldivmod>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <UART_SetConfig+0x2d4>)
 80013b6:	fba3 2302 	umull	r2, r3, r3, r2
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	011c      	lsls	r4, r3, #4
 80013be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80013c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80013cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80013d0:	4642      	mov	r2, r8
 80013d2:	464b      	mov	r3, r9
 80013d4:	1891      	adds	r1, r2, r2
 80013d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80013d8:	415b      	adcs	r3, r3
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80013e0:	4641      	mov	r1, r8
 80013e2:	eb12 0a01 	adds.w	sl, r2, r1
 80013e6:	4649      	mov	r1, r9
 80013e8:	eb43 0b01 	adc.w	fp, r3, r1
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001400:	4692      	mov	sl, r2
 8001402:	469b      	mov	fp, r3
 8001404:	4643      	mov	r3, r8
 8001406:	eb1a 0303 	adds.w	r3, sl, r3
 800140a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800140e:	464b      	mov	r3, r9
 8001410:	eb4b 0303 	adc.w	r3, fp, r3
 8001414:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001424:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800142c:	460b      	mov	r3, r1
 800142e:	18db      	adds	r3, r3, r3
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
 8001432:	4613      	mov	r3, r2
 8001434:	eb42 0303 	adc.w	r3, r2, r3
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
 800143a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800143e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001442:	f7fe fec9 	bl	80001d8 <__aeabi_uldivmod>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4611      	mov	r1, r2
 800144c:	4b3b      	ldr	r3, [pc, #236]	@ (800153c <UART_SetConfig+0x2d4>)
 800144e:	fba3 2301 	umull	r2, r3, r3, r1
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2264      	movs	r2, #100	@ 0x64
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	1acb      	subs	r3, r1, r3
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <UART_SetConfig+0x2d4>)
 8001464:	fba3 2302 	umull	r2, r3, r3, r2
 8001468:	095b      	lsrs	r3, r3, #5
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001470:	441c      	add	r4, r3
 8001472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001476:	2200      	movs	r2, #0
 8001478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800147c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001484:	4642      	mov	r2, r8
 8001486:	464b      	mov	r3, r9
 8001488:	1891      	adds	r1, r2, r2
 800148a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800148c:	415b      	adcs	r3, r3
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001494:	4641      	mov	r1, r8
 8001496:	1851      	adds	r1, r2, r1
 8001498:	6339      	str	r1, [r7, #48]	@ 0x30
 800149a:	4649      	mov	r1, r9
 800149c:	414b      	adcs	r3, r1
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80014ac:	4659      	mov	r1, fp
 80014ae:	00cb      	lsls	r3, r1, #3
 80014b0:	4651      	mov	r1, sl
 80014b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014b6:	4651      	mov	r1, sl
 80014b8:	00ca      	lsls	r2, r1, #3
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	4642      	mov	r2, r8
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014c8:	464b      	mov	r3, r9
 80014ca:	460a      	mov	r2, r1
 80014cc:	eb42 0303 	adc.w	r3, r2, r3
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80014e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80014e8:	460b      	mov	r3, r1
 80014ea:	18db      	adds	r3, r3, r3
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ee:	4613      	mov	r3, r2
 80014f0:	eb42 0303 	adc.w	r3, r2, r3
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014fe:	f7fe fe6b 	bl	80001d8 <__aeabi_uldivmod>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <UART_SetConfig+0x2d4>)
 8001508:	fba3 1302 	umull	r1, r3, r3, r2
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	2164      	movs	r1, #100	@ 0x64
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	3332      	adds	r3, #50	@ 0x32
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <UART_SetConfig+0x2d4>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	f003 0207 	and.w	r2, r3, #7
 8001526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4422      	add	r2, r4
 800152e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001530:	e106      	b.n	8001740 <UART_SetConfig+0x4d8>
 8001532:	bf00      	nop
 8001534:	40011000 	.word	0x40011000
 8001538:	40011400 	.word	0x40011400
 800153c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001544:	2200      	movs	r2, #0
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800154a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800154e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001552:	4642      	mov	r2, r8
 8001554:	464b      	mov	r3, r9
 8001556:	1891      	adds	r1, r2, r2
 8001558:	6239      	str	r1, [r7, #32]
 800155a:	415b      	adcs	r3, r3
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001562:	4641      	mov	r1, r8
 8001564:	1854      	adds	r4, r2, r1
 8001566:	4649      	mov	r1, r9
 8001568:	eb43 0501 	adc.w	r5, r3, r1
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	00eb      	lsls	r3, r5, #3
 8001576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157a:	00e2      	lsls	r2, r4, #3
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	4643      	mov	r3, r8
 8001582:	18e3      	adds	r3, r4, r3
 8001584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001588:	464b      	mov	r3, r9
 800158a:	eb45 0303 	adc.w	r3, r5, r3
 800158e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800159e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ae:	4629      	mov	r1, r5
 80015b0:	008b      	lsls	r3, r1, #2
 80015b2:	4621      	mov	r1, r4
 80015b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015b8:	4621      	mov	r1, r4
 80015ba:	008a      	lsls	r2, r1, #2
 80015bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80015c0:	f7fe fe0a 	bl	80001d8 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4b60      	ldr	r3, [pc, #384]	@ (800174c <UART_SetConfig+0x4e4>)
 80015ca:	fba3 2302 	umull	r2, r3, r3, r2
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	011c      	lsls	r4, r3, #4
 80015d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015e4:	4642      	mov	r2, r8
 80015e6:	464b      	mov	r3, r9
 80015e8:	1891      	adds	r1, r2, r2
 80015ea:	61b9      	str	r1, [r7, #24]
 80015ec:	415b      	adcs	r3, r3
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015f4:	4641      	mov	r1, r8
 80015f6:	1851      	adds	r1, r2, r1
 80015f8:	6139      	str	r1, [r7, #16]
 80015fa:	4649      	mov	r1, r9
 80015fc:	414b      	adcs	r3, r1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800160c:	4659      	mov	r1, fp
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4651      	mov	r1, sl
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4651      	mov	r1, sl
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4642      	mov	r2, r8
 8001622:	189b      	adds	r3, r3, r2
 8001624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001628:	464b      	mov	r3, r9
 800162a:	460a      	mov	r2, r1
 800162c:	eb42 0303 	adc.w	r3, r2, r3
 8001630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800163e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800164c:	4649      	mov	r1, r9
 800164e:	008b      	lsls	r3, r1, #2
 8001650:	4641      	mov	r1, r8
 8001652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001656:	4641      	mov	r1, r8
 8001658:	008a      	lsls	r2, r1, #2
 800165a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800165e:	f7fe fdbb 	bl	80001d8 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4611      	mov	r1, r2
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <UART_SetConfig+0x4e4>)
 800166a:	fba3 2301 	umull	r2, r3, r3, r1
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2264      	movs	r2, #100	@ 0x64
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	3332      	adds	r3, #50	@ 0x32
 800167c:	4a33      	ldr	r2, [pc, #204]	@ (800174c <UART_SetConfig+0x4e4>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001688:	441c      	add	r4, r3
 800168a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800168e:	2200      	movs	r2, #0
 8001690:	673b      	str	r3, [r7, #112]	@ 0x70
 8001692:	677a      	str	r2, [r7, #116]	@ 0x74
 8001694:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001698:	4642      	mov	r2, r8
 800169a:	464b      	mov	r3, r9
 800169c:	1891      	adds	r1, r2, r2
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	415b      	adcs	r3, r3
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a8:	4641      	mov	r1, r8
 80016aa:	1851      	adds	r1, r2, r1
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	4649      	mov	r1, r9
 80016b0:	414b      	adcs	r3, r1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80016c0:	4659      	mov	r1, fp
 80016c2:	00cb      	lsls	r3, r1, #3
 80016c4:	4651      	mov	r1, sl
 80016c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ca:	4651      	mov	r1, sl
 80016cc:	00ca      	lsls	r2, r1, #3
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	4642      	mov	r2, r8
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016da:	464b      	mov	r3, r9
 80016dc:	460a      	mov	r2, r1
 80016de:	eb42 0303 	adc.w	r3, r2, r3
 80016e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80016fc:	4649      	mov	r1, r9
 80016fe:	008b      	lsls	r3, r1, #2
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001706:	4641      	mov	r1, r8
 8001708:	008a      	lsls	r2, r1, #2
 800170a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800170e:	f7fe fd63 	bl	80001d8 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <UART_SetConfig+0x4e4>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	2164      	movs	r1, #100	@ 0x64
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	3332      	adds	r3, #50	@ 0x32
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <UART_SetConfig+0x4e4>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4422      	add	r2, r4
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <__libc_init_array>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4d0d      	ldr	r5, [pc, #52]	@ (8001788 <__libc_init_array+0x38>)
 8001754:	4c0d      	ldr	r4, [pc, #52]	@ (800178c <__libc_init_array+0x3c>)
 8001756:	1b64      	subs	r4, r4, r5
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	2600      	movs	r6, #0
 800175c:	42a6      	cmp	r6, r4
 800175e:	d109      	bne.n	8001774 <__libc_init_array+0x24>
 8001760:	4d0b      	ldr	r5, [pc, #44]	@ (8001790 <__libc_init_array+0x40>)
 8001762:	4c0c      	ldr	r4, [pc, #48]	@ (8001794 <__libc_init_array+0x44>)
 8001764:	f000 f818 	bl	8001798 <_init>
 8001768:	1b64      	subs	r4, r4, r5
 800176a:	10a4      	asrs	r4, r4, #2
 800176c:	2600      	movs	r6, #0
 800176e:	42a6      	cmp	r6, r4
 8001770:	d105      	bne.n	800177e <__libc_init_array+0x2e>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
 8001774:	f855 3b04 	ldr.w	r3, [r5], #4
 8001778:	4798      	blx	r3
 800177a:	3601      	adds	r6, #1
 800177c:	e7ee      	b.n	800175c <__libc_init_array+0xc>
 800177e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001782:	4798      	blx	r3
 8001784:	3601      	adds	r6, #1
 8001786:	e7f2      	b.n	800176e <__libc_init_array+0x1e>
 8001788:	08001838 	.word	0x08001838
 800178c:	08001838 	.word	0x08001838
 8001790:	08001838 	.word	0x08001838
 8001794:	0800183c 	.word	0x0800183c

08001798 <_init>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr

080017a4 <_fini>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	bf00      	nop
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr
