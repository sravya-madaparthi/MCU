
isr_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000570  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000570  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000578  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  0800057c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800057c  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018b5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ec  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000152  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f53  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000225a  00000000  00000000  0001815d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ad4  00000000  00000000  0001a3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ae8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  0009aed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009b48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000558 	.word	0x08000558

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000558 	.word	0x08000558

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <main>:
volatile uint8_t press_count = 0; // To track number of presses

void GPIO_Config(void);
void EXTI9_5_IRQHandler(void);

int main(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    GPIO_Config();  // Initialize GPIO and Interrupts
 800026c:	f000 f802 	bl	8000274 <GPIO_Config>

    while (1) {
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x8>

08000274 <GPIO_Config>:
        // Main loop does nothing; LED control happens in interrupt
    }
}

void GPIO_Config(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // Enable Clocks for GPIOA and GPIOB
    RCC->AHB1ENR |= (1 << 0);  // Enable clock for GPIOA
 8000278:	4b28      	ldr	r3, [pc, #160]	@ (800031c <GPIO_Config+0xa8>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a27      	ldr	r2, [pc, #156]	@ (800031c <GPIO_Config+0xa8>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 1);  // Enable clock for GPIOB
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <GPIO_Config+0xa8>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a24      	ldr	r2, [pc, #144]	@ (800031c <GPIO_Config+0xa8>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1 << 14); // Enable clock for SYSCFG (for EXTI)
 8000290:	4b22      	ldr	r3, [pc, #136]	@ (800031c <GPIO_Config+0xa8>)
 8000292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000294:	4a21      	ldr	r2, [pc, #132]	@ (800031c <GPIO_Config+0xa8>)
 8000296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800029a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure PA7, PA8, PA9 as output (LEDs)
    GPIOA->MODER |= (1 << 14) | (1 << 16) | (1 << 18);  // Set PA7, PA8, PA9 as output
 800029c:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <GPIO_Config+0xac>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000320 <GPIO_Config+0xac>)
 80002a2:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~((1 << 15) | (1 << 17) | (1 << 19)); // Keep second bit 0
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <GPIO_Config+0xac>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000320 <GPIO_Config+0xac>)
 80002ae:	f423 2328 	bic.w	r3, r3, #688128	@ 0xa8000
 80002b2:	6013      	str	r3, [r2, #0]

    // Configure PB8 as input (Switch)
    GPIOB->MODER &= ~(3 << 16); // PB8 as input
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <GPIO_Config+0xb0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000324 <GPIO_Config+0xb0>)
 80002ba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002be:	6013      	str	r3, [r2, #0]

    // Enable Pull-up for PB8 (Since button connects to GND when pressed)
    GPIOB->PUPDR |= (1 << 16);
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <GPIO_Config+0xb0>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a17      	ldr	r2, [pc, #92]	@ (8000324 <GPIO_Config+0xb0>)
 80002c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002ca:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~(1 << 17);
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <GPIO_Config+0xb0>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <GPIO_Config+0xb0>)
 80002d2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80002d6:	60d3      	str	r3, [r2, #12]

    // Configure EXTI for PB8
    SYSCFG->EXTICR[2] |= (1 << 0); // EXTI8 mapped to PB
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <GPIO_Config+0xb4>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <GPIO_Config+0xb4>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6113      	str	r3, [r2, #16]

    EXTI->IMR |= (1 << 8);  // Enable EXTI8
 80002e4:	4b11      	ldr	r3, [pc, #68]	@ (800032c <GPIO_Config+0xb8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a10      	ldr	r2, [pc, #64]	@ (800032c <GPIO_Config+0xb8>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ee:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 8); // Rising edge trigger (Button Released)
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <GPIO_Config+0xb8>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <GPIO_Config+0xb8>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fa:	6093      	str	r3, [r2, #8]
    EXTI->FTSR |= (1 << 8); // Falling edge trigger (Button Pressed)
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <GPIO_Config+0xb8>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <GPIO_Config+0xb8>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000306:	60d3      	str	r3, [r2, #12]

    // Enable EXTI9_5 interrupt in NVIC
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000308:	2017      	movs	r0, #23
 800030a:	f7ff ff65 	bl	80001d8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI9_5_IRQn, 2);
 800030e:	2102      	movs	r1, #2
 8000310:	2017      	movs	r0, #23
 8000312:	f7ff ff7f 	bl	8000214 <__NVIC_SetPriority>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020000 	.word	0x40020000
 8000324:	40020400 	.word	0x40020400
 8000328:	40013800 	.word	0x40013800
 800032c:	40013c00 	.word	0x40013c00

08000330 <EXTI9_5_IRQHandler>:

// Interrupt handler for EXTI Line 9-5
void EXTI9_5_IRQHandler(void) {
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 50000; i++); // Simple debounce delay
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e002      	b.n	8000342 <EXTI9_5_IRQHandler+0x12>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000348:	4293      	cmp	r3, r2
 800034a:	ddf7      	ble.n	800033c <EXTI9_5_IRQHandler+0xc>

    if (EXTI->PR & (1 << 8)) { // Check if interrupt was caused by PB8
 800034c:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <EXTI9_5_IRQHandler+0xcc>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000354:	2b00      	cmp	r3, #0
 8000356:	d04b      	beq.n	80003f0 <EXTI9_5_IRQHandler+0xc0>
        if (!(GPIOB->IDR & (1 << 8))) { // Button Press Detected (Falling Edge)
 8000358:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <EXTI9_5_IRQHandler+0xd0>)
 800035a:	691b      	ldr	r3, [r3, #16]
 800035c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000360:	2b00      	cmp	r3, #0
 8000362:	d139      	bne.n	80003d8 <EXTI9_5_IRQHandler+0xa8>
            press_count = (press_count % 3) + 1; // Cycle through 1, 2, 3
 8000364:	4b27      	ldr	r3, [pc, #156]	@ (8000404 <EXTI9_5_IRQHandler+0xd4>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b27      	ldr	r3, [pc, #156]	@ (8000408 <EXTI9_5_IRQHandler+0xd8>)
 800036c:	fba3 1302 	umull	r1, r3, r3, r2
 8000370:	0859      	lsrs	r1, r3, #1
 8000372:	460b      	mov	r3, r1
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	440b      	add	r3, r1
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	b2db      	uxtb	r3, r3
 800037c:	3301      	adds	r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <EXTI9_5_IRQHandler+0xd4>)
 8000382:	701a      	strb	r2, [r3, #0]

            // Turn off all LEDs first
            GPIOA->BSRR |= (1 << (7 + 16)) | (1 << (8 + 16)) | (1 << (9 + 16));
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a20      	ldr	r2, [pc, #128]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 800038a:	f043 7360 	orr.w	r3, r3, #58720256	@ 0x3800000
 800038e:	6193      	str	r3, [r2, #24]

            // Turn on LED based on press count
            if (press_count == 1) {
 8000390:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <EXTI9_5_IRQHandler+0xd4>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b01      	cmp	r3, #1
 8000398:	d106      	bne.n	80003a8 <EXTI9_5_IRQHandler+0x78>
                GPIOA->BSRR |= (1 << 7); // Turn on LED1 (PA7)
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a1b      	ldr	r2, [pc, #108]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	e01d      	b.n	80003e4 <EXTI9_5_IRQHandler+0xb4>
            } else if (press_count == 2) {
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <EXTI9_5_IRQHandler+0xd4>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d106      	bne.n	80003c0 <EXTI9_5_IRQHandler+0x90>
                GPIOA->BSRR |= (1 << 8); // Turn on LED2 (PA8)
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a15      	ldr	r2, [pc, #84]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	e011      	b.n	80003e4 <EXTI9_5_IRQHandler+0xb4>
            } else if (press_count == 3) {
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <EXTI9_5_IRQHandler+0xd4>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d10c      	bne.n	80003e4 <EXTI9_5_IRQHandler+0xb4>
                GPIOA->BSRR |= (1 << 9); // Turn on LED3 (PA9)
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	e005      	b.n	80003e4 <EXTI9_5_IRQHandler+0xb4>
            }
        } else { // Button Released (Rising Edge)
            GPIOA->BSRR |= (1 << (7 + 16)) | (1 << (8 + 16)) | (1 << (9 + 16)); // Turn OFF all LEDs
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0b      	ldr	r2, [pc, #44]	@ (800040c <EXTI9_5_IRQHandler+0xdc>)
 80003de:	f043 7360 	orr.w	r3, r3, #58720256	@ 0x3800000
 80003e2:	6193      	str	r3, [r2, #24]
        }

        EXTI->PR |= (1 << 8); // Clear EXTI8 flag
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <EXTI9_5_IRQHandler+0xcc>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <EXTI9_5_IRQHandler+0xcc>)
 80003ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ee:	6153      	str	r3, [r2, #20]
    }
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40013c00 	.word	0x40013c00
 8000400:	40020400 	.word	0x40020400
 8000404:	20000020 	.word	0x20000020
 8000408:	aaaaaaab 	.word	0xaaaaaaab
 800040c:	40020000 	.word	0x40020000

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <NMI_Handler+0x4>

08000418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <HardFault_Handler+0x4>

08000420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <MemManage_Handler+0x4>

08000428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <UsageFault_Handler+0x4>

08000438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000466:	f000 f83f 	bl	80004e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <SystemInit+0x20>)
 8000476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800047a:	4a05      	ldr	r2, [pc, #20]	@ (8000490 <SystemInit+0x20>)
 800047c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000498:	f7ff ffea 	bl	8000470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800049e:	490d      	ldr	r1, [pc, #52]	@ (80004d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b4:	4c0a      	ldr	r4, [pc, #40]	@ (80004e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004c2:	f000 f825 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c6:	f7ff fecf 	bl	8000268 <main>
  bx  lr    
 80004ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004d8:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 80004dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004e0:	20000028 	.word	0x20000028

080004e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC_IRQHandler>
	...

080004e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_IncTick+0x20>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_IncTick+0x24>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	4a04      	ldr	r2, [pc, #16]	@ (800050c <HAL_IncTick+0x24>)
 80004fa:	6013      	str	r3, [r2, #0]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	20000024 	.word	0x20000024

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	4d0d      	ldr	r5, [pc, #52]	@ (8000548 <__libc_init_array+0x38>)
 8000514:	4c0d      	ldr	r4, [pc, #52]	@ (800054c <__libc_init_array+0x3c>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	2600      	movs	r6, #0
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	4d0b      	ldr	r5, [pc, #44]	@ (8000550 <__libc_init_array+0x40>)
 8000522:	4c0c      	ldr	r4, [pc, #48]	@ (8000554 <__libc_init_array+0x44>)
 8000524:	f000 f818 	bl	8000558 <_init>
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	2600      	movs	r6, #0
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
