
isr_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000574  08000574  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000574  08000574  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000574  08000574  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000574  08000574  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800057c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000580  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000580  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018a3  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d9  00000000  00000000  000038d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000152  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f53  00000000  00000000  000041e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000226f  00000000  00000000  00018135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ac8  00000000  00000000  0001a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ae6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  0009aeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009b46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800055c 	.word	0x0800055c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800055c 	.word	0x0800055c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <main>:
#include "stm32f4xx.h"  // Modify as per your STM32 series

void GPIO_Config(void);
void EXTI9_5_IRQHandler(void);

int main(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    GPIO_Config();  // Configure GPIO and Interrupts
 800026c:	f000 f802 	bl	8000274 <GPIO_Config>

    while (1) {
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x8>

08000274 <GPIO_Config>:
        // Main loop does nothing; LED control happens in interrupt
    }
}

void GPIO_Config(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // Enable Clocks for GPIOA, GPIOB, and GPIOC
    RCC->AHB1ENR |= (1 << 0);  // Enable clock for GPIOA
 8000278:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_Config+0xe4>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_Config+0xe4>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 1);  // Enable clock for GPIOB
 8000284:	4b34      	ldr	r3, [pc, #208]	@ (8000358 <GPIO_Config+0xe4>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a33      	ldr	r2, [pc, #204]	@ (8000358 <GPIO_Config+0xe4>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 2);  // Enable clock for GPIOC
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_Config+0xe4>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_Config+0xe4>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1 << 14); // Enable clock for SYSCFG (for EXTI)
 800029c:	4b2e      	ldr	r3, [pc, #184]	@ (8000358 <GPIO_Config+0xe4>)
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000358 <GPIO_Config+0xe4>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002a6:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure PA7, PA8, PA9 as output (LEDs)
    GPIOA->MODER |= (1 << 14) | (1 << 16) | (1 << 18);  // Set PA7, PA8, PA9 as output
 80002a8:	4b2c      	ldr	r3, [pc, #176]	@ (800035c <GPIO_Config+0xe8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2b      	ldr	r2, [pc, #172]	@ (800035c <GPIO_Config+0xe8>)
 80002ae:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~((1 << 15) | (1 << 17) | (1 << 19)); // Keep second bit of each pair 0
 80002b4:	4b29      	ldr	r3, [pc, #164]	@ (800035c <GPIO_Config+0xe8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a28      	ldr	r2, [pc, #160]	@ (800035c <GPIO_Config+0xe8>)
 80002ba:	f423 2328 	bic.w	r3, r3, #688128	@ 0xa8000
 80002be:	6013      	str	r3, [r2, #0]

    // Configure PB8, PB9, PC9 as input (Switches)
    GPIOB->MODER &= ~(3 << 16); // PB8 as input
 80002c0:	4b27      	ldr	r3, [pc, #156]	@ (8000360 <GPIO_Config+0xec>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a26      	ldr	r2, [pc, #152]	@ (8000360 <GPIO_Config+0xec>)
 80002c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(3 << 18); // PB9 as input
 80002cc:	4b24      	ldr	r3, [pc, #144]	@ (8000360 <GPIO_Config+0xec>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a23      	ldr	r2, [pc, #140]	@ (8000360 <GPIO_Config+0xec>)
 80002d2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002d6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(3 << 18); // PC9 as input
 80002d8:	4b22      	ldr	r3, [pc, #136]	@ (8000364 <GPIO_Config+0xf0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a21      	ldr	r2, [pc, #132]	@ (8000364 <GPIO_Config+0xf0>)
 80002de:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002e2:	6013      	str	r3, [r2, #0]

    // Enable Pull-up for PB8, PB9, PC9
    GPIOB->PUPDR |= (1 << 16) | (1 << 18); // PB8, PB9 pull-up
 80002e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000360 <GPIO_Config+0xec>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000360 <GPIO_Config+0xec>)
 80002ea:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80002ee:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~((1 << 17) | (1 << 19)); // Keep second bit 0
 80002f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <GPIO_Config+0xec>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000360 <GPIO_Config+0xec>)
 80002f6:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 80002fa:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << 18); // PC9 pull-up
 80002fc:	4b19      	ldr	r3, [pc, #100]	@ (8000364 <GPIO_Config+0xf0>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a18      	ldr	r2, [pc, #96]	@ (8000364 <GPIO_Config+0xf0>)
 8000302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000306:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR &= ~(1 << 19);
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <GPIO_Config+0xf0>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a15      	ldr	r2, [pc, #84]	@ (8000364 <GPIO_Config+0xf0>)
 800030e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000312:	60d3      	str	r3, [r2, #12]

    // Configure EXTI for PB8, PB9, PC9
    SYSCFG->EXTICR[2] |= (1 << 0) | (1 << 4); // EXTI8, EXTI9 mapped to PB
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <GPIO_Config+0xf4>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <GPIO_Config+0xf4>)
 800031a:	f043 0311 	orr.w	r3, r3, #17
 800031e:	6113      	str	r3, [r2, #16]
    SYSCFG->EXTICR[2] |= (2 << 4); // EXTI9 also mapped to PC for PC9
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <GPIO_Config+0xf4>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <GPIO_Config+0xf4>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6113      	str	r3, [r2, #16]

    EXTI->IMR |= (1 << 8) | (1 << 9); // Enable EXTI8, EXTI9
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <GPIO_Config+0xf8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0e      	ldr	r2, [pc, #56]	@ (800036c <GPIO_Config+0xf8>)
 8000332:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000336:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 8) | (1 << 9); // Falling edge trigger for PB8, PB9
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <GPIO_Config+0xf8>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a0b      	ldr	r2, [pc, #44]	@ (800036c <GPIO_Config+0xf8>)
 800033e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000342:	60d3      	str	r3, [r2, #12]

    // Enable EXTI9_5 interrupt in NVIC
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000344:	2017      	movs	r0, #23
 8000346:	f7ff ff47 	bl	80001d8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI9_5_IRQn, 2);
 800034a:	2102      	movs	r1, #2
 800034c:	2017      	movs	r0, #23
 800034e:	f7ff ff61 	bl	8000214 <__NVIC_SetPriority>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40020400 	.word	0x40020400
 8000364:	40020800 	.word	0x40020800
 8000368:	40013800 	.word	0x40013800
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI9_5_IRQHandler>:

// Interrupt handler for EXTI Line 9-5
void EXTI9_5_IRQHandler(void) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 50000; i++); // Simple debounce delay
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	e002      	b.n	8000382 <EXTI9_5_IRQHandler+0x12>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000388:	4293      	cmp	r3, r2
 800038a:	ddf7      	ble.n	800037c <EXTI9_5_IRQHandler+0xc>

    if (!(GPIOB->IDR & (1 << 8))) { // Check PB8 (Switch 1)
 800038c:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <EXTI9_5_IRQHandler+0x94>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000394:	2b00      	cmp	r3, #0
 8000396:	d10b      	bne.n	80003b0 <EXTI9_5_IRQHandler+0x40>
        GPIOA->BSRR |= (1 << 7); // Turn on LED1 (PA7)
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1a      	ldr	r2, [pc, #104]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003a2:	6193      	str	r3, [r2, #24]
        EXTI->PR |= (1 << 8); // Clear EXTI8 flag
 80003a4:	4b19      	ldr	r3, [pc, #100]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a18      	ldr	r2, [pc, #96]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ae:	6153      	str	r3, [r2, #20]
    }

    if (!(GPIOB->IDR & (1 << 9))) { // Check PB9 (Switch 2)
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <EXTI9_5_IRQHandler+0x94>)
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d10b      	bne.n	80003d4 <EXTI9_5_IRQHandler+0x64>
        GPIOA->BSRR |= (1 << 7) | (1 << 8); // Turn on LED1 (PA7) and LED2 (PA8)
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 80003c2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80003c6:	6193      	str	r3, [r2, #24]
        EXTI->PR |= (1 << 9); // Clear EXTI9 flag
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003d2:	6153      	str	r3, [r2, #20]
    }

    if (!(GPIOC->IDR & (1 << 9))) { // Check PC9 (Switch 3)
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d10b      	bne.n	80003f8 <EXTI9_5_IRQHandler+0x88>
        GPIOA->BSRR |= (1 << 7) | (1 << 8) | (1 << 9); // Turn on LED1, LED2, and LED3
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <EXTI9_5_IRQHandler+0x98>)
 80003e6:	f443 7360 	orr.w	r3, r3, #896	@ 0x380
 80003ea:	6193      	str	r3, [r2, #24]
        EXTI->PR |= (1 << 9); // Clear EXTI9 flag
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a06      	ldr	r2, [pc, #24]	@ (800040c <EXTI9_5_IRQHandler+0x9c>)
 80003f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003f6:	6153      	str	r3, [r2, #20]
    }
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40020400 	.word	0x40020400
 8000408:	40020000 	.word	0x40020000
 800040c:	40013c00 	.word	0x40013c00
 8000410:	40020800 	.word	0x40020800

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <NMI_Handler+0x4>

0800041c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <MemManage_Handler+0x4>

0800042c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <UsageFault_Handler+0x4>

0800043c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046a:	f000 f83f 	bl	80004ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <SystemInit+0x20>)
 800047a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <SystemInit+0x20>)
 8000480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800049c:	f7ff ffea 	bl	8000474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	@ (80004e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004c6:	f000 f825 	bl	8000514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ca:	f7ff fecd 	bl	8000268 <main>
  bx  lr    
 80004ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004dc:	0800057c 	.word	0x0800057c
  ldr r2, =_sbss
 80004e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004e4:	20000024 	.word	0x20000024

080004e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_IncTick+0x20>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_IncTick+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <HAL_IncTick+0x24>)
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000000 	.word	0x20000000
 8000510:	20000020 	.word	0x20000020

08000514 <__libc_init_array>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	4d0d      	ldr	r5, [pc, #52]	@ (800054c <__libc_init_array+0x38>)
 8000518:	4c0d      	ldr	r4, [pc, #52]	@ (8000550 <__libc_init_array+0x3c>)
 800051a:	1b64      	subs	r4, r4, r5
 800051c:	10a4      	asrs	r4, r4, #2
 800051e:	2600      	movs	r6, #0
 8000520:	42a6      	cmp	r6, r4
 8000522:	d109      	bne.n	8000538 <__libc_init_array+0x24>
 8000524:	4d0b      	ldr	r5, [pc, #44]	@ (8000554 <__libc_init_array+0x40>)
 8000526:	4c0c      	ldr	r4, [pc, #48]	@ (8000558 <__libc_init_array+0x44>)
 8000528:	f000 f818 	bl	800055c <_init>
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	10a4      	asrs	r4, r4, #2
 8000530:	2600      	movs	r6, #0
 8000532:	42a6      	cmp	r6, r4
 8000534:	d105      	bne.n	8000542 <__libc_init_array+0x2e>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	f855 3b04 	ldr.w	r3, [r5], #4
 800053c:	4798      	blx	r3
 800053e:	3601      	adds	r6, #1
 8000540:	e7ee      	b.n	8000520 <__libc_init_array+0xc>
 8000542:	f855 3b04 	ldr.w	r3, [r5], #4
 8000546:	4798      	blx	r3
 8000548:	3601      	adds	r6, #1
 800054a:	e7f2      	b.n	8000532 <__libc_init_array+0x1e>
 800054c:	08000574 	.word	0x08000574
 8000550:	08000574 	.word	0x08000574
 8000554:	08000574 	.word	0x08000574
 8000558:	08000578 	.word	0x08000578

0800055c <_init>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr

08000568 <_fini>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr
