
isr_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  0800046c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  0800046c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000470  08000470  00001470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000474  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000478  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000478  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012b4  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000525  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000145  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f53  00000000  00000000  00003b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021d4  00000000  00000000  00017a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a4f  00000000  00000000  00019c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a69b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  0009a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000454 	.word	0x08000454

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000454 	.word	0x08000454

080001d8 <main>:
void delay_ms(uint32_t ms);
void GPIO_Config(void);

volatile uint8_t press_count = 0;

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    GPIO_Config();
 80001dc:	f000 f846 	bl	800026c <GPIO_Config>

    while (1) {
        if ((GPIOB->IDR & GPIO_IDR_ID8) == 0) {  // Check if PB8 is pressed (Active LOW)
 80001e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000260 <main+0x88>)
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d1f9      	bne.n	80001e0 <main+0x8>
            delay_ms(50);  // Debounce delay
 80001ec:	2032      	movs	r0, #50	@ 0x32
 80001ee:	f000 f875 	bl	80002dc <delay_ms>

            while ((GPIOB->IDR & GPIO_IDR_ID8) == 0);  // Wait until button is released
 80001f2:	bf00      	nop
 80001f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000260 <main+0x88>)
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f9      	beq.n	80001f4 <main+0x1c>
            delay_ms(50);  // Additional debounce delay
 8000200:	2032      	movs	r0, #50	@ 0x32
 8000202:	f000 f86b 	bl	80002dc <delay_ms>

            press_count++;
 8000206:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <main+0x8c>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	3301      	adds	r3, #1
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b14      	ldr	r3, [pc, #80]	@ (8000264 <main+0x8c>)
 8000212:	701a      	strb	r2, [r3, #0]
            if (press_count > 3) press_count = 1;  // Reset to first LED after 3 presses
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <main+0x8c>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b03      	cmp	r3, #3
 800021c:	d902      	bls.n	8000224 <main+0x4c>
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <main+0x8c>)
 8000220:	2201      	movs	r2, #1
 8000222:	701a      	strb	r2, [r3, #0]

            // Control LEDs based on button press count
            if (press_count == 1) {
 8000224:	4b0f      	ldr	r3, [pc, #60]	@ (8000264 <main+0x8c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b01      	cmp	r3, #1
 800022c:	d103      	bne.n	8000236 <main+0x5e>
                GPIOA->ODR = (1 << 7);  // Turn on LED1 (PA7), turn off others
 800022e:	4b0e      	ldr	r3, [pc, #56]	@ (8000268 <main+0x90>)
 8000230:	2280      	movs	r2, #128	@ 0x80
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	e7d4      	b.n	80001e0 <main+0x8>
            } else if (press_count == 2) {
 8000236:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <main+0x8c>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b02      	cmp	r3, #2
 800023e:	d104      	bne.n	800024a <main+0x72>
                GPIOA->ODR = (1 << 8);  // Turn on LED2 (PA8)
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <main+0x90>)
 8000242:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000246:	615a      	str	r2, [r3, #20]
 8000248:	e7ca      	b.n	80001e0 <main+0x8>
            } else if (press_count == 3) {
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <main+0x8c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b03      	cmp	r3, #3
 8000252:	d1c5      	bne.n	80001e0 <main+0x8>
                GPIOA->ODR = (1 << 9);  // Turn on LED3 (PA9)
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <main+0x90>)
 8000256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800025a:	615a      	str	r2, [r3, #20]
        if ((GPIOB->IDR & GPIO_IDR_ID8) == 0) {  // Check if PB8 is pressed (Active LOW)
 800025c:	e7c0      	b.n	80001e0 <main+0x8>
 800025e:	bf00      	nop
 8000260:	40020400 	.word	0x40020400
 8000264:	20000020 	.word	0x20000020
 8000268:	40020000 	.word	0x40020000

0800026c <GPIO_Config>:
            }
        }
    }
}

void GPIO_Config(void) {
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <GPIO_Config+0x64>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	@ (80002d0 <GPIO_Config+0x64>)
 8000276:	f043 0303 	orr.w	r3, r3, #3
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA7, PA8, PA9 as output (LEDs)
    GPIOA->MODER |= (1 << (7 * 2)) | (1 << (8 * 2)) | (1 << (9 * 2));  // Output mode
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <GPIO_Config+0x68>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a14      	ldr	r2, [pc, #80]	@ (80002d4 <GPIO_Config+0x68>)
 8000282:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 8000286:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 7) | (1 << 8) | (1 << 9)); // Push-pull
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <GPIO_Config+0x68>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <GPIO_Config+0x68>)
 800028e:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8000292:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (7 * 2)) | (3 << (8 * 2)) | (3 << (9 * 2)); // High speed
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <GPIO_Config+0x68>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <GPIO_Config+0x68>)
 800029a:	f443 237c 	orr.w	r3, r3, #1032192	@ 0xfc000
 800029e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3 << (7 * 2)) | (3 << (8 * 2)) | (3 << (9 * 2))); // No pull-up/pull-down
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <GPIO_Config+0x68>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <GPIO_Config+0x68>)
 80002a6:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80002aa:	60d3      	str	r3, [r2, #12]

    // Configure PB8 as input (Switch)
    GPIOB->MODER &= ~(3 << (8 * 2));  // Input mode
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <GPIO_Config+0x6c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a09      	ldr	r2, [pc, #36]	@ (80002d8 <GPIO_Config+0x6c>)
 80002b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002b6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (1 << (8 * 2));   // Enable pull-up resistor (for stable input)
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <GPIO_Config+0x6c>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a06      	ldr	r2, [pc, #24]	@ (80002d8 <GPIO_Config+0x6c>)
 80002be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40020400 	.word	0x40020400

080002dc <delay_ms>:

void delay_ms(uint32_t ms) {
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < (ms * 4000); i++); // Approximate delay for STM32 (depends on clock speed)
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e002      	b.n	80002f0 <delay_ms+0x14>
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3f4      	bcc.n	80002ea <delay_ms+0xe>
}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <NMI_Handler+0x4>

08000316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800031a:	bf00      	nop
 800031c:	e7fd      	b.n	800031a <HardFault_Handler+0x4>

0800031e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000322:	bf00      	nop
 8000324:	e7fd      	b.n	8000322 <MemManage_Handler+0x4>

08000326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032a:	bf00      	nop
 800032c:	e7fd      	b.n	800032a <BusFault_Handler+0x4>

0800032e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000332:	bf00      	nop
 8000334:	e7fd      	b.n	8000332 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 f83e 	bl	80003e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <SystemInit+0x20>)
 8000372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000376:	4a05      	ldr	r2, [pc, #20]	@ (800038c <SystemInit+0x20>)
 8000378:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800037c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000394:	f7ff ffea 	bl	800036c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f000 f825 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f7ff ff09 	bl	80001d8 <main>
  bx  lr    
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d4:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 80003d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003dc:	20000028 	.word	0x20000028

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <HAL_IncTick+0x20>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <HAL_IncTick+0x24>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <HAL_IncTick+0x24>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000000 	.word	0x20000000
 8000408:	20000024 	.word	0x20000024

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	@ (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	@ (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	@ (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	@ (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
