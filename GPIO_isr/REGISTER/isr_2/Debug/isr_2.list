
isr_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000524  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000528  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000528  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018b5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ec  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000152  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f53  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002236  00000000  00000000  0001815d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ad2  00000000  00000000  0001a393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ae65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  0009aea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009b464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000504 	.word	0x08000504

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000504 	.word	0x08000504

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <main>:
void GPIO_Config(void);
void EXTI9_5_IRQHandler(void);

volatile uint8_t led_state = 0; // Variable to track LED state

int main(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    GPIO_Config();  // Configure GPIO and Interrupt
 800026c:	f000 f802 	bl	8000274 <GPIO_Config>

    while (1) {
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x8>

08000274 <GPIO_Config>:
        // Main loop does nothing; LED control happens in interrupt
    }
}

void GPIO_Config(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // Enable Clocks for GPIOC and GPIOA
    RCC->AHB1ENR |= (1 << 2);  // Enable clock for GPIOC
 8000278:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <GPIO_Config+0x9c>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a24      	ldr	r2, [pc, #144]	@ (8000310 <GPIO_Config+0x9c>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 0);  // Enable clock for GPIOA
 8000284:	4b22      	ldr	r3, [pc, #136]	@ (8000310 <GPIO_Config+0x9c>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a21      	ldr	r2, [pc, #132]	@ (8000310 <GPIO_Config+0x9c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1 << 14); // Enable clock for SYSCFG (for EXTI)
 8000290:	4b1f      	ldr	r3, [pc, #124]	@ (8000310 <GPIO_Config+0x9c>)
 8000292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000294:	4a1e      	ldr	r2, [pc, #120]	@ (8000310 <GPIO_Config+0x9c>)
 8000296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800029a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure PA8 as output (LED)
    GPIOA->MODER |= (1 << 16);  // Set PA8 as output (MODER8[1:0] = 01)
 800029c:	4b1d      	ldr	r3, [pc, #116]	@ (8000314 <GPIO_Config+0xa0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000314 <GPIO_Config+0xa0>)
 80002a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 17); // Keep the second bit 0
 80002a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <GPIO_Config+0xa0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a19      	ldr	r2, [pc, #100]	@ (8000314 <GPIO_Config+0xa0>)
 80002ae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80002b2:	6013      	str	r3, [r2, #0]

    // Configure PC9 as input (Button)
    GPIOC->MODER &= ~(3 << 18); // Clear bits (MODER9[1:0] = 00 for input)
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <GPIO_Config+0xa4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a17      	ldr	r2, [pc, #92]	@ (8000318 <GPIO_Config+0xa4>)
 80002ba:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002be:	6013      	str	r3, [r2, #0]

    // Enable Pull-up for PC9
    GPIOC->PUPDR |= (1 << 18);  // Set PC9 as PULL-UP (PUPDR9[1:0] = 01)
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <GPIO_Config+0xa4>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a14      	ldr	r2, [pc, #80]	@ (8000318 <GPIO_Config+0xa4>)
 80002c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ca:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR &= ~(1 << 19); // Keep the second bit 0
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <GPIO_Config+0xa4>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a11      	ldr	r2, [pc, #68]	@ (8000318 <GPIO_Config+0xa4>)
 80002d2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002d6:	60d3      	str	r3, [r2, #12]

    // Configure EXTI for PC9
    SYSCFG->EXTICR[2] |= (2 << 4); // Map EXTI9 to GPIOC
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <GPIO_Config+0xa8>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <GPIO_Config+0xa8>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6113      	str	r3, [r2, #16]
    EXTI->IMR |= (1 << 9);         // Enable EXTI9 interrupt
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <GPIO_Config+0xac>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <GPIO_Config+0xac>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ee:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 9);        // Trigger on Falling Edge (Button Press)
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <GPIO_Config+0xac>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <GPIO_Config+0xac>)
 80002f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002fa:	60d3      	str	r3, [r2, #12]

    // Enable EXTI9_5 interrupt in NVIC
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002fc:	2017      	movs	r0, #23
 80002fe:	f7ff ff6b 	bl	80001d8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI9_5_IRQn, 2);
 8000302:	2102      	movs	r1, #2
 8000304:	2017      	movs	r0, #23
 8000306:	f7ff ff85 	bl	8000214 <__NVIC_SetPriority>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40020000 	.word	0x40020000
 8000318:	40020800 	.word	0x40020800
 800031c:	40013800 	.word	0x40013800
 8000320:	40013c00 	.word	0x40013c00

08000324 <EXTI9_5_IRQHandler>:

// Interrupt handler for EXTI Line 9 (PC9)
void EXTI9_5_IRQHandler(void) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 9)) {  // Check if EXTI9 is triggered
 800032a:	4b20      	ldr	r3, [pc, #128]	@ (80003ac <EXTI9_5_IRQHandler+0x88>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000332:	2b00      	cmp	r3, #0
 8000334:	d033      	beq.n	800039e <EXTI9_5_IRQHandler+0x7a>
        for (volatile int i = 0; i < 50000; i++); // Simple debounce delay
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e002      	b.n	8000342 <EXTI9_5_IRQHandler+0x1e>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000348:	4293      	cmp	r3, r2
 800034a:	ddf7      	ble.n	800033c <EXTI9_5_IRQHandler+0x18>

        if (!(GPIOC->IDR & (1 << 9))) { // Confirm button is still pressed
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <EXTI9_5_IRQHandler+0x8c>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000354:	2b00      	cmp	r3, #0
 8000356:	d11c      	bne.n	8000392 <EXTI9_5_IRQHandler+0x6e>
            led_state = !led_state; // Toggle LED state
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <EXTI9_5_IRQHandler+0x90>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf0c      	ite	eq
 8000362:	2301      	moveq	r3, #1
 8000364:	2300      	movne	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <EXTI9_5_IRQHandler+0x90>)
 800036c:	701a      	strb	r2, [r3, #0]
            if (led_state) {
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <EXTI9_5_IRQHandler+0x90>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d006      	beq.n	8000386 <EXTI9_5_IRQHandler+0x62>
                GPIOA->BSRR |= (1 << 8);  // Turn ON LED
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <EXTI9_5_IRQHandler+0x94>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <EXTI9_5_IRQHandler+0x94>)
 800037e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	e005      	b.n	8000392 <EXTI9_5_IRQHandler+0x6e>
            } else {
                GPIOA->BSRR |= (1 << 24); // Turn OFF LED
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <EXTI9_5_IRQHandler+0x94>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0b      	ldr	r2, [pc, #44]	@ (80003b8 <EXTI9_5_IRQHandler+0x94>)
 800038c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000390:	6193      	str	r3, [r2, #24]
            }
        }

        EXTI->PR |= (1 << 9);  // Clear the interrupt flag
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <EXTI9_5_IRQHandler+0x88>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a05      	ldr	r2, [pc, #20]	@ (80003ac <EXTI9_5_IRQHandler+0x88>)
 8000398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800039c:	6153      	str	r3, [r2, #20]
    }
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40013c00 	.word	0x40013c00
 80003b0:	40020800 	.word	0x40020800
 80003b4:	20000020 	.word	0x20000020
 80003b8:	40020000 	.word	0x40020000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <NMI_Handler+0x4>

080003c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <HardFault_Handler+0x4>

080003cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <MemManage_Handler+0x4>

080003d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f83f 	bl	8000494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <SystemInit+0x20>)
 8000422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000426:	4a05      	ldr	r2, [pc, #20]	@ (800043c <SystemInit+0x20>)
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000444:	f7ff ffea 	bl	800041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046e:	f000 f825 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000472:	f7ff fef9 	bl	8000268 <main>
  bx  lr    
 8000476:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000484:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 8000488:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800048c:	20000028 	.word	0x20000028

08000490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC_IRQHandler>
	...

08000494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_IncTick+0x20>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000024 	.word	0x20000024

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	4d0d      	ldr	r5, [pc, #52]	@ (80004f4 <__libc_init_array+0x38>)
 80004c0:	4c0d      	ldr	r4, [pc, #52]	@ (80004f8 <__libc_init_array+0x3c>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	2600      	movs	r6, #0
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	4d0b      	ldr	r5, [pc, #44]	@ (80004fc <__libc_init_array+0x40>)
 80004ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000500 <__libc_init_array+0x44>)
 80004d0:	f000 f818 	bl	8000504 <_init>
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	2600      	movs	r6, #0
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
