
isr_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000198c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001b2c  08001b2c  00002b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b98  08001b98  00003068  2**0
                  CONTENTS
  4 .ARM          00000008  08001b98  08001b98  00002b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ba0  08001ba0  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba0  08001ba0  00002ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ba4  08001ba4  00002ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001ba8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001c10  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001c10  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003579  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e44  00000000  00000000  00006611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00007458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000316  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015be3  00000000  00000000  00007bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005059  00000000  00000000  0001d7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849c5  00000000  00000000  00022802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a71c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e0  00000000  00000000  000a720c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000a88ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b14 	.word	0x08001b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001b14 	.word	0x08001b14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void SystemClock_Config(void);
void GPIO_Init(void);
void reset_leds(void);

int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    HAL_Init();
 8000284:	f000 fa00 	bl	8000688 <HAL_Init>

    GPIO_Init();
 8000288:	f000 f802 	bl	8000290 <GPIO_Init>

    while (1) {
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0xc>

08000290 <GPIO_Init>:
        // Main loop does nothing, everything is handled in the interrupt
    }
}

void GPIO_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA clock
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <GPIO_Init+0xa0>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a24      	ldr	r2, [pc, #144]	@ (8000330 <GPIO_Init+0xa0>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002a6:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <GPIO_Init+0xa0>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable GPIOB clock
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <GPIO_Init+0xa0>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000330 <GPIO_Init+0xa0>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <GPIO_Init+0xa0>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

    // Configure PA7, PA8, PA9 as Output (LEDs)
    GPIO_InitStruct.Pin = LED1_PIN | LED2_PIN | LED3_PIN;
 80002de:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80002e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	4619      	mov	r1, r3
 80002f6:	480f      	ldr	r0, [pc, #60]	@ (8000334 <GPIO_Init+0xa4>)
 80002f8:	f000 fb3e 	bl	8000978 <HAL_GPIO_Init>

    // Configure PB8 as Input (Switch) with Interrupt
    GPIO_InitStruct.Pin = SWITCH_PIN;
 80002fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 8000302:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // Enable pull-up resistor
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SWITCH_PORT, &GPIO_InitStruct);
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	4619      	mov	r1, r3
 8000312:	4809      	ldr	r0, [pc, #36]	@ (8000338 <GPIO_Init+0xa8>)
 8000314:	f000 fb30 	bl	8000978 <HAL_GPIO_Init>

    // Enable EXTI Interrupt for PB8
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	2017      	movs	r0, #23
 800031e:	f000 faf4 	bl	800090a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000322:	2017      	movs	r0, #23
 8000324:	f000 fb0d 	bl	8000942 <HAL_NVIC_EnableIRQ>
}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000
 8000338:	40020400 	.word	0x40020400

0800033c <EXTI9_5_IRQHandler>:

// Interrupt Handler for PB8
void EXTI9_5_IRQHandler(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(SWITCH_PIN) != RESET) {
 8000340:	4b1d      	ldr	r3, [pc, #116]	@ (80003b8 <EXTI9_5_IRQHandler+0x7c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000348:	2b00      	cmp	r3, #0
 800034a:	d033      	beq.n	80003b4 <EXTI9_5_IRQHandler+0x78>
        __HAL_GPIO_EXTI_CLEAR_IT(SWITCH_PIN); // Clear interrupt flag
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <EXTI9_5_IRQHandler+0x7c>)
 800034e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000352:	615a      	str	r2, [r3, #20]

        switch_press_count++; // Increase press count
 8000354:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3301      	adds	r3, #1
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 8000360:	701a      	strb	r2, [r3, #0]

        // Turn on LEDs based on press count
        if (switch_press_count == 1) {
 8000362:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b01      	cmp	r3, #1
 800036a:	d105      	bne.n	8000378 <EXTI9_5_IRQHandler+0x3c>
            HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_SET); // LED1 ON
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	4813      	ldr	r0, [pc, #76]	@ (80003c0 <EXTI9_5_IRQHandler+0x84>)
 8000372:	f000 fc85 	bl	8000c80 <HAL_GPIO_WritePin>
 8000376:	e016      	b.n	80003a6 <EXTI9_5_IRQHandler+0x6a>
        } else if (switch_press_count == 2) {
 8000378:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	2b02      	cmp	r3, #2
 8000380:	d106      	bne.n	8000390 <EXTI9_5_IRQHandler+0x54>
            HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_SET); // LED2 ON
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <EXTI9_5_IRQHandler+0x84>)
 800038a:	f000 fc79 	bl	8000c80 <HAL_GPIO_WritePin>
 800038e:	e00a      	b.n	80003a6 <EXTI9_5_IRQHandler+0x6a>
        } else if (switch_press_count == 3) {
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b03      	cmp	r3, #3
 8000398:	d105      	bne.n	80003a6 <EXTI9_5_IRQHandler+0x6a>
            HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_SET); // LED3 ON
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003a0:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <EXTI9_5_IRQHandler+0x84>)
 80003a2:	f000 fc6d 	bl	8000c80 <HAL_GPIO_WritePin>
        }

        printf("Switch Pressed %d times\n", switch_press_count);
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <EXTI9_5_IRQHandler+0x80>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <EXTI9_5_IRQHandler+0x88>)
 80003b0:	f000 fd42 	bl	8000e38 <iprintf>
    }
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40013c00 	.word	0x40013c00
 80003bc:	20000084 	.word	0x20000084
 80003c0:	40020000 	.word	0x40020000
 80003c4:	08001b2c 	.word	0x08001b2c

080003c8 <SysTick_Handler>:
    HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORT, LED2_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_PORT, LED3_PIN, GPIO_PIN_RESET);
}

void SysTick_Handler(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80003cc:	f000 f9ae 	bl	800072c <HAL_IncTick>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <HAL_MspInit+0x4c>)
 80003e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000420 <HAL_MspInit+0x4c>)
 80003e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80003ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <HAL_MspInit+0x4c>)
 80003ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	2300      	movs	r3, #0
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <HAL_MspInit+0x4c>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003fe:	4a08      	ldr	r2, [pc, #32]	@ (8000420 <HAL_MspInit+0x4c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000404:	6413      	str	r3, [r2, #64]	@ 0x40
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <HAL_MspInit+0x4c>)
 8000408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800040a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000412:	2007      	movs	r0, #7
 8000414:	f000 fa6e 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40023800 	.word	0x40023800

08000424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <NMI_Handler+0x4>

0800042c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <MemManage_Handler+0x4>

0800043c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <BusFault_Handler+0x4>

08000444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <UsageFault_Handler+0x4>

0800044c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <ITM_SendChar+0x48>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <ITM_SendChar+0x48>)
 8000488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800048c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <ITM_SendChar+0x4c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <ITM_SendChar+0x4c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800049a:	bf00      	nop
 800049c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f8      	beq.n	800049c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004aa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	6013      	str	r3, [r2, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000edfc 	.word	0xe000edfc
 80004c4:	e0000e00 	.word	0xe0000e00

080004c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e00a      	b.n	80004f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004da:	f3af 8000 	nop.w
 80004de:	4601      	mov	r1, r0
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbf0      	blt.n	80004da <_read+0x12>
  }

  return len;
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e009      	b.n	8000528 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ffab 	bl	8000478 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <_write+0x12>

  }
  return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_close>:

int _close(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000562:	605a      	str	r2, [r3, #4]
  return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f000 fd68 	bl	80010a8 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20020000 	.word	0x20020000
 8000604:	00000400 	.word	0x00000400
 8000608:	20000088 	.word	0x20000088
 800060c:	200001e0 	.word	0x200001e0

08000610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <SystemInit+0x20>)
 8000616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800061a:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <SystemInit+0x20>)
 800061c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800066c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000638:	f7ff ffea 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	@ (8000680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f000 fd27 	bl	80010b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000666:	f7ff fe0b 	bl	8000280 <main>
  bx  lr    
 800066a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800066c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000678:	08001ba8 	.word	0x08001ba8
  ldr r2, =_sbss
 800067c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000680:	200001dc 	.word	0x200001dc

08000684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <HAL_Init+0x40>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <HAL_Init+0x40>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <HAL_Init+0x40>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HAL_Init+0x40>)
 800069e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_Init+0x40>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_Init+0x40>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f91f 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff fe8a 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023c00 	.word	0x40023c00

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f937 	bl	800095e <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f8ff 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_IncTick+0x20>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_IncTick+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_IncTick+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008
 8000750:	2000008c 	.word	0x2000008c

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4907      	ldr	r1, [pc, #28]	@ (80007f0 <__NVIC_EnableIRQ+0x38>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	@ 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff29 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff3e 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff31 	bl	80007b8 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa2 	bl	80008b0 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	@ 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
 8000992:	e159      	b.n	8000c48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000994:	2201      	movs	r2, #1
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8148 	bne.w	8000c42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d005      	beq.n	80009ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d130      	bne.n	8000a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a00:	2201      	movs	r2, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	f003 0201 	and.w	r2, r3, #1
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d017      	beq.n	8000a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	2203      	movs	r2, #3
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d123      	bne.n	8000abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	08da      	lsrs	r2, r3, #3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	08da      	lsrs	r2, r3, #3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3208      	adds	r2, #8
 8000ab6:	69b9      	ldr	r1, [r7, #24]
 8000ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0203 	and.w	r2, r3, #3
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 80a2 	beq.w	8000c42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b57      	ldr	r3, [pc, #348]	@ (8000c60 <HAL_GPIO_Init+0x2e8>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a56      	ldr	r2, [pc, #344]	@ (8000c60 <HAL_GPIO_Init+0x2e8>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b54      	ldr	r3, [pc, #336]	@ (8000c60 <HAL_GPIO_Init+0x2e8>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b1a:	4a52      	ldr	r2, [pc, #328]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a49      	ldr	r2, [pc, #292]	@ (8000c68 <HAL_GPIO_Init+0x2f0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d019      	beq.n	8000b7a <HAL_GPIO_Init+0x202>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a48      	ldr	r2, [pc, #288]	@ (8000c6c <HAL_GPIO_Init+0x2f4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d013      	beq.n	8000b76 <HAL_GPIO_Init+0x1fe>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a47      	ldr	r2, [pc, #284]	@ (8000c70 <HAL_GPIO_Init+0x2f8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d00d      	beq.n	8000b72 <HAL_GPIO_Init+0x1fa>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a46      	ldr	r2, [pc, #280]	@ (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d007      	beq.n	8000b6e <HAL_GPIO_Init+0x1f6>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a45      	ldr	r2, [pc, #276]	@ (8000c78 <HAL_GPIO_Init+0x300>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_GPIO_Init+0x1f2>
 8000b66:	2304      	movs	r3, #4
 8000b68:	e008      	b.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e004      	b.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b72:	2302      	movs	r3, #2
 8000b74:	e002      	b.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	f002 0203 	and.w	r2, r2, #3
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	4093      	lsls	r3, r2
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b8c:	4935      	ldr	r1, [pc, #212]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000be8:	4a24      	ldr	r2, [pc, #144]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c12:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	f67f aea2 	bls.w	8000994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40013800 	.word	0x40013800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40013c00 	.word	0x40013c00

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c9c:	e003      	b.n	8000ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	041a      	lsls	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	619a      	str	r2, [r3, #24]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <std>:
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	b510      	push	{r4, lr}
 8000cb8:	4604      	mov	r4, r0
 8000cba:	e9c0 3300 	strd	r3, r3, [r0]
 8000cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cc2:	6083      	str	r3, [r0, #8]
 8000cc4:	8181      	strh	r1, [r0, #12]
 8000cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cc8:	81c2      	strh	r2, [r0, #14]
 8000cca:	6183      	str	r3, [r0, #24]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2208      	movs	r2, #8
 8000cd0:	305c      	adds	r0, #92	@ 0x5c
 8000cd2:	f000 f99b 	bl	800100c <memset>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <std+0x58>)
 8000cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <std+0x5c>)
 8000cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <std+0x60>)
 8000ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <std+0x64>)
 8000ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <std+0x68>)
 8000ce8:	6224      	str	r4, [r4, #32]
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d006      	beq.n	8000cfc <std+0x48>
 8000cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000cf2:	4294      	cmp	r4, r2
 8000cf4:	d002      	beq.n	8000cfc <std+0x48>
 8000cf6:	33d0      	adds	r3, #208	@ 0xd0
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d105      	bne.n	8000d08 <std+0x54>
 8000cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d04:	f000 b9fa 	b.w	80010fc <__retarget_lock_init_recursive>
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08000e5d 	.word	0x08000e5d
 8000d10:	08000e7f 	.word	0x08000e7f
 8000d14:	08000eb7 	.word	0x08000eb7
 8000d18:	08000edb 	.word	0x08000edb
 8000d1c:	20000090 	.word	0x20000090

08000d20 <stdio_exit_handler>:
 8000d20:	4a02      	ldr	r2, [pc, #8]	@ (8000d2c <stdio_exit_handler+0xc>)
 8000d22:	4903      	ldr	r1, [pc, #12]	@ (8000d30 <stdio_exit_handler+0x10>)
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <stdio_exit_handler+0x14>)
 8000d26:	f000 b869 	b.w	8000dfc <_fwalk_sglue>
 8000d2a:	bf00      	nop
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	0800199d 	.word	0x0800199d
 8000d34:	2000001c 	.word	0x2000001c

08000d38 <cleanup_stdio>:
 8000d38:	6841      	ldr	r1, [r0, #4]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <cleanup_stdio+0x34>)
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	b510      	push	{r4, lr}
 8000d40:	4604      	mov	r4, r0
 8000d42:	d001      	beq.n	8000d48 <cleanup_stdio+0x10>
 8000d44:	f000 fe2a 	bl	800199c <_fflush_r>
 8000d48:	68a1      	ldr	r1, [r4, #8]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <cleanup_stdio+0x38>)
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d002      	beq.n	8000d56 <cleanup_stdio+0x1e>
 8000d50:	4620      	mov	r0, r4
 8000d52:	f000 fe23 	bl	800199c <_fflush_r>
 8000d56:	68e1      	ldr	r1, [r4, #12]
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <cleanup_stdio+0x3c>)
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	d004      	beq.n	8000d68 <cleanup_stdio+0x30>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d64:	f000 be1a 	b.w	800199c <_fflush_r>
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	200000f8 	.word	0x200000f8
 8000d74:	20000160 	.word	0x20000160

08000d78 <global_stdio_init.part.0>:
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <global_stdio_init.part.0+0x30>)
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000dac <global_stdio_init.part.0+0x34>)
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <global_stdio_init.part.0+0x38>)
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4620      	mov	r0, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	f7ff ff94 	bl	8000cb4 <std>
 8000d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d90:	2201      	movs	r2, #1
 8000d92:	2109      	movs	r1, #9
 8000d94:	f7ff ff8e 	bl	8000cb4 <std>
 8000d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da2:	2112      	movs	r1, #18
 8000da4:	f7ff bf86 	b.w	8000cb4 <std>
 8000da8:	200001c8 	.word	0x200001c8
 8000dac:	20000090 	.word	0x20000090
 8000db0:	08000d21 	.word	0x08000d21

08000db4 <__sfp_lock_acquire>:
 8000db4:	4801      	ldr	r0, [pc, #4]	@ (8000dbc <__sfp_lock_acquire+0x8>)
 8000db6:	f000 b9a2 	b.w	80010fe <__retarget_lock_acquire_recursive>
 8000dba:	bf00      	nop
 8000dbc:	200001d1 	.word	0x200001d1

08000dc0 <__sfp_lock_release>:
 8000dc0:	4801      	ldr	r0, [pc, #4]	@ (8000dc8 <__sfp_lock_release+0x8>)
 8000dc2:	f000 b99d 	b.w	8001100 <__retarget_lock_release_recursive>
 8000dc6:	bf00      	nop
 8000dc8:	200001d1 	.word	0x200001d1

08000dcc <__sinit>:
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	4604      	mov	r4, r0
 8000dd0:	f7ff fff0 	bl	8000db4 <__sfp_lock_acquire>
 8000dd4:	6a23      	ldr	r3, [r4, #32]
 8000dd6:	b11b      	cbz	r3, 8000de0 <__sinit+0x14>
 8000dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ddc:	f7ff bff0 	b.w	8000dc0 <__sfp_lock_release>
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__sinit+0x28>)
 8000de2:	6223      	str	r3, [r4, #32]
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__sinit+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f5      	bne.n	8000dd8 <__sinit+0xc>
 8000dec:	f7ff ffc4 	bl	8000d78 <global_stdio_init.part.0>
 8000df0:	e7f2      	b.n	8000dd8 <__sinit+0xc>
 8000df2:	bf00      	nop
 8000df4:	08000d39 	.word	0x08000d39
 8000df8:	200001c8 	.word	0x200001c8

08000dfc <_fwalk_sglue>:
 8000dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e00:	4607      	mov	r7, r0
 8000e02:	4688      	mov	r8, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	2600      	movs	r6, #0
 8000e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8000e10:	d505      	bpl.n	8000e1e <_fwalk_sglue+0x22>
 8000e12:	6824      	ldr	r4, [r4, #0]
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d1f7      	bne.n	8000e08 <_fwalk_sglue+0xc>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e1e:	89ab      	ldrh	r3, [r5, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d907      	bls.n	8000e34 <_fwalk_sglue+0x38>
 8000e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	d003      	beq.n	8000e34 <_fwalk_sglue+0x38>
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4638      	mov	r0, r7
 8000e30:	47c0      	blx	r8
 8000e32:	4306      	orrs	r6, r0
 8000e34:	3568      	adds	r5, #104	@ 0x68
 8000e36:	e7e9      	b.n	8000e0c <_fwalk_sglue+0x10>

08000e38 <iprintf>:
 8000e38:	b40f      	push	{r0, r1, r2, r3}
 8000e3a:	b507      	push	{r0, r1, r2, lr}
 8000e3c:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <iprintf+0x20>)
 8000e3e:	ab04      	add	r3, sp, #16
 8000e40:	6808      	ldr	r0, [r1, #0]
 8000e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e46:	6881      	ldr	r1, [r0, #8]
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f000 fa7d 	bl	8001348 <_vfiprintf_r>
 8000e4e:	b003      	add	sp, #12
 8000e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e54:	b004      	add	sp, #16
 8000e56:	4770      	bx	lr
 8000e58:	20000018 	.word	0x20000018

08000e5c <__sread>:
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	460c      	mov	r4, r1
 8000e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e64:	f000 f8fc 	bl	8001060 <_read_r>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	bfab      	itete	ge
 8000e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8000e70:	181b      	addge	r3, r3, r0
 8000e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e76:	bfac      	ite	ge
 8000e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e7a:	81a3      	strhlt	r3, [r4, #12]
 8000e7c:	bd10      	pop	{r4, pc}

08000e7e <__swrite>:
 8000e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e82:	461f      	mov	r7, r3
 8000e84:	898b      	ldrh	r3, [r1, #12]
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	4605      	mov	r5, r0
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	4616      	mov	r6, r2
 8000e8e:	d505      	bpl.n	8000e9c <__swrite+0x1e>
 8000e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e94:	2302      	movs	r3, #2
 8000e96:	2200      	movs	r2, #0
 8000e98:	f000 f8d0 	bl	800103c <_lseek_r>
 8000e9c:	89a3      	ldrh	r3, [r4, #12]
 8000e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	4632      	mov	r2, r6
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4628      	mov	r0, r5
 8000eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb2:	f000 b8e7 	b.w	8001084 <_write_r>

08000eb6 <__sseek>:
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	460c      	mov	r4, r1
 8000eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ebe:	f000 f8bd 	bl	800103c <_lseek_r>
 8000ec2:	1c43      	adds	r3, r0, #1
 8000ec4:	89a3      	ldrh	r3, [r4, #12]
 8000ec6:	bf15      	itete	ne
 8000ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ed2:	81a3      	strheq	r3, [r4, #12]
 8000ed4:	bf18      	it	ne
 8000ed6:	81a3      	strhne	r3, [r4, #12]
 8000ed8:	bd10      	pop	{r4, pc}

08000eda <__sclose>:
 8000eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ede:	f000 b89d 	b.w	800101c <_close_r>

08000ee2 <__swbuf_r>:
 8000ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	4614      	mov	r4, r2
 8000ee8:	4605      	mov	r5, r0
 8000eea:	b118      	cbz	r0, 8000ef4 <__swbuf_r+0x12>
 8000eec:	6a03      	ldr	r3, [r0, #32]
 8000eee:	b90b      	cbnz	r3, 8000ef4 <__swbuf_r+0x12>
 8000ef0:	f7ff ff6c 	bl	8000dcc <__sinit>
 8000ef4:	69a3      	ldr	r3, [r4, #24]
 8000ef6:	60a3      	str	r3, [r4, #8]
 8000ef8:	89a3      	ldrh	r3, [r4, #12]
 8000efa:	071a      	lsls	r2, r3, #28
 8000efc:	d501      	bpl.n	8000f02 <__swbuf_r+0x20>
 8000efe:	6923      	ldr	r3, [r4, #16]
 8000f00:	b943      	cbnz	r3, 8000f14 <__swbuf_r+0x32>
 8000f02:	4621      	mov	r1, r4
 8000f04:	4628      	mov	r0, r5
 8000f06:	f000 f82b 	bl	8000f60 <__swsetup_r>
 8000f0a:	b118      	cbz	r0, 8000f14 <__swbuf_r+0x32>
 8000f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8000f10:	4638      	mov	r0, r7
 8000f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	6922      	ldr	r2, [r4, #16]
 8000f18:	1a98      	subs	r0, r3, r2
 8000f1a:	6963      	ldr	r3, [r4, #20]
 8000f1c:	b2f6      	uxtb	r6, r6
 8000f1e:	4283      	cmp	r3, r0
 8000f20:	4637      	mov	r7, r6
 8000f22:	dc05      	bgt.n	8000f30 <__swbuf_r+0x4e>
 8000f24:	4621      	mov	r1, r4
 8000f26:	4628      	mov	r0, r5
 8000f28:	f000 fd38 	bl	800199c <_fflush_r>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d1ed      	bne.n	8000f0c <__swbuf_r+0x2a>
 8000f30:	68a3      	ldr	r3, [r4, #8]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	60a3      	str	r3, [r4, #8]
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	6022      	str	r2, [r4, #0]
 8000f3c:	701e      	strb	r6, [r3, #0]
 8000f3e:	6962      	ldr	r2, [r4, #20]
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d004      	beq.n	8000f50 <__swbuf_r+0x6e>
 8000f46:	89a3      	ldrh	r3, [r4, #12]
 8000f48:	07db      	lsls	r3, r3, #31
 8000f4a:	d5e1      	bpl.n	8000f10 <__swbuf_r+0x2e>
 8000f4c:	2e0a      	cmp	r6, #10
 8000f4e:	d1df      	bne.n	8000f10 <__swbuf_r+0x2e>
 8000f50:	4621      	mov	r1, r4
 8000f52:	4628      	mov	r0, r5
 8000f54:	f000 fd22 	bl	800199c <_fflush_r>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d0d9      	beq.n	8000f10 <__swbuf_r+0x2e>
 8000f5c:	e7d6      	b.n	8000f0c <__swbuf_r+0x2a>
	...

08000f60 <__swsetup_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <__swsetup_r+0xa8>)
 8000f64:	4605      	mov	r5, r0
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	460c      	mov	r4, r1
 8000f6a:	b118      	cbz	r0, 8000f74 <__swsetup_r+0x14>
 8000f6c:	6a03      	ldr	r3, [r0, #32]
 8000f6e:	b90b      	cbnz	r3, 8000f74 <__swsetup_r+0x14>
 8000f70:	f7ff ff2c 	bl	8000dcc <__sinit>
 8000f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f78:	0719      	lsls	r1, r3, #28
 8000f7a:	d422      	bmi.n	8000fc2 <__swsetup_r+0x62>
 8000f7c:	06da      	lsls	r2, r3, #27
 8000f7e:	d407      	bmi.n	8000f90 <__swsetup_r+0x30>
 8000f80:	2209      	movs	r2, #9
 8000f82:	602a      	str	r2, [r5, #0]
 8000f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f88:	81a3      	strh	r3, [r4, #12]
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	e033      	b.n	8000ff8 <__swsetup_r+0x98>
 8000f90:	0758      	lsls	r0, r3, #29
 8000f92:	d512      	bpl.n	8000fba <__swsetup_r+0x5a>
 8000f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f96:	b141      	cbz	r1, 8000faa <__swsetup_r+0x4a>
 8000f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d002      	beq.n	8000fa6 <__swsetup_r+0x46>
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f000 f8af 	bl	8001104 <_free_r>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000faa:	89a3      	ldrh	r3, [r4, #12]
 8000fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000fb0:	81a3      	strh	r3, [r4, #12]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6063      	str	r3, [r4, #4]
 8000fb6:	6923      	ldr	r3, [r4, #16]
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	89a3      	ldrh	r3, [r4, #12]
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	81a3      	strh	r3, [r4, #12]
 8000fc2:	6923      	ldr	r3, [r4, #16]
 8000fc4:	b94b      	cbnz	r3, 8000fda <__swsetup_r+0x7a>
 8000fc6:	89a3      	ldrh	r3, [r4, #12]
 8000fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fd0:	d003      	beq.n	8000fda <__swsetup_r+0x7a>
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 fd2f 	bl	8001a38 <__smakebuf_r>
 8000fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fde:	f013 0201 	ands.w	r2, r3, #1
 8000fe2:	d00a      	beq.n	8000ffa <__swsetup_r+0x9a>
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60a2      	str	r2, [r4, #8]
 8000fe8:	6962      	ldr	r2, [r4, #20]
 8000fea:	4252      	negs	r2, r2
 8000fec:	61a2      	str	r2, [r4, #24]
 8000fee:	6922      	ldr	r2, [r4, #16]
 8000ff0:	b942      	cbnz	r2, 8001004 <__swsetup_r+0xa4>
 8000ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ff6:	d1c5      	bne.n	8000f84 <__swsetup_r+0x24>
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	0799      	lsls	r1, r3, #30
 8000ffc:	bf58      	it	pl
 8000ffe:	6962      	ldrpl	r2, [r4, #20]
 8001000:	60a2      	str	r2, [r4, #8]
 8001002:	e7f4      	b.n	8000fee <__swsetup_r+0x8e>
 8001004:	2000      	movs	r0, #0
 8001006:	e7f7      	b.n	8000ff8 <__swsetup_r+0x98>
 8001008:	20000018 	.word	0x20000018

0800100c <memset>:
 800100c:	4402      	add	r2, r0
 800100e:	4603      	mov	r3, r0
 8001010:	4293      	cmp	r3, r2
 8001012:	d100      	bne.n	8001016 <memset+0xa>
 8001014:	4770      	bx	lr
 8001016:	f803 1b01 	strb.w	r1, [r3], #1
 800101a:	e7f9      	b.n	8001010 <memset+0x4>

0800101c <_close_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_close_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff fa87 	bl	800053a <_close>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_close_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_close_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200001cc 	.word	0x200001cc

0800103c <_lseek_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4d07      	ldr	r5, [pc, #28]	@ (800105c <_lseek_r+0x20>)
 8001040:	4604      	mov	r4, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4611      	mov	r1, r2
 8001046:	2200      	movs	r2, #0
 8001048:	602a      	str	r2, [r5, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	f7ff fa9c 	bl	8000588 <_lseek>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_lseek_r+0x1e>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_lseek_r+0x1e>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	200001cc 	.word	0x200001cc

08001060 <_read_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	@ (8001080 <_read_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff fa2a 	bl	80004c8 <_read>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_read_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_read_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	200001cc 	.word	0x200001cc

08001084 <_write_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4d07      	ldr	r5, [pc, #28]	@ (80010a4 <_write_r+0x20>)
 8001088:	4604      	mov	r4, r0
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	2200      	movs	r2, #0
 8001090:	602a      	str	r2, [r5, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff fa35 	bl	8000502 <_write>
 8001098:	1c43      	adds	r3, r0, #1
 800109a:	d102      	bne.n	80010a2 <_write_r+0x1e>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	b103      	cbz	r3, 80010a2 <_write_r+0x1e>
 80010a0:	6023      	str	r3, [r4, #0]
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	200001cc 	.word	0x200001cc

080010a8 <__errno>:
 80010a8:	4b01      	ldr	r3, [pc, #4]	@ (80010b0 <__errno+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000018 	.word	0x20000018

080010b4 <__libc_init_array>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4d0d      	ldr	r5, [pc, #52]	@ (80010ec <__libc_init_array+0x38>)
 80010b8:	4c0d      	ldr	r4, [pc, #52]	@ (80010f0 <__libc_init_array+0x3c>)
 80010ba:	1b64      	subs	r4, r4, r5
 80010bc:	10a4      	asrs	r4, r4, #2
 80010be:	2600      	movs	r6, #0
 80010c0:	42a6      	cmp	r6, r4
 80010c2:	d109      	bne.n	80010d8 <__libc_init_array+0x24>
 80010c4:	4d0b      	ldr	r5, [pc, #44]	@ (80010f4 <__libc_init_array+0x40>)
 80010c6:	4c0c      	ldr	r4, [pc, #48]	@ (80010f8 <__libc_init_array+0x44>)
 80010c8:	f000 fd24 	bl	8001b14 <_init>
 80010cc:	1b64      	subs	r4, r4, r5
 80010ce:	10a4      	asrs	r4, r4, #2
 80010d0:	2600      	movs	r6, #0
 80010d2:	42a6      	cmp	r6, r4
 80010d4:	d105      	bne.n	80010e2 <__libc_init_array+0x2e>
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010dc:	4798      	blx	r3
 80010de:	3601      	adds	r6, #1
 80010e0:	e7ee      	b.n	80010c0 <__libc_init_array+0xc>
 80010e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010e6:	4798      	blx	r3
 80010e8:	3601      	adds	r6, #1
 80010ea:	e7f2      	b.n	80010d2 <__libc_init_array+0x1e>
 80010ec:	08001ba0 	.word	0x08001ba0
 80010f0:	08001ba0 	.word	0x08001ba0
 80010f4:	08001ba0 	.word	0x08001ba0
 80010f8:	08001ba4 	.word	0x08001ba4

080010fc <__retarget_lock_init_recursive>:
 80010fc:	4770      	bx	lr

080010fe <__retarget_lock_acquire_recursive>:
 80010fe:	4770      	bx	lr

08001100 <__retarget_lock_release_recursive>:
 8001100:	4770      	bx	lr
	...

08001104 <_free_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4605      	mov	r5, r0
 8001108:	2900      	cmp	r1, #0
 800110a:	d041      	beq.n	8001190 <_free_r+0x8c>
 800110c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001110:	1f0c      	subs	r4, r1, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	bfb8      	it	lt
 8001116:	18e4      	addlt	r4, r4, r3
 8001118:	f000 f8e0 	bl	80012dc <__malloc_lock>
 800111c:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <_free_r+0x90>)
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	b933      	cbnz	r3, 8001130 <_free_r+0x2c>
 8001122:	6063      	str	r3, [r4, #4]
 8001124:	6014      	str	r4, [r2, #0]
 8001126:	4628      	mov	r0, r5
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b8dc 	b.w	80012e8 <__malloc_unlock>
 8001130:	42a3      	cmp	r3, r4
 8001132:	d908      	bls.n	8001146 <_free_r+0x42>
 8001134:	6820      	ldr	r0, [r4, #0]
 8001136:	1821      	adds	r1, r4, r0
 8001138:	428b      	cmp	r3, r1
 800113a:	bf01      	itttt	eq
 800113c:	6819      	ldreq	r1, [r3, #0]
 800113e:	685b      	ldreq	r3, [r3, #4]
 8001140:	1809      	addeq	r1, r1, r0
 8001142:	6021      	streq	r1, [r4, #0]
 8001144:	e7ed      	b.n	8001122 <_free_r+0x1e>
 8001146:	461a      	mov	r2, r3
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	b10b      	cbz	r3, 8001150 <_free_r+0x4c>
 800114c:	42a3      	cmp	r3, r4
 800114e:	d9fa      	bls.n	8001146 <_free_r+0x42>
 8001150:	6811      	ldr	r1, [r2, #0]
 8001152:	1850      	adds	r0, r2, r1
 8001154:	42a0      	cmp	r0, r4
 8001156:	d10b      	bne.n	8001170 <_free_r+0x6c>
 8001158:	6820      	ldr	r0, [r4, #0]
 800115a:	4401      	add	r1, r0
 800115c:	1850      	adds	r0, r2, r1
 800115e:	4283      	cmp	r3, r0
 8001160:	6011      	str	r1, [r2, #0]
 8001162:	d1e0      	bne.n	8001126 <_free_r+0x22>
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	6053      	str	r3, [r2, #4]
 800116a:	4408      	add	r0, r1
 800116c:	6010      	str	r0, [r2, #0]
 800116e:	e7da      	b.n	8001126 <_free_r+0x22>
 8001170:	d902      	bls.n	8001178 <_free_r+0x74>
 8001172:	230c      	movs	r3, #12
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	e7d6      	b.n	8001126 <_free_r+0x22>
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	1821      	adds	r1, r4, r0
 800117c:	428b      	cmp	r3, r1
 800117e:	bf04      	itt	eq
 8001180:	6819      	ldreq	r1, [r3, #0]
 8001182:	685b      	ldreq	r3, [r3, #4]
 8001184:	6063      	str	r3, [r4, #4]
 8001186:	bf04      	itt	eq
 8001188:	1809      	addeq	r1, r1, r0
 800118a:	6021      	streq	r1, [r4, #0]
 800118c:	6054      	str	r4, [r2, #4]
 800118e:	e7ca      	b.n	8001126 <_free_r+0x22>
 8001190:	bd38      	pop	{r3, r4, r5, pc}
 8001192:	bf00      	nop
 8001194:	200001d8 	.word	0x200001d8

08001198 <sbrk_aligned>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	4e0f      	ldr	r6, [pc, #60]	@ (80011d8 <sbrk_aligned+0x40>)
 800119c:	460c      	mov	r4, r1
 800119e:	6831      	ldr	r1, [r6, #0]
 80011a0:	4605      	mov	r5, r0
 80011a2:	b911      	cbnz	r1, 80011aa <sbrk_aligned+0x12>
 80011a4:	f000 fca6 	bl	8001af4 <_sbrk_r>
 80011a8:	6030      	str	r0, [r6, #0]
 80011aa:	4621      	mov	r1, r4
 80011ac:	4628      	mov	r0, r5
 80011ae:	f000 fca1 	bl	8001af4 <_sbrk_r>
 80011b2:	1c43      	adds	r3, r0, #1
 80011b4:	d103      	bne.n	80011be <sbrk_aligned+0x26>
 80011b6:	f04f 34ff 	mov.w	r4, #4294967295
 80011ba:	4620      	mov	r0, r4
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	1cc4      	adds	r4, r0, #3
 80011c0:	f024 0403 	bic.w	r4, r4, #3
 80011c4:	42a0      	cmp	r0, r4
 80011c6:	d0f8      	beq.n	80011ba <sbrk_aligned+0x22>
 80011c8:	1a21      	subs	r1, r4, r0
 80011ca:	4628      	mov	r0, r5
 80011cc:	f000 fc92 	bl	8001af4 <_sbrk_r>
 80011d0:	3001      	adds	r0, #1
 80011d2:	d1f2      	bne.n	80011ba <sbrk_aligned+0x22>
 80011d4:	e7ef      	b.n	80011b6 <sbrk_aligned+0x1e>
 80011d6:	bf00      	nop
 80011d8:	200001d4 	.word	0x200001d4

080011dc <_malloc_r>:
 80011dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011e0:	1ccd      	adds	r5, r1, #3
 80011e2:	f025 0503 	bic.w	r5, r5, #3
 80011e6:	3508      	adds	r5, #8
 80011e8:	2d0c      	cmp	r5, #12
 80011ea:	bf38      	it	cc
 80011ec:	250c      	movcc	r5, #12
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	4606      	mov	r6, r0
 80011f2:	db01      	blt.n	80011f8 <_malloc_r+0x1c>
 80011f4:	42a9      	cmp	r1, r5
 80011f6:	d904      	bls.n	8001202 <_malloc_r+0x26>
 80011f8:	230c      	movs	r3, #12
 80011fa:	6033      	str	r3, [r6, #0]
 80011fc:	2000      	movs	r0, #0
 80011fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80012d8 <_malloc_r+0xfc>
 8001206:	f000 f869 	bl	80012dc <__malloc_lock>
 800120a:	f8d8 3000 	ldr.w	r3, [r8]
 800120e:	461c      	mov	r4, r3
 8001210:	bb44      	cbnz	r4, 8001264 <_malloc_r+0x88>
 8001212:	4629      	mov	r1, r5
 8001214:	4630      	mov	r0, r6
 8001216:	f7ff ffbf 	bl	8001198 <sbrk_aligned>
 800121a:	1c43      	adds	r3, r0, #1
 800121c:	4604      	mov	r4, r0
 800121e:	d158      	bne.n	80012d2 <_malloc_r+0xf6>
 8001220:	f8d8 4000 	ldr.w	r4, [r8]
 8001224:	4627      	mov	r7, r4
 8001226:	2f00      	cmp	r7, #0
 8001228:	d143      	bne.n	80012b2 <_malloc_r+0xd6>
 800122a:	2c00      	cmp	r4, #0
 800122c:	d04b      	beq.n	80012c6 <_malloc_r+0xea>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	4639      	mov	r1, r7
 8001232:	4630      	mov	r0, r6
 8001234:	eb04 0903 	add.w	r9, r4, r3
 8001238:	f000 fc5c 	bl	8001af4 <_sbrk_r>
 800123c:	4581      	cmp	r9, r0
 800123e:	d142      	bne.n	80012c6 <_malloc_r+0xea>
 8001240:	6821      	ldr	r1, [r4, #0]
 8001242:	1a6d      	subs	r5, r5, r1
 8001244:	4629      	mov	r1, r5
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff ffa6 	bl	8001198 <sbrk_aligned>
 800124c:	3001      	adds	r0, #1
 800124e:	d03a      	beq.n	80012c6 <_malloc_r+0xea>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	442b      	add	r3, r5
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	f8d8 3000 	ldr.w	r3, [r8]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	bb62      	cbnz	r2, 80012b8 <_malloc_r+0xdc>
 800125e:	f8c8 7000 	str.w	r7, [r8]
 8001262:	e00f      	b.n	8001284 <_malloc_r+0xa8>
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	1b52      	subs	r2, r2, r5
 8001268:	d420      	bmi.n	80012ac <_malloc_r+0xd0>
 800126a:	2a0b      	cmp	r2, #11
 800126c:	d917      	bls.n	800129e <_malloc_r+0xc2>
 800126e:	1961      	adds	r1, r4, r5
 8001270:	42a3      	cmp	r3, r4
 8001272:	6025      	str	r5, [r4, #0]
 8001274:	bf18      	it	ne
 8001276:	6059      	strne	r1, [r3, #4]
 8001278:	6863      	ldr	r3, [r4, #4]
 800127a:	bf08      	it	eq
 800127c:	f8c8 1000 	streq.w	r1, [r8]
 8001280:	5162      	str	r2, [r4, r5]
 8001282:	604b      	str	r3, [r1, #4]
 8001284:	4630      	mov	r0, r6
 8001286:	f000 f82f 	bl	80012e8 <__malloc_unlock>
 800128a:	f104 000b 	add.w	r0, r4, #11
 800128e:	1d23      	adds	r3, r4, #4
 8001290:	f020 0007 	bic.w	r0, r0, #7
 8001294:	1ac2      	subs	r2, r0, r3
 8001296:	bf1c      	itt	ne
 8001298:	1a1b      	subne	r3, r3, r0
 800129a:	50a3      	strne	r3, [r4, r2]
 800129c:	e7af      	b.n	80011fe <_malloc_r+0x22>
 800129e:	6862      	ldr	r2, [r4, #4]
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	bf0c      	ite	eq
 80012a4:	f8c8 2000 	streq.w	r2, [r8]
 80012a8:	605a      	strne	r2, [r3, #4]
 80012aa:	e7eb      	b.n	8001284 <_malloc_r+0xa8>
 80012ac:	4623      	mov	r3, r4
 80012ae:	6864      	ldr	r4, [r4, #4]
 80012b0:	e7ae      	b.n	8001210 <_malloc_r+0x34>
 80012b2:	463c      	mov	r4, r7
 80012b4:	687f      	ldr	r7, [r7, #4]
 80012b6:	e7b6      	b.n	8001226 <_malloc_r+0x4a>
 80012b8:	461a      	mov	r2, r3
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	42a3      	cmp	r3, r4
 80012be:	d1fb      	bne.n	80012b8 <_malloc_r+0xdc>
 80012c0:	2300      	movs	r3, #0
 80012c2:	6053      	str	r3, [r2, #4]
 80012c4:	e7de      	b.n	8001284 <_malloc_r+0xa8>
 80012c6:	230c      	movs	r3, #12
 80012c8:	6033      	str	r3, [r6, #0]
 80012ca:	4630      	mov	r0, r6
 80012cc:	f000 f80c 	bl	80012e8 <__malloc_unlock>
 80012d0:	e794      	b.n	80011fc <_malloc_r+0x20>
 80012d2:	6005      	str	r5, [r0, #0]
 80012d4:	e7d6      	b.n	8001284 <_malloc_r+0xa8>
 80012d6:	bf00      	nop
 80012d8:	200001d8 	.word	0x200001d8

080012dc <__malloc_lock>:
 80012dc:	4801      	ldr	r0, [pc, #4]	@ (80012e4 <__malloc_lock+0x8>)
 80012de:	f7ff bf0e 	b.w	80010fe <__retarget_lock_acquire_recursive>
 80012e2:	bf00      	nop
 80012e4:	200001d0 	.word	0x200001d0

080012e8 <__malloc_unlock>:
 80012e8:	4801      	ldr	r0, [pc, #4]	@ (80012f0 <__malloc_unlock+0x8>)
 80012ea:	f7ff bf09 	b.w	8001100 <__retarget_lock_release_recursive>
 80012ee:	bf00      	nop
 80012f0:	200001d0 	.word	0x200001d0

080012f4 <__sfputc_r>:
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	b410      	push	{r4}
 80012fc:	6093      	str	r3, [r2, #8]
 80012fe:	da08      	bge.n	8001312 <__sfputc_r+0x1e>
 8001300:	6994      	ldr	r4, [r2, #24]
 8001302:	42a3      	cmp	r3, r4
 8001304:	db01      	blt.n	800130a <__sfputc_r+0x16>
 8001306:	290a      	cmp	r1, #10
 8001308:	d103      	bne.n	8001312 <__sfputc_r+0x1e>
 800130a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800130e:	f7ff bde8 	b.w	8000ee2 <__swbuf_r>
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	1c58      	adds	r0, r3, #1
 8001316:	6010      	str	r0, [r2, #0]
 8001318:	7019      	strb	r1, [r3, #0]
 800131a:	4608      	mov	r0, r1
 800131c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001320:	4770      	bx	lr

08001322 <__sfputs_r>:
 8001322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001324:	4606      	mov	r6, r0
 8001326:	460f      	mov	r7, r1
 8001328:	4614      	mov	r4, r2
 800132a:	18d5      	adds	r5, r2, r3
 800132c:	42ac      	cmp	r4, r5
 800132e:	d101      	bne.n	8001334 <__sfputs_r+0x12>
 8001330:	2000      	movs	r0, #0
 8001332:	e007      	b.n	8001344 <__sfputs_r+0x22>
 8001334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001338:	463a      	mov	r2, r7
 800133a:	4630      	mov	r0, r6
 800133c:	f7ff ffda 	bl	80012f4 <__sfputc_r>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d1f3      	bne.n	800132c <__sfputs_r+0xa>
 8001344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001348 <_vfiprintf_r>:
 8001348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	460d      	mov	r5, r1
 800134e:	b09d      	sub	sp, #116	@ 0x74
 8001350:	4614      	mov	r4, r2
 8001352:	4698      	mov	r8, r3
 8001354:	4606      	mov	r6, r0
 8001356:	b118      	cbz	r0, 8001360 <_vfiprintf_r+0x18>
 8001358:	6a03      	ldr	r3, [r0, #32]
 800135a:	b90b      	cbnz	r3, 8001360 <_vfiprintf_r+0x18>
 800135c:	f7ff fd36 	bl	8000dcc <__sinit>
 8001360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001362:	07d9      	lsls	r1, r3, #31
 8001364:	d405      	bmi.n	8001372 <_vfiprintf_r+0x2a>
 8001366:	89ab      	ldrh	r3, [r5, #12]
 8001368:	059a      	lsls	r2, r3, #22
 800136a:	d402      	bmi.n	8001372 <_vfiprintf_r+0x2a>
 800136c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800136e:	f7ff fec6 	bl	80010fe <__retarget_lock_acquire_recursive>
 8001372:	89ab      	ldrh	r3, [r5, #12]
 8001374:	071b      	lsls	r3, r3, #28
 8001376:	d501      	bpl.n	800137c <_vfiprintf_r+0x34>
 8001378:	692b      	ldr	r3, [r5, #16]
 800137a:	b99b      	cbnz	r3, 80013a4 <_vfiprintf_r+0x5c>
 800137c:	4629      	mov	r1, r5
 800137e:	4630      	mov	r0, r6
 8001380:	f7ff fdee 	bl	8000f60 <__swsetup_r>
 8001384:	b170      	cbz	r0, 80013a4 <_vfiprintf_r+0x5c>
 8001386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001388:	07dc      	lsls	r4, r3, #31
 800138a:	d504      	bpl.n	8001396 <_vfiprintf_r+0x4e>
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	b01d      	add	sp, #116	@ 0x74
 8001392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001396:	89ab      	ldrh	r3, [r5, #12]
 8001398:	0598      	lsls	r0, r3, #22
 800139a:	d4f7      	bmi.n	800138c <_vfiprintf_r+0x44>
 800139c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800139e:	f7ff feaf 	bl	8001100 <__retarget_lock_release_recursive>
 80013a2:	e7f3      	b.n	800138c <_vfiprintf_r+0x44>
 80013a4:	2300      	movs	r3, #0
 80013a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80013a8:	2320      	movs	r3, #32
 80013aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80013ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80013b2:	2330      	movs	r3, #48	@ 0x30
 80013b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001564 <_vfiprintf_r+0x21c>
 80013b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80013bc:	f04f 0901 	mov.w	r9, #1
 80013c0:	4623      	mov	r3, r4
 80013c2:	469a      	mov	sl, r3
 80013c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013c8:	b10a      	cbz	r2, 80013ce <_vfiprintf_r+0x86>
 80013ca:	2a25      	cmp	r2, #37	@ 0x25
 80013cc:	d1f9      	bne.n	80013c2 <_vfiprintf_r+0x7a>
 80013ce:	ebba 0b04 	subs.w	fp, sl, r4
 80013d2:	d00b      	beq.n	80013ec <_vfiprintf_r+0xa4>
 80013d4:	465b      	mov	r3, fp
 80013d6:	4622      	mov	r2, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff ffa1 	bl	8001322 <__sfputs_r>
 80013e0:	3001      	adds	r0, #1
 80013e2:	f000 80a7 	beq.w	8001534 <_vfiprintf_r+0x1ec>
 80013e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013e8:	445a      	add	r2, fp
 80013ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80013ec:	f89a 3000 	ldrb.w	r3, [sl]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 809f 	beq.w	8001534 <_vfiprintf_r+0x1ec>
 80013f6:	2300      	movs	r3, #0
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001400:	f10a 0a01 	add.w	sl, sl, #1
 8001404:	9304      	str	r3, [sp, #16]
 8001406:	9307      	str	r3, [sp, #28]
 8001408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800140c:	931a      	str	r3, [sp, #104]	@ 0x68
 800140e:	4654      	mov	r4, sl
 8001410:	2205      	movs	r2, #5
 8001412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001416:	4853      	ldr	r0, [pc, #332]	@ (8001564 <_vfiprintf_r+0x21c>)
 8001418:	f7fe fee2 	bl	80001e0 <memchr>
 800141c:	9a04      	ldr	r2, [sp, #16]
 800141e:	b9d8      	cbnz	r0, 8001458 <_vfiprintf_r+0x110>
 8001420:	06d1      	lsls	r1, r2, #27
 8001422:	bf44      	itt	mi
 8001424:	2320      	movmi	r3, #32
 8001426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800142a:	0713      	lsls	r3, r2, #28
 800142c:	bf44      	itt	mi
 800142e:	232b      	movmi	r3, #43	@ 0x2b
 8001430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001434:	f89a 3000 	ldrb.w	r3, [sl]
 8001438:	2b2a      	cmp	r3, #42	@ 0x2a
 800143a:	d015      	beq.n	8001468 <_vfiprintf_r+0x120>
 800143c:	9a07      	ldr	r2, [sp, #28]
 800143e:	4654      	mov	r4, sl
 8001440:	2000      	movs	r0, #0
 8001442:	f04f 0c0a 	mov.w	ip, #10
 8001446:	4621      	mov	r1, r4
 8001448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800144c:	3b30      	subs	r3, #48	@ 0x30
 800144e:	2b09      	cmp	r3, #9
 8001450:	d94b      	bls.n	80014ea <_vfiprintf_r+0x1a2>
 8001452:	b1b0      	cbz	r0, 8001482 <_vfiprintf_r+0x13a>
 8001454:	9207      	str	r2, [sp, #28]
 8001456:	e014      	b.n	8001482 <_vfiprintf_r+0x13a>
 8001458:	eba0 0308 	sub.w	r3, r0, r8
 800145c:	fa09 f303 	lsl.w	r3, r9, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	9304      	str	r3, [sp, #16]
 8001464:	46a2      	mov	sl, r4
 8001466:	e7d2      	b.n	800140e <_vfiprintf_r+0xc6>
 8001468:	9b03      	ldr	r3, [sp, #12]
 800146a:	1d19      	adds	r1, r3, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	9103      	str	r1, [sp, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	bfbb      	ittet	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	f042 0202 	orrlt.w	r2, r2, #2
 800147a:	9307      	strge	r3, [sp, #28]
 800147c:	9307      	strlt	r3, [sp, #28]
 800147e:	bfb8      	it	lt
 8001480:	9204      	strlt	r2, [sp, #16]
 8001482:	7823      	ldrb	r3, [r4, #0]
 8001484:	2b2e      	cmp	r3, #46	@ 0x2e
 8001486:	d10a      	bne.n	800149e <_vfiprintf_r+0x156>
 8001488:	7863      	ldrb	r3, [r4, #1]
 800148a:	2b2a      	cmp	r3, #42	@ 0x2a
 800148c:	d132      	bne.n	80014f4 <_vfiprintf_r+0x1ac>
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	1d1a      	adds	r2, r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	9203      	str	r2, [sp, #12]
 8001496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800149a:	3402      	adds	r4, #2
 800149c:	9305      	str	r3, [sp, #20]
 800149e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001574 <_vfiprintf_r+0x22c>
 80014a2:	7821      	ldrb	r1, [r4, #0]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4650      	mov	r0, sl
 80014a8:	f7fe fe9a 	bl	80001e0 <memchr>
 80014ac:	b138      	cbz	r0, 80014be <_vfiprintf_r+0x176>
 80014ae:	9b04      	ldr	r3, [sp, #16]
 80014b0:	eba0 000a 	sub.w	r0, r0, sl
 80014b4:	2240      	movs	r2, #64	@ 0x40
 80014b6:	4082      	lsls	r2, r0
 80014b8:	4313      	orrs	r3, r2
 80014ba:	3401      	adds	r4, #1
 80014bc:	9304      	str	r3, [sp, #16]
 80014be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014c2:	4829      	ldr	r0, [pc, #164]	@ (8001568 <_vfiprintf_r+0x220>)
 80014c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80014c8:	2206      	movs	r2, #6
 80014ca:	f7fe fe89 	bl	80001e0 <memchr>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d03f      	beq.n	8001552 <_vfiprintf_r+0x20a>
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <_vfiprintf_r+0x224>)
 80014d4:	bb1b      	cbnz	r3, 800151e <_vfiprintf_r+0x1d6>
 80014d6:	9b03      	ldr	r3, [sp, #12]
 80014d8:	3307      	adds	r3, #7
 80014da:	f023 0307 	bic.w	r3, r3, #7
 80014de:	3308      	adds	r3, #8
 80014e0:	9303      	str	r3, [sp, #12]
 80014e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014e4:	443b      	add	r3, r7
 80014e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80014e8:	e76a      	b.n	80013c0 <_vfiprintf_r+0x78>
 80014ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80014ee:	460c      	mov	r4, r1
 80014f0:	2001      	movs	r0, #1
 80014f2:	e7a8      	b.n	8001446 <_vfiprintf_r+0xfe>
 80014f4:	2300      	movs	r3, #0
 80014f6:	3401      	adds	r4, #1
 80014f8:	9305      	str	r3, [sp, #20]
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 0c0a 	mov.w	ip, #10
 8001500:	4620      	mov	r0, r4
 8001502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001506:	3a30      	subs	r2, #48	@ 0x30
 8001508:	2a09      	cmp	r2, #9
 800150a:	d903      	bls.n	8001514 <_vfiprintf_r+0x1cc>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0c6      	beq.n	800149e <_vfiprintf_r+0x156>
 8001510:	9105      	str	r1, [sp, #20]
 8001512:	e7c4      	b.n	800149e <_vfiprintf_r+0x156>
 8001514:	fb0c 2101 	mla	r1, ip, r1, r2
 8001518:	4604      	mov	r4, r0
 800151a:	2301      	movs	r3, #1
 800151c:	e7f0      	b.n	8001500 <_vfiprintf_r+0x1b8>
 800151e:	ab03      	add	r3, sp, #12
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	462a      	mov	r2, r5
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <_vfiprintf_r+0x228>)
 8001526:	a904      	add	r1, sp, #16
 8001528:	4630      	mov	r0, r6
 800152a:	f3af 8000 	nop.w
 800152e:	4607      	mov	r7, r0
 8001530:	1c78      	adds	r0, r7, #1
 8001532:	d1d6      	bne.n	80014e2 <_vfiprintf_r+0x19a>
 8001534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001536:	07d9      	lsls	r1, r3, #31
 8001538:	d405      	bmi.n	8001546 <_vfiprintf_r+0x1fe>
 800153a:	89ab      	ldrh	r3, [r5, #12]
 800153c:	059a      	lsls	r2, r3, #22
 800153e:	d402      	bmi.n	8001546 <_vfiprintf_r+0x1fe>
 8001540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001542:	f7ff fddd 	bl	8001100 <__retarget_lock_release_recursive>
 8001546:	89ab      	ldrh	r3, [r5, #12]
 8001548:	065b      	lsls	r3, r3, #25
 800154a:	f53f af1f 	bmi.w	800138c <_vfiprintf_r+0x44>
 800154e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001550:	e71e      	b.n	8001390 <_vfiprintf_r+0x48>
 8001552:	ab03      	add	r3, sp, #12
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	462a      	mov	r2, r5
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <_vfiprintf_r+0x228>)
 800155a:	a904      	add	r1, sp, #16
 800155c:	4630      	mov	r0, r6
 800155e:	f000 f879 	bl	8001654 <_printf_i>
 8001562:	e7e4      	b.n	800152e <_vfiprintf_r+0x1e6>
 8001564:	08001b62 	.word	0x08001b62
 8001568:	08001b6c 	.word	0x08001b6c
 800156c:	00000000 	.word	0x00000000
 8001570:	08001323 	.word	0x08001323
 8001574:	08001b68 	.word	0x08001b68

08001578 <_printf_common>:
 8001578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800157c:	4616      	mov	r6, r2
 800157e:	4698      	mov	r8, r3
 8001580:	688a      	ldr	r2, [r1, #8]
 8001582:	690b      	ldr	r3, [r1, #16]
 8001584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001588:	4293      	cmp	r3, r2
 800158a:	bfb8      	it	lt
 800158c:	4613      	movlt	r3, r2
 800158e:	6033      	str	r3, [r6, #0]
 8001590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001594:	4607      	mov	r7, r0
 8001596:	460c      	mov	r4, r1
 8001598:	b10a      	cbz	r2, 800159e <_printf_common+0x26>
 800159a:	3301      	adds	r3, #1
 800159c:	6033      	str	r3, [r6, #0]
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	0699      	lsls	r1, r3, #26
 80015a2:	bf42      	ittt	mi
 80015a4:	6833      	ldrmi	r3, [r6, #0]
 80015a6:	3302      	addmi	r3, #2
 80015a8:	6033      	strmi	r3, [r6, #0]
 80015aa:	6825      	ldr	r5, [r4, #0]
 80015ac:	f015 0506 	ands.w	r5, r5, #6
 80015b0:	d106      	bne.n	80015c0 <_printf_common+0x48>
 80015b2:	f104 0a19 	add.w	sl, r4, #25
 80015b6:	68e3      	ldr	r3, [r4, #12]
 80015b8:	6832      	ldr	r2, [r6, #0]
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	42ab      	cmp	r3, r5
 80015be:	dc26      	bgt.n	800160e <_printf_common+0x96>
 80015c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	3b00      	subs	r3, #0
 80015c8:	bf18      	it	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	0692      	lsls	r2, r2, #26
 80015ce:	d42b      	bmi.n	8001628 <_printf_common+0xb0>
 80015d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80015d4:	4641      	mov	r1, r8
 80015d6:	4638      	mov	r0, r7
 80015d8:	47c8      	blx	r9
 80015da:	3001      	adds	r0, #1
 80015dc:	d01e      	beq.n	800161c <_printf_common+0xa4>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	6922      	ldr	r2, [r4, #16]
 80015e2:	f003 0306 	and.w	r3, r3, #6
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf02      	ittt	eq
 80015ea:	68e5      	ldreq	r5, [r4, #12]
 80015ec:	6833      	ldreq	r3, [r6, #0]
 80015ee:	1aed      	subeq	r5, r5, r3
 80015f0:	68a3      	ldr	r3, [r4, #8]
 80015f2:	bf0c      	ite	eq
 80015f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015f8:	2500      	movne	r5, #0
 80015fa:	4293      	cmp	r3, r2
 80015fc:	bfc4      	itt	gt
 80015fe:	1a9b      	subgt	r3, r3, r2
 8001600:	18ed      	addgt	r5, r5, r3
 8001602:	2600      	movs	r6, #0
 8001604:	341a      	adds	r4, #26
 8001606:	42b5      	cmp	r5, r6
 8001608:	d11a      	bne.n	8001640 <_printf_common+0xc8>
 800160a:	2000      	movs	r0, #0
 800160c:	e008      	b.n	8001620 <_printf_common+0xa8>
 800160e:	2301      	movs	r3, #1
 8001610:	4652      	mov	r2, sl
 8001612:	4641      	mov	r1, r8
 8001614:	4638      	mov	r0, r7
 8001616:	47c8      	blx	r9
 8001618:	3001      	adds	r0, #1
 800161a:	d103      	bne.n	8001624 <_printf_common+0xac>
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001624:	3501      	adds	r5, #1
 8001626:	e7c6      	b.n	80015b6 <_printf_common+0x3e>
 8001628:	18e1      	adds	r1, r4, r3
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	2030      	movs	r0, #48	@ 0x30
 800162e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001632:	4422      	add	r2, r4
 8001634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800163c:	3302      	adds	r3, #2
 800163e:	e7c7      	b.n	80015d0 <_printf_common+0x58>
 8001640:	2301      	movs	r3, #1
 8001642:	4622      	mov	r2, r4
 8001644:	4641      	mov	r1, r8
 8001646:	4638      	mov	r0, r7
 8001648:	47c8      	blx	r9
 800164a:	3001      	adds	r0, #1
 800164c:	d0e6      	beq.n	800161c <_printf_common+0xa4>
 800164e:	3601      	adds	r6, #1
 8001650:	e7d9      	b.n	8001606 <_printf_common+0x8e>
	...

08001654 <_printf_i>:
 8001654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001658:	7e0f      	ldrb	r7, [r1, #24]
 800165a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800165c:	2f78      	cmp	r7, #120	@ 0x78
 800165e:	4691      	mov	r9, r2
 8001660:	4680      	mov	r8, r0
 8001662:	460c      	mov	r4, r1
 8001664:	469a      	mov	sl, r3
 8001666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800166a:	d807      	bhi.n	800167c <_printf_i+0x28>
 800166c:	2f62      	cmp	r7, #98	@ 0x62
 800166e:	d80a      	bhi.n	8001686 <_printf_i+0x32>
 8001670:	2f00      	cmp	r7, #0
 8001672:	f000 80d2 	beq.w	800181a <_printf_i+0x1c6>
 8001676:	2f58      	cmp	r7, #88	@ 0x58
 8001678:	f000 80b9 	beq.w	80017ee <_printf_i+0x19a>
 800167c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001684:	e03a      	b.n	80016fc <_printf_i+0xa8>
 8001686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800168a:	2b15      	cmp	r3, #21
 800168c:	d8f6      	bhi.n	800167c <_printf_i+0x28>
 800168e:	a101      	add	r1, pc, #4	@ (adr r1, 8001694 <_printf_i+0x40>)
 8001690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001694:	080016ed 	.word	0x080016ed
 8001698:	08001701 	.word	0x08001701
 800169c:	0800167d 	.word	0x0800167d
 80016a0:	0800167d 	.word	0x0800167d
 80016a4:	0800167d 	.word	0x0800167d
 80016a8:	0800167d 	.word	0x0800167d
 80016ac:	08001701 	.word	0x08001701
 80016b0:	0800167d 	.word	0x0800167d
 80016b4:	0800167d 	.word	0x0800167d
 80016b8:	0800167d 	.word	0x0800167d
 80016bc:	0800167d 	.word	0x0800167d
 80016c0:	08001801 	.word	0x08001801
 80016c4:	0800172b 	.word	0x0800172b
 80016c8:	080017bb 	.word	0x080017bb
 80016cc:	0800167d 	.word	0x0800167d
 80016d0:	0800167d 	.word	0x0800167d
 80016d4:	08001823 	.word	0x08001823
 80016d8:	0800167d 	.word	0x0800167d
 80016dc:	0800172b 	.word	0x0800172b
 80016e0:	0800167d 	.word	0x0800167d
 80016e4:	0800167d 	.word	0x0800167d
 80016e8:	080017c3 	.word	0x080017c3
 80016ec:	6833      	ldr	r3, [r6, #0]
 80016ee:	1d1a      	adds	r2, r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6032      	str	r2, [r6, #0]
 80016f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016fc:	2301      	movs	r3, #1
 80016fe:	e09d      	b.n	800183c <_printf_i+0x1e8>
 8001700:	6833      	ldr	r3, [r6, #0]
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	1d19      	adds	r1, r3, #4
 8001706:	6031      	str	r1, [r6, #0]
 8001708:	0606      	lsls	r6, r0, #24
 800170a:	d501      	bpl.n	8001710 <_printf_i+0xbc>
 800170c:	681d      	ldr	r5, [r3, #0]
 800170e:	e003      	b.n	8001718 <_printf_i+0xc4>
 8001710:	0645      	lsls	r5, r0, #25
 8001712:	d5fb      	bpl.n	800170c <_printf_i+0xb8>
 8001714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001718:	2d00      	cmp	r5, #0
 800171a:	da03      	bge.n	8001724 <_printf_i+0xd0>
 800171c:	232d      	movs	r3, #45	@ 0x2d
 800171e:	426d      	negs	r5, r5
 8001720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001724:	4859      	ldr	r0, [pc, #356]	@ (800188c <_printf_i+0x238>)
 8001726:	230a      	movs	r3, #10
 8001728:	e011      	b.n	800174e <_printf_i+0xfa>
 800172a:	6821      	ldr	r1, [r4, #0]
 800172c:	6833      	ldr	r3, [r6, #0]
 800172e:	0608      	lsls	r0, r1, #24
 8001730:	f853 5b04 	ldr.w	r5, [r3], #4
 8001734:	d402      	bmi.n	800173c <_printf_i+0xe8>
 8001736:	0649      	lsls	r1, r1, #25
 8001738:	bf48      	it	mi
 800173a:	b2ad      	uxthmi	r5, r5
 800173c:	2f6f      	cmp	r7, #111	@ 0x6f
 800173e:	4853      	ldr	r0, [pc, #332]	@ (800188c <_printf_i+0x238>)
 8001740:	6033      	str	r3, [r6, #0]
 8001742:	bf14      	ite	ne
 8001744:	230a      	movne	r3, #10
 8001746:	2308      	moveq	r3, #8
 8001748:	2100      	movs	r1, #0
 800174a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800174e:	6866      	ldr	r6, [r4, #4]
 8001750:	60a6      	str	r6, [r4, #8]
 8001752:	2e00      	cmp	r6, #0
 8001754:	bfa2      	ittt	ge
 8001756:	6821      	ldrge	r1, [r4, #0]
 8001758:	f021 0104 	bicge.w	r1, r1, #4
 800175c:	6021      	strge	r1, [r4, #0]
 800175e:	b90d      	cbnz	r5, 8001764 <_printf_i+0x110>
 8001760:	2e00      	cmp	r6, #0
 8001762:	d04b      	beq.n	80017fc <_printf_i+0x1a8>
 8001764:	4616      	mov	r6, r2
 8001766:	fbb5 f1f3 	udiv	r1, r5, r3
 800176a:	fb03 5711 	mls	r7, r3, r1, r5
 800176e:	5dc7      	ldrb	r7, [r0, r7]
 8001770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001774:	462f      	mov	r7, r5
 8001776:	42bb      	cmp	r3, r7
 8001778:	460d      	mov	r5, r1
 800177a:	d9f4      	bls.n	8001766 <_printf_i+0x112>
 800177c:	2b08      	cmp	r3, #8
 800177e:	d10b      	bne.n	8001798 <_printf_i+0x144>
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	07df      	lsls	r7, r3, #31
 8001784:	d508      	bpl.n	8001798 <_printf_i+0x144>
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	6861      	ldr	r1, [r4, #4]
 800178a:	4299      	cmp	r1, r3
 800178c:	bfde      	ittt	le
 800178e:	2330      	movle	r3, #48	@ 0x30
 8001790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001798:	1b92      	subs	r2, r2, r6
 800179a:	6122      	str	r2, [r4, #16]
 800179c:	f8cd a000 	str.w	sl, [sp]
 80017a0:	464b      	mov	r3, r9
 80017a2:	aa03      	add	r2, sp, #12
 80017a4:	4621      	mov	r1, r4
 80017a6:	4640      	mov	r0, r8
 80017a8:	f7ff fee6 	bl	8001578 <_printf_common>
 80017ac:	3001      	adds	r0, #1
 80017ae:	d14a      	bne.n	8001846 <_printf_i+0x1f2>
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	b004      	add	sp, #16
 80017b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	4833      	ldr	r0, [pc, #204]	@ (8001890 <_printf_i+0x23c>)
 80017c4:	2778      	movs	r7, #120	@ 0x78
 80017c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	6831      	ldr	r1, [r6, #0]
 80017ce:	061f      	lsls	r7, r3, #24
 80017d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80017d4:	d402      	bmi.n	80017dc <_printf_i+0x188>
 80017d6:	065f      	lsls	r7, r3, #25
 80017d8:	bf48      	it	mi
 80017da:	b2ad      	uxthmi	r5, r5
 80017dc:	6031      	str	r1, [r6, #0]
 80017de:	07d9      	lsls	r1, r3, #31
 80017e0:	bf44      	itt	mi
 80017e2:	f043 0320 	orrmi.w	r3, r3, #32
 80017e6:	6023      	strmi	r3, [r4, #0]
 80017e8:	b11d      	cbz	r5, 80017f2 <_printf_i+0x19e>
 80017ea:	2310      	movs	r3, #16
 80017ec:	e7ac      	b.n	8001748 <_printf_i+0xf4>
 80017ee:	4827      	ldr	r0, [pc, #156]	@ (800188c <_printf_i+0x238>)
 80017f0:	e7e9      	b.n	80017c6 <_printf_i+0x172>
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	f023 0320 	bic.w	r3, r3, #32
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	e7f6      	b.n	80017ea <_printf_i+0x196>
 80017fc:	4616      	mov	r6, r2
 80017fe:	e7bd      	b.n	800177c <_printf_i+0x128>
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	6825      	ldr	r5, [r4, #0]
 8001804:	6961      	ldr	r1, [r4, #20]
 8001806:	1d18      	adds	r0, r3, #4
 8001808:	6030      	str	r0, [r6, #0]
 800180a:	062e      	lsls	r6, r5, #24
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	d501      	bpl.n	8001814 <_printf_i+0x1c0>
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	e002      	b.n	800181a <_printf_i+0x1c6>
 8001814:	0668      	lsls	r0, r5, #25
 8001816:	d5fb      	bpl.n	8001810 <_printf_i+0x1bc>
 8001818:	8019      	strh	r1, [r3, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	6123      	str	r3, [r4, #16]
 800181e:	4616      	mov	r6, r2
 8001820:	e7bc      	b.n	800179c <_printf_i+0x148>
 8001822:	6833      	ldr	r3, [r6, #0]
 8001824:	1d1a      	adds	r2, r3, #4
 8001826:	6032      	str	r2, [r6, #0]
 8001828:	681e      	ldr	r6, [r3, #0]
 800182a:	6862      	ldr	r2, [r4, #4]
 800182c:	2100      	movs	r1, #0
 800182e:	4630      	mov	r0, r6
 8001830:	f7fe fcd6 	bl	80001e0 <memchr>
 8001834:	b108      	cbz	r0, 800183a <_printf_i+0x1e6>
 8001836:	1b80      	subs	r0, r0, r6
 8001838:	6060      	str	r0, [r4, #4]
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	6123      	str	r3, [r4, #16]
 800183e:	2300      	movs	r3, #0
 8001840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001844:	e7aa      	b.n	800179c <_printf_i+0x148>
 8001846:	6923      	ldr	r3, [r4, #16]
 8001848:	4632      	mov	r2, r6
 800184a:	4649      	mov	r1, r9
 800184c:	4640      	mov	r0, r8
 800184e:	47d0      	blx	sl
 8001850:	3001      	adds	r0, #1
 8001852:	d0ad      	beq.n	80017b0 <_printf_i+0x15c>
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	079b      	lsls	r3, r3, #30
 8001858:	d413      	bmi.n	8001882 <_printf_i+0x22e>
 800185a:	68e0      	ldr	r0, [r4, #12]
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	4298      	cmp	r0, r3
 8001860:	bfb8      	it	lt
 8001862:	4618      	movlt	r0, r3
 8001864:	e7a6      	b.n	80017b4 <_printf_i+0x160>
 8001866:	2301      	movs	r3, #1
 8001868:	4632      	mov	r2, r6
 800186a:	4649      	mov	r1, r9
 800186c:	4640      	mov	r0, r8
 800186e:	47d0      	blx	sl
 8001870:	3001      	adds	r0, #1
 8001872:	d09d      	beq.n	80017b0 <_printf_i+0x15c>
 8001874:	3501      	adds	r5, #1
 8001876:	68e3      	ldr	r3, [r4, #12]
 8001878:	9903      	ldr	r1, [sp, #12]
 800187a:	1a5b      	subs	r3, r3, r1
 800187c:	42ab      	cmp	r3, r5
 800187e:	dcf2      	bgt.n	8001866 <_printf_i+0x212>
 8001880:	e7eb      	b.n	800185a <_printf_i+0x206>
 8001882:	2500      	movs	r5, #0
 8001884:	f104 0619 	add.w	r6, r4, #25
 8001888:	e7f5      	b.n	8001876 <_printf_i+0x222>
 800188a:	bf00      	nop
 800188c:	08001b73 	.word	0x08001b73
 8001890:	08001b84 	.word	0x08001b84

08001894 <__sflush_r>:
 8001894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189c:	0716      	lsls	r6, r2, #28
 800189e:	4605      	mov	r5, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	d454      	bmi.n	800194e <__sflush_r+0xba>
 80018a4:	684b      	ldr	r3, [r1, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dc02      	bgt.n	80018b0 <__sflush_r+0x1c>
 80018aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd48      	ble.n	8001942 <__sflush_r+0xae>
 80018b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018b2:	2e00      	cmp	r6, #0
 80018b4:	d045      	beq.n	8001942 <__sflush_r+0xae>
 80018b6:	2300      	movs	r3, #0
 80018b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80018bc:	682f      	ldr	r7, [r5, #0]
 80018be:	6a21      	ldr	r1, [r4, #32]
 80018c0:	602b      	str	r3, [r5, #0]
 80018c2:	d030      	beq.n	8001926 <__sflush_r+0x92>
 80018c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018c6:	89a3      	ldrh	r3, [r4, #12]
 80018c8:	0759      	lsls	r1, r3, #29
 80018ca:	d505      	bpl.n	80018d8 <__sflush_r+0x44>
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80018d2:	b10b      	cbz	r3, 80018d8 <__sflush_r+0x44>
 80018d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018d6:	1ad2      	subs	r2, r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018dc:	6a21      	ldr	r1, [r4, #32]
 80018de:	4628      	mov	r0, r5
 80018e0:	47b0      	blx	r6
 80018e2:	1c43      	adds	r3, r0, #1
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	d106      	bne.n	80018f6 <__sflush_r+0x62>
 80018e8:	6829      	ldr	r1, [r5, #0]
 80018ea:	291d      	cmp	r1, #29
 80018ec:	d82b      	bhi.n	8001946 <__sflush_r+0xb2>
 80018ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001998 <__sflush_r+0x104>)
 80018f0:	410a      	asrs	r2, r1
 80018f2:	07d6      	lsls	r6, r2, #31
 80018f4:	d427      	bmi.n	8001946 <__sflush_r+0xb2>
 80018f6:	2200      	movs	r2, #0
 80018f8:	6062      	str	r2, [r4, #4]
 80018fa:	04d9      	lsls	r1, r3, #19
 80018fc:	6922      	ldr	r2, [r4, #16]
 80018fe:	6022      	str	r2, [r4, #0]
 8001900:	d504      	bpl.n	800190c <__sflush_r+0x78>
 8001902:	1c42      	adds	r2, r0, #1
 8001904:	d101      	bne.n	800190a <__sflush_r+0x76>
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	b903      	cbnz	r3, 800190c <__sflush_r+0x78>
 800190a:	6560      	str	r0, [r4, #84]	@ 0x54
 800190c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800190e:	602f      	str	r7, [r5, #0]
 8001910:	b1b9      	cbz	r1, 8001942 <__sflush_r+0xae>
 8001912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001916:	4299      	cmp	r1, r3
 8001918:	d002      	beq.n	8001920 <__sflush_r+0x8c>
 800191a:	4628      	mov	r0, r5
 800191c:	f7ff fbf2 	bl	8001104 <_free_r>
 8001920:	2300      	movs	r3, #0
 8001922:	6363      	str	r3, [r4, #52]	@ 0x34
 8001924:	e00d      	b.n	8001942 <__sflush_r+0xae>
 8001926:	2301      	movs	r3, #1
 8001928:	4628      	mov	r0, r5
 800192a:	47b0      	blx	r6
 800192c:	4602      	mov	r2, r0
 800192e:	1c50      	adds	r0, r2, #1
 8001930:	d1c9      	bne.n	80018c6 <__sflush_r+0x32>
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0c6      	beq.n	80018c6 <__sflush_r+0x32>
 8001938:	2b1d      	cmp	r3, #29
 800193a:	d001      	beq.n	8001940 <__sflush_r+0xac>
 800193c:	2b16      	cmp	r3, #22
 800193e:	d11e      	bne.n	800197e <__sflush_r+0xea>
 8001940:	602f      	str	r7, [r5, #0]
 8001942:	2000      	movs	r0, #0
 8001944:	e022      	b.n	800198c <__sflush_r+0xf8>
 8001946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800194a:	b21b      	sxth	r3, r3
 800194c:	e01b      	b.n	8001986 <__sflush_r+0xf2>
 800194e:	690f      	ldr	r7, [r1, #16]
 8001950:	2f00      	cmp	r7, #0
 8001952:	d0f6      	beq.n	8001942 <__sflush_r+0xae>
 8001954:	0793      	lsls	r3, r2, #30
 8001956:	680e      	ldr	r6, [r1, #0]
 8001958:	bf08      	it	eq
 800195a:	694b      	ldreq	r3, [r1, #20]
 800195c:	600f      	str	r7, [r1, #0]
 800195e:	bf18      	it	ne
 8001960:	2300      	movne	r3, #0
 8001962:	eba6 0807 	sub.w	r8, r6, r7
 8001966:	608b      	str	r3, [r1, #8]
 8001968:	f1b8 0f00 	cmp.w	r8, #0
 800196c:	dde9      	ble.n	8001942 <__sflush_r+0xae>
 800196e:	6a21      	ldr	r1, [r4, #32]
 8001970:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001972:	4643      	mov	r3, r8
 8001974:	463a      	mov	r2, r7
 8001976:	4628      	mov	r0, r5
 8001978:	47b0      	blx	r6
 800197a:	2800      	cmp	r0, #0
 800197c:	dc08      	bgt.n	8001990 <__sflush_r+0xfc>
 800197e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001986:	81a3      	strh	r3, [r4, #12]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001990:	4407      	add	r7, r0
 8001992:	eba8 0800 	sub.w	r8, r8, r0
 8001996:	e7e7      	b.n	8001968 <__sflush_r+0xd4>
 8001998:	dfbffffe 	.word	0xdfbffffe

0800199c <_fflush_r>:
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	690b      	ldr	r3, [r1, #16]
 80019a0:	4605      	mov	r5, r0
 80019a2:	460c      	mov	r4, r1
 80019a4:	b913      	cbnz	r3, 80019ac <_fflush_r+0x10>
 80019a6:	2500      	movs	r5, #0
 80019a8:	4628      	mov	r0, r5
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
 80019ac:	b118      	cbz	r0, 80019b6 <_fflush_r+0x1a>
 80019ae:	6a03      	ldr	r3, [r0, #32]
 80019b0:	b90b      	cbnz	r3, 80019b6 <_fflush_r+0x1a>
 80019b2:	f7ff fa0b 	bl	8000dcc <__sinit>
 80019b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f3      	beq.n	80019a6 <_fflush_r+0xa>
 80019be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019c0:	07d0      	lsls	r0, r2, #31
 80019c2:	d404      	bmi.n	80019ce <_fflush_r+0x32>
 80019c4:	0599      	lsls	r1, r3, #22
 80019c6:	d402      	bmi.n	80019ce <_fflush_r+0x32>
 80019c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019ca:	f7ff fb98 	bl	80010fe <__retarget_lock_acquire_recursive>
 80019ce:	4628      	mov	r0, r5
 80019d0:	4621      	mov	r1, r4
 80019d2:	f7ff ff5f 	bl	8001894 <__sflush_r>
 80019d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019d8:	07da      	lsls	r2, r3, #31
 80019da:	4605      	mov	r5, r0
 80019dc:	d4e4      	bmi.n	80019a8 <_fflush_r+0xc>
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	059b      	lsls	r3, r3, #22
 80019e2:	d4e1      	bmi.n	80019a8 <_fflush_r+0xc>
 80019e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019e6:	f7ff fb8b 	bl	8001100 <__retarget_lock_release_recursive>
 80019ea:	e7dd      	b.n	80019a8 <_fflush_r+0xc>

080019ec <__swhatbuf_r>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	460c      	mov	r4, r1
 80019f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f4:	2900      	cmp	r1, #0
 80019f6:	b096      	sub	sp, #88	@ 0x58
 80019f8:	4615      	mov	r5, r2
 80019fa:	461e      	mov	r6, r3
 80019fc:	da0d      	bge.n	8001a1a <__swhatbuf_r+0x2e>
 80019fe:	89a3      	ldrh	r3, [r4, #12]
 8001a00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2340      	movne	r3, #64	@ 0x40
 8001a0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a10:	2000      	movs	r0, #0
 8001a12:	6031      	str	r1, [r6, #0]
 8001a14:	602b      	str	r3, [r5, #0]
 8001a16:	b016      	add	sp, #88	@ 0x58
 8001a18:	bd70      	pop	{r4, r5, r6, pc}
 8001a1a:	466a      	mov	r2, sp
 8001a1c:	f000 f848 	bl	8001ab0 <_fstat_r>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	dbec      	blt.n	80019fe <__swhatbuf_r+0x12>
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a2e:	4259      	negs	r1, r3
 8001a30:	4159      	adcs	r1, r3
 8001a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a36:	e7eb      	b.n	8001a10 <__swhatbuf_r+0x24>

08001a38 <__smakebuf_r>:
 8001a38:	898b      	ldrh	r3, [r1, #12]
 8001a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a3c:	079d      	lsls	r5, r3, #30
 8001a3e:	4606      	mov	r6, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	d507      	bpl.n	8001a54 <__smakebuf_r+0x1c>
 8001a44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a48:	6023      	str	r3, [r4, #0]
 8001a4a:	6123      	str	r3, [r4, #16]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	6163      	str	r3, [r4, #20]
 8001a50:	b003      	add	sp, #12
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a54:	ab01      	add	r3, sp, #4
 8001a56:	466a      	mov	r2, sp
 8001a58:	f7ff ffc8 	bl	80019ec <__swhatbuf_r>
 8001a5c:	9f00      	ldr	r7, [sp, #0]
 8001a5e:	4605      	mov	r5, r0
 8001a60:	4639      	mov	r1, r7
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff fbba 	bl	80011dc <_malloc_r>
 8001a68:	b948      	cbnz	r0, 8001a7e <__smakebuf_r+0x46>
 8001a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a6e:	059a      	lsls	r2, r3, #22
 8001a70:	d4ee      	bmi.n	8001a50 <__smakebuf_r+0x18>
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	e7e2      	b.n	8001a44 <__smakebuf_r+0xc>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	6020      	str	r0, [r4, #0]
 8001a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a86:	81a3      	strh	r3, [r4, #12]
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001a8e:	b15b      	cbz	r3, 8001aa8 <__smakebuf_r+0x70>
 8001a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a94:	4630      	mov	r0, r6
 8001a96:	f000 f81d 	bl	8001ad4 <_isatty_r>
 8001a9a:	b128      	cbz	r0, 8001aa8 <__smakebuf_r+0x70>
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	81a3      	strh	r3, [r4, #12]
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	431d      	orrs	r5, r3
 8001aac:	81a5      	strh	r5, [r4, #12]
 8001aae:	e7cf      	b.n	8001a50 <__smakebuf_r+0x18>

08001ab0 <_fstat_r>:
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4d07      	ldr	r5, [pc, #28]	@ (8001ad0 <_fstat_r+0x20>)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	602b      	str	r3, [r5, #0]
 8001abe:	f7fe fd48 	bl	8000552 <_fstat>
 8001ac2:	1c43      	adds	r3, r0, #1
 8001ac4:	d102      	bne.n	8001acc <_fstat_r+0x1c>
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	b103      	cbz	r3, 8001acc <_fstat_r+0x1c>
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
 8001ace:	bf00      	nop
 8001ad0:	200001cc 	.word	0x200001cc

08001ad4 <_isatty_r>:
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	4d06      	ldr	r5, [pc, #24]	@ (8001af0 <_isatty_r+0x1c>)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4604      	mov	r4, r0
 8001adc:	4608      	mov	r0, r1
 8001ade:	602b      	str	r3, [r5, #0]
 8001ae0:	f7fe fd47 	bl	8000572 <_isatty>
 8001ae4:	1c43      	adds	r3, r0, #1
 8001ae6:	d102      	bne.n	8001aee <_isatty_r+0x1a>
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	b103      	cbz	r3, 8001aee <_isatty_r+0x1a>
 8001aec:	6023      	str	r3, [r4, #0]
 8001aee:	bd38      	pop	{r3, r4, r5, pc}
 8001af0:	200001cc 	.word	0x200001cc

08001af4 <_sbrk_r>:
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	4d06      	ldr	r5, [pc, #24]	@ (8001b10 <_sbrk_r+0x1c>)
 8001af8:	2300      	movs	r3, #0
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	602b      	str	r3, [r5, #0]
 8001b00:	f7fe fd50 	bl	80005a4 <_sbrk>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d102      	bne.n	8001b0e <_sbrk_r+0x1a>
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	b103      	cbz	r3, 8001b0e <_sbrk_r+0x1a>
 8001b0c:	6023      	str	r3, [r4, #0]
 8001b0e:	bd38      	pop	{r3, r4, r5, pc}
 8001b10:	200001cc 	.word	0x200001cc

08001b14 <_init>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	bf00      	nop
 8001b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1a:	bc08      	pop	{r3}
 8001b1c:	469e      	mov	lr, r3
 8001b1e:	4770      	bx	lr

08001b20 <_fini>:
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b22:	bf00      	nop
 8001b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b26:	bc08      	pop	{r3}
 8001b28:	469e      	mov	lr, r3
 8001b2a:	4770      	bx	lr
