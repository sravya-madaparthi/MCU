
2isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000093c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad4  08000ad4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ad4  08000ad4  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad4  08000ad4  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad4  08000ad4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad4  08000ad4  00001ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ad8  08000ad8  00001ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000adc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000ae8  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000ae8  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003372  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c9f  00000000  00000000  000053ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  00006050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000028a  00000000  00000000  000063e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014506  00000000  00000000  0000666a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004145  00000000  00000000  0001ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081452  00000000  00000000  0001ecb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c58  00000000  00000000  000a014c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a0da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000abc 	.word	0x08000abc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000abc 	.word	0x08000abc

080001d8 <main>:
// Function prototypes
void SystemClock_Config(void);
void GPIO_Config(void);
void EXTI9_5_IRQHandler(void);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    // Initialize system clock and peripherals
    HAL_Init();
 80001dc:	f000 f934 	bl	8000448 <HAL_Init>
    SystemClock_Config();
 80001e0:	f000 f804 	bl	80001ec <SystemClock_Config>
    GPIO_Config();
 80001e4:	f000 f80a 	bl	80001fc <GPIO_Config>

    while (1) {
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <main+0x10>

080001ec <SystemClock_Config>:
        // Main loop does nothing, waiting for interrupt
    }
}

// Configure System Clock (Assumes default HSE/HCLK settings)
void SystemClock_Config(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    // Configure system clock if necessary (depends on your board)
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
	...

080001fc <GPIO_Config>:

// Configure GPIO for LED and Button with Interrupt
void GPIO_Config(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable clock for GPIOA (LED)
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	4b2c      	ldr	r3, [pc, #176]	@ (80002b8 <GPIO_Config+0xbc>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020a:	4a2b      	ldr	r2, [pc, #172]	@ (80002b8 <GPIO_Config+0xbc>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6313      	str	r3, [r2, #48]	@ 0x30
 8000212:	4b29      	ldr	r3, [pc, #164]	@ (80002b8 <GPIO_Config+0xbc>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
 800021c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable clock for GPIOC (Button)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	4b25      	ldr	r3, [pc, #148]	@ (80002b8 <GPIO_Config+0xbc>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	4a24      	ldr	r2, [pc, #144]	@ (80002b8 <GPIO_Config+0xbc>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6313      	str	r3, [r2, #48]	@ 0x30
 800022e:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <GPIO_Config+0xbc>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	f003 0304 	and.w	r3, r3, #4
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE(); // Enable clock for SYSCFG (Interrupts)
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
 800023e:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <GPIO_Config+0xbc>)
 8000240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000242:	4a1d      	ldr	r2, [pc, #116]	@ (80002b8 <GPIO_Config+0xbc>)
 8000244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000248:	6453      	str	r3, [r2, #68]	@ 0x44
 800024a:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <GPIO_Config+0xbc>)
 800024c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800024e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 030c 	add.w	r3, r7, #12
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

    // Configure LED pin (PA8) as output
    GPIO_InitStruct.Pin = LED_PIN;
 8000266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800026a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026c:	2301      	movs	r3, #1
 800026e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000274:	2300      	movs	r3, #0
 8000276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	4619      	mov	r1, r3
 800027e:	480f      	ldr	r0, [pc, #60]	@ (80002bc <GPIO_Config+0xc0>)
 8000280:	f000 fa5a 	bl	8000738 <HAL_GPIO_Init>

    // Configure Button pin (PC9) as input with interrupt
    GPIO_InitStruct.Pin = BUTTON_PIN;
 8000284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000288:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800028a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800028e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // Pull-up resistor to prevent floating input
 8000290:	2301      	movs	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000294:	f107 030c 	add.w	r3, r7, #12
 8000298:	4619      	mov	r1, r3
 800029a:	4809      	ldr	r0, [pc, #36]	@ (80002c0 <GPIO_Config+0xc4>)
 800029c:	f000 fa4c 	bl	8000738 <HAL_GPIO_Init>

    // Enable EXTI Line 9 interrupt
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2102      	movs	r1, #2
 80002a4:	2017      	movs	r0, #23
 80002a6:	f000 fa10 	bl	80006ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002aa:	2017      	movs	r0, #23
 80002ac:	f000 fa29 	bl	8000702 <HAL_NVIC_EnableIRQ>
}
 80002b0:	bf00      	nop
 80002b2:	3720      	adds	r7, #32
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40020800 	.word	0x40020800

080002c4 <EXTI9_5_IRQHandler>:

// External Interrupt Handler for Button Press (PC9)
void EXTI9_5_IRQHandler(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(BUTTON_PIN) != RESET) {
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <EXTI9_5_IRQHandler+0x50>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d01c      	beq.n	800030e <EXTI9_5_IRQHandler+0x4a>
        __HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN); // Clear interrupt flag
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <EXTI9_5_IRQHandler+0x50>)
 80002d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002da:	615a      	str	r2, [r3, #20]

        // Toggle LED state
        ledState =! ledState;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <EXTI9_5_IRQHandler+0x54>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <EXTI9_5_IRQHandler+0x54>)
 80002f0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, (ledState) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <EXTI9_5_IRQHandler+0x54>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <EXTI9_5_IRQHandler+0x58>)
 800030a:	f000 fb99 	bl	8000a40 <HAL_GPIO_WritePin>
    }
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40013c00 	.word	0x40013c00
 8000318:	20000028 	.word	0x20000028
 800031c:	40020000 	.word	0x40020000

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	4b10      	ldr	r3, [pc, #64]	@ (800036c <HAL_MspInit+0x4c>)
 800032c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800032e:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <HAL_MspInit+0x4c>)
 8000330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000334:	6453      	str	r3, [r2, #68]	@ 0x44
 8000336:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <HAL_MspInit+0x4c>)
 8000338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800033a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	2300      	movs	r3, #0
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <HAL_MspInit+0x4c>)
 8000348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034a:	4a08      	ldr	r2, [pc, #32]	@ (800036c <HAL_MspInit+0x4c>)
 800034c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000350:	6413      	str	r3, [r2, #64]	@ 0x40
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <HAL_MspInit+0x4c>)
 8000354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800035e:	2007      	movs	r0, #7
 8000360:	f000 f9a8 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800

08000370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <NMI_Handler+0x4>

08000378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <HardFault_Handler+0x4>

08000380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <MemManage_Handler+0x4>

08000388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <BusFault_Handler+0x4>

08000390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <UsageFault_Handler+0x4>

08000398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c6:	f000 f891 	bl	80004ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <SystemInit+0x20>)
 80003d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003da:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <SystemInit+0x20>)
 80003dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800042c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003f8:	f7ff ffea 	bl	80003d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000422:	f000 fb27 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000426:	f7ff fed7 	bl	80001d8 <main>
  bx  lr    
 800042a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800042c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000438:	08000adc 	.word	0x08000adc
  ldr r2, =_sbss
 800043c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000440:	20000030 	.word	0x20000030

08000444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC_IRQHandler>
	...

08000448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800044c:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <HAL_Init+0x40>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <HAL_Init+0x40>)
 8000452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <HAL_Init+0x40>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <HAL_Init+0x40>)
 800045e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000464:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <HAL_Init+0x40>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a07      	ldr	r2, [pc, #28]	@ (8000488 <HAL_Init+0x40>)
 800046a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800046e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000470:	2003      	movs	r0, #3
 8000472:	f000 f91f 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000476:	2000      	movs	r0, #0
 8000478:	f000 f808 	bl	800048c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800047c:	f7ff ff50 	bl	8000320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40023c00 	.word	0x40023c00

0800048c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <HAL_InitTick+0x54>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <HAL_InitTick+0x58>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f937 	bl	800071e <HAL_SYSTICK_Config>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	e00e      	b.n	80004d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b0f      	cmp	r3, #15
 80004be:	d80a      	bhi.n	80004d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c0:	2200      	movs	r2, #0
 80004c2:	6879      	ldr	r1, [r7, #4]
 80004c4:	f04f 30ff 	mov.w	r0, #4294967295
 80004c8:	f000 f8ff 	bl	80006ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <HAL_InitTick+0x5c>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e000      	b.n	80004d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000008 	.word	0x20000008
 80004e8:	20000004 	.word	0x20000004

080004ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_IncTick+0x20>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_IncTick+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <HAL_IncTick+0x24>)
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000008 	.word	0x20000008
 8000510:	2000002c 	.word	0x2000002c

08000514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000546:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	60d3      	str	r3, [r2, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <__NVIC_GetPriorityGrouping+0x18>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	f003 0307 	and.w	r3, r3, #7
}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	db0b      	blt.n	80005a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 021f 	and.w	r2, r3, #31
 8000590:	4907      	ldr	r1, [pc, #28]	@ (80005b0 <__NVIC_EnableIRQ+0x38>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	2001      	movs	r0, #1
 800059a:	fa00 f202 	lsl.w	r2, r0, r2
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db0a      	blt.n	80005de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	490c      	ldr	r1, [pc, #48]	@ (8000600 <__NVIC_SetPriority+0x4c>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005dc:	e00a      	b.n	80005f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4908      	ldr	r1, [pc, #32]	@ (8000604 <__NVIC_SetPriority+0x50>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	3b04      	subs	r3, #4
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	b2d2      	uxtb	r2, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	761a      	strb	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000608:	b480      	push	{r7}
 800060a:	b089      	sub	sp, #36	@ 0x24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	f1c3 0307 	rsb	r3, r3, #7
 8000622:	2b04      	cmp	r3, #4
 8000624:	bf28      	it	cs
 8000626:	2304      	movcs	r3, #4
 8000628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	3304      	adds	r3, #4
 800062e:	2b06      	cmp	r3, #6
 8000630:	d902      	bls.n	8000638 <NVIC_EncodePriority+0x30>
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3b03      	subs	r3, #3
 8000636:	e000      	b.n	800063a <NVIC_EncodePriority+0x32>
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f04f 32ff 	mov.w	r2, #4294967295
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43da      	mvns	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	401a      	ands	r2, r3
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000650:	f04f 31ff 	mov.w	r1, #4294967295
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	43d9      	mvns	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	4313      	orrs	r3, r2
         );
}
 8000662:	4618      	mov	r0, r3
 8000664:	3724      	adds	r7, #36	@ 0x24
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000680:	d301      	bcc.n	8000686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2301      	movs	r3, #1
 8000684:	e00f      	b.n	80006a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <SysTick_Config+0x40>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068e:	210f      	movs	r1, #15
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f7ff ff8e 	bl	80005b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <SysTick_Config+0x40>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <SysTick_Config+0x40>)
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff29 	bl	8000514 <__NVIC_SetPriorityGrouping>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006dc:	f7ff ff3e 	bl	800055c <__NVIC_GetPriorityGrouping>
 80006e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	f7ff ff8e 	bl	8000608 <NVIC_EncodePriority>
 80006ec:	4602      	mov	r2, r0
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff5d 	bl	80005b4 <__NVIC_SetPriority>
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff31 	bl	8000578 <__NVIC_EnableIRQ>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffa2 	bl	8000670 <SysTick_Config>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e159      	b.n	8000a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000754:	2201      	movs	r2, #1
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	429a      	cmp	r2, r3
 800076e:	f040 8148 	bne.w	8000a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f003 0303 	and.w	r3, r3, #3
 800077a:	2b01      	cmp	r3, #1
 800077c:	d005      	beq.n	800078a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000786:	2b02      	cmp	r3, #2
 8000788:	d130      	bne.n	80007ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2203      	movs	r2, #3
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	4013      	ands	r3, r2
 80007a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c0:	2201      	movs	r2, #1
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	4013      	ands	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f003 0201 	and.w	r2, r3, #1
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d017      	beq.n	8000828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	4013      	ands	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4313      	orrs	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	2b02      	cmp	r3, #2
 8000832:	d123      	bne.n	800087c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	220f      	movs	r2, #15
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	691a      	ldr	r2, [r3, #16]
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4313      	orrs	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	69b9      	ldr	r1, [r7, #24]
 8000878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0203 	and.w	r2, r3, #3
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 80a2 	beq.w	8000a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b57      	ldr	r3, [pc, #348]	@ (8000a20 <HAL_GPIO_Init+0x2e8>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a56      	ldr	r2, [pc, #344]	@ (8000a20 <HAL_GPIO_Init+0x2e8>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b54      	ldr	r3, [pc, #336]	@ (8000a20 <HAL_GPIO_Init+0x2e8>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008da:	4a52      	ldr	r2, [pc, #328]	@ (8000a24 <HAL_GPIO_Init+0x2ec>)
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3302      	adds	r3, #2
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	220f      	movs	r2, #15
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a49      	ldr	r2, [pc, #292]	@ (8000a28 <HAL_GPIO_Init+0x2f0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d019      	beq.n	800093a <HAL_GPIO_Init+0x202>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a48      	ldr	r2, [pc, #288]	@ (8000a2c <HAL_GPIO_Init+0x2f4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d013      	beq.n	8000936 <HAL_GPIO_Init+0x1fe>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a47      	ldr	r2, [pc, #284]	@ (8000a30 <HAL_GPIO_Init+0x2f8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d00d      	beq.n	8000932 <HAL_GPIO_Init+0x1fa>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a46      	ldr	r2, [pc, #280]	@ (8000a34 <HAL_GPIO_Init+0x2fc>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d007      	beq.n	800092e <HAL_GPIO_Init+0x1f6>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a45      	ldr	r2, [pc, #276]	@ (8000a38 <HAL_GPIO_Init+0x300>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_GPIO_Init+0x1f2>
 8000926:	2304      	movs	r3, #4
 8000928:	e008      	b.n	800093c <HAL_GPIO_Init+0x204>
 800092a:	2307      	movs	r3, #7
 800092c:	e006      	b.n	800093c <HAL_GPIO_Init+0x204>
 800092e:	2303      	movs	r3, #3
 8000930:	e004      	b.n	800093c <HAL_GPIO_Init+0x204>
 8000932:	2302      	movs	r3, #2
 8000934:	e002      	b.n	800093c <HAL_GPIO_Init+0x204>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <HAL_GPIO_Init+0x204>
 800093a:	2300      	movs	r3, #0
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	f002 0203 	and.w	r2, r2, #3
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	4093      	lsls	r3, r2
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800094c:	4935      	ldr	r1, [pc, #212]	@ (8000a24 <HAL_GPIO_Init+0x2ec>)
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	3302      	adds	r3, #2
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800095a:	4b38      	ldr	r3, [pc, #224]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800097e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000984:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	43db      	mvns	r3, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009a8:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009d2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009fc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_GPIO_Init+0x304>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3301      	adds	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	f67f aea2 	bls.w	8000754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3724      	adds	r7, #36	@ 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40013c00 	.word	0x40013c00

08000a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a56:	887a      	ldrh	r2, [r7, #2]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a5c:	e003      	b.n	8000a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	041a      	lsls	r2, r3, #16
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	619a      	str	r2, [r3, #24]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4d0d      	ldr	r5, [pc, #52]	@ (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	42a6      	cmp	r6, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 f818 	bl	8000abc <_init>
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2600      	movs	r6, #0
 8000a92:	42a6      	cmp	r6, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9c:	4798      	blx	r3
 8000a9e:	3601      	adds	r6, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa6:	4798      	blx	r3
 8000aa8:	3601      	adds	r6, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	08000ad4 	.word	0x08000ad4
 8000ab0:	08000ad4 	.word	0x08000ad4
 8000ab4:	08000ad4 	.word	0x08000ad4
 8000ab8:	08000ad8 	.word	0x08000ad8

08000abc <_init>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr

08000ac8 <_fini>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	bf00      	nop
 8000acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ace:	bc08      	pop	{r3}
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	4770      	bx	lr
