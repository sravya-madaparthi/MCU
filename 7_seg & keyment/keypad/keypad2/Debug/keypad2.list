
keypad2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  08000444  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  08000444  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800044c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000450  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000450  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000129a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000517  00000000  00000000  000032ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000037e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014a  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f53  00000000  00000000  00003b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021bb  00000000  00000000  00017a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a47  00000000  00000000  00019c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a65f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  0009a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0009ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800042c 	.word	0x0800042c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800042c 	.word	0x0800042c

080001d8 <main>:

void delay(void);
void keypad_init(void);
char keypad_kbhit(void);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    keypad_init();
 80001dc:	f000 f826 	bl	800022c <keypad_init>

    // Enable PA5 for green LED
    RCC->AHB1ENR |= 1;            /* enable GPIOA clock */
 80001e0:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <main+0x4c>)
 80001e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <main+0x4c>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~0xC0000C00;  /* clear pin mode */
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <main+0x50>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <main+0x50>)
 80001f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80001f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x00000400;   /* set PA5 to output mode */
 80001fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <main+0x50>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <main+0x50>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000206:	6013      	str	r3, [r2, #0]

    while (1) {
        if (keypad_kbhit() != 0)  /* if a key is pressed */
 8000208:	f000 f82e 	bl	8000268 <keypad_kbhit>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d003      	beq.n	800021a <main+0x42>
            GPIOA->BSRR = 0x00000020; /* turn on green LED */
 8000212:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <main+0x50>)
 8000214:	2220      	movs	r2, #32
 8000216:	619a      	str	r2, [r3, #24]
 8000218:	e7f6      	b.n	8000208 <main+0x30>
        else
            GPIOA->BSRR = 0x00200000; /* turn off green LED */
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <main+0x50>)
 800021c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000220:	619a      	str	r2, [r3, #24]
        if (keypad_kbhit() != 0)  /* if a key is pressed */
 8000222:	e7f1      	b.n	8000208 <main+0x30>
 8000224:	40023800 	.word	0x40023800
 8000228:	40020000 	.word	0x40020000

0800022c <keypad_init>:
}

/* This function initializes PC0-3 (columns) and PC4-7 (rows).
 * The column pins need to have the pull-up resistors enabled.
 */
void keypad_init(void) {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2);     /* enable GPIOC clock */
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <keypad_init+0x34>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <keypad_init+0x34>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER &= ~0x0000FFFF;  /* clear pin mode to input */
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <keypad_init+0x38>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <keypad_init+0x38>)
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	041b      	lsls	r3, r3, #16
 8000246:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= 0x00000055;   /* enable pull-up resistors for column pins */
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <keypad_init+0x38>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <keypad_init+0x38>)
 800024e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000252:	60d3      	str	r3, [r2, #12]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020800 	.word	0x40020800

08000268 <keypad_kbhit>:

/* This is a non-blocking function.
 * If a key is pressed, it returns 1. Otherwise, it returns 0.
 */
char keypad_kbhit(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
    int col;

    GPIOC->MODER |= 0x00005500;   /* make all row pins output */
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <keypad_kbhit+0x48>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0f      	ldr	r2, [pc, #60]	@ (80002b0 <keypad_kbhit+0x48>)
 8000274:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000278:	6013      	str	r3, [r2, #0]
    GPIOC->BSRR = 0x00F00000;     /* drive all row pins low */
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <keypad_kbhit+0x48>)
 800027c:	f44f 0270 	mov.w	r2, #15728640	@ 0xf00000
 8000280:	619a      	str	r2, [r3, #24]
    delay();                      /* wait for signals to settle */
 8000282:	f000 f817 	bl	80002b4 <delay>
    col = GPIOC->IDR & 0x000F;    /* read all column pins */
 8000286:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <keypad_kbhit+0x48>)
 8000288:	691b      	ldr	r3, [r3, #16]
 800028a:	f003 030f 	and.w	r3, r3, #15
 800028e:	607b      	str	r3, [r7, #4]
    GPIOC->MODER &= ~0x0000FF00;  /* disable all row pins drive */
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <keypad_kbhit+0x48>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <keypad_kbhit+0x48>)
 8000296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800029a:	6013      	str	r3, [r2, #0]

    if (col == 0x000F)            /* if all columns are high */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b0f      	cmp	r3, #15
 80002a0:	d101      	bne.n	80002a6 <keypad_kbhit+0x3e>
        return 0;                 /* no key pressed */
 80002a2:	2300      	movs	r3, #0
 80002a4:	e000      	b.n	80002a8 <keypad_kbhit+0x40>
    else
        return 1;                 /* a key is pressed */
 80002a6:	2301      	movs	r3, #1
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40020800 	.word	0x40020800

080002b4 <delay>:

/* Small delay function */
void delay(void) {
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 100000; i++)  /* increased delay for better debouncing */
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	e003      	b.n	80002c8 <delay+0x14>
        __NOP();                   /* no operation */
 80002c0:	bf00      	nop
    for (i = 0; i < 100000; i++)  /* increased delay for better debouncing */
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a05      	ldr	r2, [pc, #20]	@ (80002e0 <delay+0x2c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	ddf7      	ble.n	80002c0 <delay+0xc>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	0001869f 	.word	0x0001869f

080002e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002e8:	bf00      	nop
 80002ea:	e7fd      	b.n	80002e8 <NMI_Handler+0x4>

080002ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <MemManage_Handler+0x4>

080002fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <UsageFault_Handler+0x4>

0800030c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800033a:	f000 f83f 	bl	80003bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <SystemInit+0x20>)
 800034a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800034e:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <SystemInit+0x20>)
 8000350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800036c:	f7ff ffea 	bl	8000344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000396:	f000 f825 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800039a:	f7ff ff1d 	bl	80001d8 <main>
  bx  lr    
 800039e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ac:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b4:	20000024 	.word	0x20000024

080003b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <HAL_IncTick+0x20>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <HAL_IncTick+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <HAL_IncTick+0x24>)
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000020 	.word	0x20000020

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
