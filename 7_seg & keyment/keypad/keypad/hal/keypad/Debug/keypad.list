
keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001974  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001b14  08001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b60  08001b60  00003068  2**0
                  CONTENTS
  4 .ARM          00000008  08001b60  08001b60  00002b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b68  08001b68  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b68  08001b68  00002b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b6c  08001b6c  00002b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001b70  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001bd8  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001bd8  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032de  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e39  00000000  00000000  00006376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  000071b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000309  00000000  00000000  000075f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a84  00000000  00000000  00007901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ee1  00000000  00000000  0001d385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084979  00000000  00000000  00022266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6bdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a0  00000000  00000000  000a6c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000a82c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001afc 	.word	0x08001afc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001afc 	.word	0x08001afc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
// Function prototypes
void SystemClock_Config(void);
void GPIO_Init(void);
void Scan_Keypad(void);

int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    // Initialize HAL Library
    HAL_Init();
 8000284:	f000 f9d8 	bl	8000638 <HAL_Init>
    SystemClock_Config();
 8000288:	f000 f898 	bl	80003bc <SystemClock_Config>
    GPIO_Init();
 800028c:	f000 f808 	bl	80002a0 <GPIO_Init>

    while (1) {
        Scan_Keypad();
 8000290:	f000 f83e 	bl	8000310 <Scan_Keypad>
        HAL_Delay(100); // Small delay for debouncing
 8000294:	2064      	movs	r0, #100	@ 0x64
 8000296:	f000 fa41 	bl	800071c <HAL_Delay>
        Scan_Keypad();
 800029a:	bf00      	nop
 800029c:	e7f8      	b.n	8000290 <main+0x10>
	...

080002a0 <GPIO_Init>:
    }
}

// Function to initialize GPIO
void GPIO_Init(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA clock
 80002a6:	2300      	movs	r3, #0
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <GPIO_Init+0x68>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ae:	4a16      	ldr	r2, [pc, #88]	@ (8000308 <GPIO_Init+0x68>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002b6:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <GPIO_Init+0x68>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]

    // Configure ROWS as INPUT with PULL-UP
    GPIO_InitStruct.Pin = ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN;
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d8:	2301      	movs	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(ROW_PORT, &GPIO_InitStruct);
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4809      	ldr	r0, [pc, #36]	@ (800030c <GPIO_Init+0x6c>)
 80002e6:	f000 fb23 	bl	8000930 <HAL_GPIO_Init>

    // Configure COLUMNS as OUTPUT
    GPIO_InitStruct.Pin = COL1_PIN | COL2_PIN | COL3_PIN | COL4_PIN;
 80002ea:	23f0      	movs	r3, #240	@ 0xf0
 80002ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(COL_PORT, &GPIO_InitStruct);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	4804      	ldr	r0, [pc, #16]	@ (800030c <GPIO_Init+0x6c>)
 80002fc:	f000 fb18 	bl	8000930 <HAL_GPIO_Init>
}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000

08000310 <Scan_Keypad>:

// Function to scan keypad row
void Scan_Keypad(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
    uint8_t row_detected = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	71fb      	strb	r3, [r7, #7]

    // Set all columns LOW one by one
    for (uint8_t col = 0; col < 4; col++) {
 800031a:	2300      	movs	r3, #0
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	e03a      	b.n	8000396 <Scan_Keypad+0x86>
        HAL_GPIO_WritePin(COL_PORT, (COL1_PIN << col), GPIO_PIN_RESET); // Set column LOW
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	2210      	movs	r2, #16
 8000324:	fa02 f303 	lsl.w	r3, r2, r3
 8000328:	b29b      	uxth	r3, r3
 800032a:	2200      	movs	r2, #0
 800032c:	4619      	mov	r1, r3
 800032e:	4821      	ldr	r0, [pc, #132]	@ (80003b4 <Scan_Keypad+0xa4>)
 8000330:	f000 fc9a 	bl	8000c68 <HAL_GPIO_WritePin>

        // Check which row gets pulled LOW
        if (HAL_GPIO_ReadPin(ROW_PORT, ROW1_PIN) == GPIO_PIN_RESET) {
 8000334:	2101      	movs	r1, #1
 8000336:	481f      	ldr	r0, [pc, #124]	@ (80003b4 <Scan_Keypad+0xa4>)
 8000338:	f000 fc7e 	bl	8000c38 <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d101      	bne.n	8000346 <Scan_Keypad+0x36>
            row_detected = 1;
 8000342:	2301      	movs	r3, #1
 8000344:	71fb      	strb	r3, [r7, #7]
        }
        if (HAL_GPIO_ReadPin(ROW_PORT, ROW2_PIN) == GPIO_PIN_RESET) {
 8000346:	2102      	movs	r1, #2
 8000348:	481a      	ldr	r0, [pc, #104]	@ (80003b4 <Scan_Keypad+0xa4>)
 800034a:	f000 fc75 	bl	8000c38 <HAL_GPIO_ReadPin>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <Scan_Keypad+0x48>
            row_detected = 2;
 8000354:	2302      	movs	r3, #2
 8000356:	71fb      	strb	r3, [r7, #7]
        }
        if (HAL_GPIO_ReadPin(ROW_PORT, ROW3_PIN) == GPIO_PIN_RESET) {
 8000358:	2104      	movs	r1, #4
 800035a:	4816      	ldr	r0, [pc, #88]	@ (80003b4 <Scan_Keypad+0xa4>)
 800035c:	f000 fc6c 	bl	8000c38 <HAL_GPIO_ReadPin>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <Scan_Keypad+0x5a>
            row_detected = 3;
 8000366:	2303      	movs	r3, #3
 8000368:	71fb      	strb	r3, [r7, #7]
        }
        if (HAL_GPIO_ReadPin(ROW_PORT, ROW4_PIN) == GPIO_PIN_RESET) {
 800036a:	2108      	movs	r1, #8
 800036c:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <Scan_Keypad+0xa4>)
 800036e:	f000 fc63 	bl	8000c38 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d101      	bne.n	800037c <Scan_Keypad+0x6c>
            row_detected = 4;
 8000378:	2304      	movs	r3, #4
 800037a:	71fb      	strb	r3, [r7, #7]
        }

        // Set column HIGH again
        HAL_GPIO_WritePin(COL_PORT, (COL1_PIN << col), GPIO_PIN_SET);
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2210      	movs	r2, #16
 8000380:	fa02 f303 	lsl.w	r3, r2, r3
 8000384:	b29b      	uxth	r3, r3
 8000386:	2201      	movs	r2, #1
 8000388:	4619      	mov	r1, r3
 800038a:	480a      	ldr	r0, [pc, #40]	@ (80003b4 <Scan_Keypad+0xa4>)
 800038c:	f000 fc6c 	bl	8000c68 <HAL_GPIO_WritePin>
    for (uint8_t col = 0; col < 4; col++) {
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	3301      	adds	r3, #1
 8000394:	71bb      	strb	r3, [r7, #6]
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d9c1      	bls.n	8000320 <Scan_Keypad+0x10>
    }

    // Print the detected row (Replace this with any output you want)
    if (row_detected != 0) {
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d004      	beq.n	80003ac <Scan_Keypad+0x9c>
        printf("Key Pressed in Row: %d\n", row_detected);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4619      	mov	r1, r3
 80003a6:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <Scan_Keypad+0xa8>)
 80003a8:	f000 fd3a 	bl	8000e20 <iprintf>
    }
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40020000 	.word	0x40020000
 80003b8:	08001b14 	.word	0x08001b14

080003bc <SystemClock_Config>:

// Dummy System Clock Configuration function (Modify as needed)
void SystemClock_Config(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    // System Clock Configuration - Modify according to your board settings
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <HAL_MspInit+0x4c>)
 80003d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003da:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <HAL_MspInit+0x4c>)
 80003dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <HAL_MspInit+0x4c>)
 80003e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	2300      	movs	r3, #0
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <HAL_MspInit+0x4c>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <HAL_MspInit+0x4c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_MspInit+0x4c>)
 8000400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800040a:	2007      	movs	r0, #7
 800040c:	f000 fa5c 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40023800 	.word	0x40023800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <NMI_Handler+0x4>

08000424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <UsageFault_Handler+0x4>

08000444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000472:	f000 f933 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}

0800047a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e00a      	b.n	80004a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800048c:	f3af 8000 	nop.w
 8000490:	4601      	mov	r1, r0
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	60ba      	str	r2, [r7, #8]
 8000498:	b2ca      	uxtb	r2, r1
 800049a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	3301      	adds	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	697a      	ldr	r2, [r7, #20]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	dbf0      	blt.n	800048c <_read+0x12>
  }

  return len;
 80004aa:	687b      	ldr	r3, [r7, #4]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e009      	b.n	80004da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	1c5a      	adds	r2, r3, #1
 80004ca:	60ba      	str	r2, [r7, #8]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	3301      	adds	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	429a      	cmp	r2, r3
 80004e0:	dbf1      	blt.n	80004c6 <_write+0x12>
  }
  return len;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_close>:

int _close(int file)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000514:	605a      	str	r2, [r3, #4]
  return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <_isatty>:

int _isatty(int file)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800052c:	2301      	movs	r3, #1
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800053a:	b480      	push	{r7}
 800053c:	b085      	sub	sp, #20
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <_sbrk+0x5c>)
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <_sbrk+0x60>)
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <_sbrk+0x64>)
 8000572:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <_sbrk+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	429a      	cmp	r2, r3
 8000582:	d207      	bcs.n	8000594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000584:	f000 fcf0 	bl	8000f68 <__errno>
 8000588:	4603      	mov	r3, r0
 800058a:	220c      	movs	r2, #12
 800058c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e009      	b.n	80005a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <_sbrk+0x64>)
 80005a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20020000 	.word	0x20020000
 80005b4:	00000400 	.word	0x00000400
 80005b8:	20000084 	.word	0x20000084
 80005bc:	200001d8 	.word	0x200001d8

080005c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <SystemInit+0x20>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <SystemInit+0x20>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800061c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005e8:	f7ff ffea 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f000 fcaf 	bl	8000f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f7ff fe33 	bl	8000280 <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800061c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000628:	08001b70 	.word	0x08001b70
  ldr r2, =_sbss
 800062c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000630:	200001d8 	.word	0x200001d8

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <HAL_Init+0x40>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <HAL_Init+0x40>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <HAL_Init+0x40>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <HAL_Init+0x40>)
 800064e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <HAL_Init+0x40>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_Init+0x40>)
 800065a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800065e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f931 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff feae 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023c00 	.word	0x40023c00

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f93b 	bl	8000916 <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 f911 	bl	80008de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	@ (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000088 	.word	0x20000088

08000704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <HAL_GetTick+0x14>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000088 	.word	0x20000088

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff ffee 	bl	8000704 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffde 	bl	8000704 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000894:	d301      	bcc.n	800089a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000896:	2301      	movs	r3, #1
 8000898:	e00f      	b.n	80008ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <SysTick_Config+0x40>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a2:	210f      	movs	r1, #15
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f7ff ff8e 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <SysTick_Config+0x40>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <SysTick_Config+0x40>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	e000e010 	.word	0xe000e010

080008c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff47 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff5c 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff8e 	bl	800081c <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff5d 	bl	80007c8 <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffb0 	bl	8000884 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	@ 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	e159      	b.n	8000c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	429a      	cmp	r2, r3
 8000966:	f040 8148 	bne.w	8000bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	2b01      	cmp	r3, #1
 8000974:	d005      	beq.n	8000982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800097e:	2b02      	cmp	r3, #2
 8000980:	d130      	bne.n	80009e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4013      	ands	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b8:	2201      	movs	r2, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	f003 0201 	and.w	r2, r3, #1
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4313      	orrs	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d017      	beq.n	8000a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d123      	bne.n	8000a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	08da      	lsrs	r2, r3, #3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3208      	adds	r2, #8
 8000a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	691a      	ldr	r2, [r3, #16]
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	69b9      	ldr	r1, [r7, #24]
 8000a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0203 	and.w	r2, r3, #3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80a2 	beq.w	8000bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b57      	ldr	r3, [pc, #348]	@ (8000c18 <HAL_GPIO_Init+0x2e8>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a56      	ldr	r2, [pc, #344]	@ (8000c18 <HAL_GPIO_Init+0x2e8>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b54      	ldr	r3, [pc, #336]	@ (8000c18 <HAL_GPIO_Init+0x2e8>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ad2:	4a52      	ldr	r2, [pc, #328]	@ (8000c1c <HAL_GPIO_Init+0x2ec>)
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220f      	movs	r2, #15
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a49      	ldr	r2, [pc, #292]	@ (8000c20 <HAL_GPIO_Init+0x2f0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d019      	beq.n	8000b32 <HAL_GPIO_Init+0x202>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a48      	ldr	r2, [pc, #288]	@ (8000c24 <HAL_GPIO_Init+0x2f4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0x1fe>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a47      	ldr	r2, [pc, #284]	@ (8000c28 <HAL_GPIO_Init+0x2f8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00d      	beq.n	8000b2a <HAL_GPIO_Init+0x1fa>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a46      	ldr	r2, [pc, #280]	@ (8000c2c <HAL_GPIO_Init+0x2fc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x1f6>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a45      	ldr	r2, [pc, #276]	@ (8000c30 <HAL_GPIO_Init+0x300>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_GPIO_Init+0x1f2>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e008      	b.n	8000b34 <HAL_GPIO_Init+0x204>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x204>
 8000b26:	2303      	movs	r3, #3
 8000b28:	e004      	b.n	8000b34 <HAL_GPIO_Init+0x204>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_Init+0x204>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <HAL_GPIO_Init+0x204>
 8000b32:	2300      	movs	r3, #0
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	f002 0203 	and.w	r2, r2, #3
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	4093      	lsls	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b44:	4935      	ldr	r1, [pc, #212]	@ (8000c1c <HAL_GPIO_Init+0x2ec>)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b52:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b76:	4a2f      	ldr	r2, [pc, #188]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba0:	4a24      	ldr	r2, [pc, #144]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bca:	4a1a      	ldr	r2, [pc, #104]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_GPIO_Init+0x304>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	f67f aea2 	bls.w	800094c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	@ 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40013c00 	.word	0x40013c00

08000c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e001      	b.n	8000c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	619a      	str	r2, [r3, #24]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <std>:
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	b510      	push	{r4, lr}
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000caa:	6083      	str	r3, [r0, #8]
 8000cac:	8181      	strh	r1, [r0, #12]
 8000cae:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cb0:	81c2      	strh	r2, [r0, #14]
 8000cb2:	6183      	str	r3, [r0, #24]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	305c      	adds	r0, #92	@ 0x5c
 8000cba:	f000 f906 	bl	8000eca <memset>
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <std+0x58>)
 8000cc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <std+0x5c>)
 8000cc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <std+0x60>)
 8000cc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <std+0x64>)
 8000ccc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <std+0x68>)
 8000cd0:	6224      	str	r4, [r4, #32]
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	d006      	beq.n	8000ce4 <std+0x48>
 8000cd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000cda:	4294      	cmp	r4, r2
 8000cdc:	d002      	beq.n	8000ce4 <std+0x48>
 8000cde:	33d0      	adds	r3, #208	@ 0xd0
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	d105      	bne.n	8000cf0 <std+0x54>
 8000ce4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cec:	f000 b966 	b.w	8000fbc <__retarget_lock_init_recursive>
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	bf00      	nop
 8000cf4:	08000e45 	.word	0x08000e45
 8000cf8:	08000e67 	.word	0x08000e67
 8000cfc:	08000e9f 	.word	0x08000e9f
 8000d00:	08000ec3 	.word	0x08000ec3
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <stdio_exit_handler>:
 8000d08:	4a02      	ldr	r2, [pc, #8]	@ (8000d14 <stdio_exit_handler+0xc>)
 8000d0a:	4903      	ldr	r1, [pc, #12]	@ (8000d18 <stdio_exit_handler+0x10>)
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <stdio_exit_handler+0x14>)
 8000d0e:	f000 b869 	b.w	8000de4 <_fwalk_sglue>
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	0800185d 	.word	0x0800185d
 8000d1c:	2000001c 	.word	0x2000001c

08000d20 <cleanup_stdio>:
 8000d20:	6841      	ldr	r1, [r0, #4]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <cleanup_stdio+0x34>)
 8000d24:	4299      	cmp	r1, r3
 8000d26:	b510      	push	{r4, lr}
 8000d28:	4604      	mov	r4, r0
 8000d2a:	d001      	beq.n	8000d30 <cleanup_stdio+0x10>
 8000d2c:	f000 fd96 	bl	800185c <_fflush_r>
 8000d30:	68a1      	ldr	r1, [r4, #8]
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <cleanup_stdio+0x38>)
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d002      	beq.n	8000d3e <cleanup_stdio+0x1e>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f000 fd8f 	bl	800185c <_fflush_r>
 8000d3e:	68e1      	ldr	r1, [r4, #12]
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <cleanup_stdio+0x3c>)
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d004      	beq.n	8000d50 <cleanup_stdio+0x30>
 8000d46:	4620      	mov	r0, r4
 8000d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d4c:	f000 bd86 	b.w	800185c <_fflush_r>
 8000d50:	bd10      	pop	{r4, pc}
 8000d52:	bf00      	nop
 8000d54:	2000008c 	.word	0x2000008c
 8000d58:	200000f4 	.word	0x200000f4
 8000d5c:	2000015c 	.word	0x2000015c

08000d60 <global_stdio_init.part.0>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <global_stdio_init.part.0+0x30>)
 8000d64:	4c0b      	ldr	r4, [pc, #44]	@ (8000d94 <global_stdio_init.part.0+0x34>)
 8000d66:	4a0c      	ldr	r2, [pc, #48]	@ (8000d98 <global_stdio_init.part.0+0x38>)
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2104      	movs	r1, #4
 8000d70:	f7ff ff94 	bl	8000c9c <std>
 8000d74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2109      	movs	r1, #9
 8000d7c:	f7ff ff8e 	bl	8000c9c <std>
 8000d80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d84:	2202      	movs	r2, #2
 8000d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d8a:	2112      	movs	r1, #18
 8000d8c:	f7ff bf86 	b.w	8000c9c <std>
 8000d90:	200001c4 	.word	0x200001c4
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	08000d09 	.word	0x08000d09

08000d9c <__sfp_lock_acquire>:
 8000d9c:	4801      	ldr	r0, [pc, #4]	@ (8000da4 <__sfp_lock_acquire+0x8>)
 8000d9e:	f000 b90e 	b.w	8000fbe <__retarget_lock_acquire_recursive>
 8000da2:	bf00      	nop
 8000da4:	200001cd 	.word	0x200001cd

08000da8 <__sfp_lock_release>:
 8000da8:	4801      	ldr	r0, [pc, #4]	@ (8000db0 <__sfp_lock_release+0x8>)
 8000daa:	f000 b909 	b.w	8000fc0 <__retarget_lock_release_recursive>
 8000dae:	bf00      	nop
 8000db0:	200001cd 	.word	0x200001cd

08000db4 <__sinit>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	4604      	mov	r4, r0
 8000db8:	f7ff fff0 	bl	8000d9c <__sfp_lock_acquire>
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	b11b      	cbz	r3, 8000dc8 <__sinit+0x14>
 8000dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc4:	f7ff bff0 	b.w	8000da8 <__sfp_lock_release>
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__sinit+0x28>)
 8000dca:	6223      	str	r3, [r4, #32]
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__sinit+0x2c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f5      	bne.n	8000dc0 <__sinit+0xc>
 8000dd4:	f7ff ffc4 	bl	8000d60 <global_stdio_init.part.0>
 8000dd8:	e7f2      	b.n	8000dc0 <__sinit+0xc>
 8000dda:	bf00      	nop
 8000ddc:	08000d21 	.word	0x08000d21
 8000de0:	200001c4 	.word	0x200001c4

08000de4 <_fwalk_sglue>:
 8000de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de8:	4607      	mov	r7, r0
 8000dea:	4688      	mov	r8, r1
 8000dec:	4614      	mov	r4, r2
 8000dee:	2600      	movs	r6, #0
 8000df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000df4:	f1b9 0901 	subs.w	r9, r9, #1
 8000df8:	d505      	bpl.n	8000e06 <_fwalk_sglue+0x22>
 8000dfa:	6824      	ldr	r4, [r4, #0]
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d1f7      	bne.n	8000df0 <_fwalk_sglue+0xc>
 8000e00:	4630      	mov	r0, r6
 8000e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d907      	bls.n	8000e1c <_fwalk_sglue+0x38>
 8000e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e10:	3301      	adds	r3, #1
 8000e12:	d003      	beq.n	8000e1c <_fwalk_sglue+0x38>
 8000e14:	4629      	mov	r1, r5
 8000e16:	4638      	mov	r0, r7
 8000e18:	47c0      	blx	r8
 8000e1a:	4306      	orrs	r6, r0
 8000e1c:	3568      	adds	r5, #104	@ 0x68
 8000e1e:	e7e9      	b.n	8000df4 <_fwalk_sglue+0x10>

08000e20 <iprintf>:
 8000e20:	b40f      	push	{r0, r1, r2, r3}
 8000e22:	b507      	push	{r0, r1, r2, lr}
 8000e24:	4906      	ldr	r1, [pc, #24]	@ (8000e40 <iprintf+0x20>)
 8000e26:	ab04      	add	r3, sp, #16
 8000e28:	6808      	ldr	r0, [r1, #0]
 8000e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e2e:	6881      	ldr	r1, [r0, #8]
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f000 f9e9 	bl	8001208 <_vfiprintf_r>
 8000e36:	b003      	add	sp, #12
 8000e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr
 8000e40:	20000018 	.word	0x20000018

08000e44 <__sread>:
 8000e44:	b510      	push	{r4, lr}
 8000e46:	460c      	mov	r4, r1
 8000e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4c:	f000 f868 	bl	8000f20 <_read_r>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	bfab      	itete	ge
 8000e54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e56:	89a3      	ldrhlt	r3, [r4, #12]
 8000e58:	181b      	addge	r3, r3, r0
 8000e5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e5e:	bfac      	ite	ge
 8000e60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e62:	81a3      	strhlt	r3, [r4, #12]
 8000e64:	bd10      	pop	{r4, pc}

08000e66 <__swrite>:
 8000e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6a:	461f      	mov	r7, r3
 8000e6c:	898b      	ldrh	r3, [r1, #12]
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	4605      	mov	r5, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	4616      	mov	r6, r2
 8000e76:	d505      	bpl.n	8000e84 <__swrite+0x1e>
 8000e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f000 f83c 	bl	8000efc <_lseek_r>
 8000e84:	89a3      	ldrh	r3, [r4, #12]
 8000e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e8e:	81a3      	strh	r3, [r4, #12]
 8000e90:	4632      	mov	r2, r6
 8000e92:	463b      	mov	r3, r7
 8000e94:	4628      	mov	r0, r5
 8000e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9a:	f000 b853 	b.w	8000f44 <_write_r>

08000e9e <__sseek>:
 8000e9e:	b510      	push	{r4, lr}
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea6:	f000 f829 	bl	8000efc <_lseek_r>
 8000eaa:	1c43      	adds	r3, r0, #1
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	bf15      	itete	ne
 8000eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000eba:	81a3      	strheq	r3, [r4, #12]
 8000ebc:	bf18      	it	ne
 8000ebe:	81a3      	strhne	r3, [r4, #12]
 8000ec0:	bd10      	pop	{r4, pc}

08000ec2 <__sclose>:
 8000ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec6:	f000 b809 	b.w	8000edc <_close_r>

08000eca <memset>:
 8000eca:	4402      	add	r2, r0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d100      	bne.n	8000ed4 <memset+0xa>
 8000ed2:	4770      	bx	lr
 8000ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8000ed8:	e7f9      	b.n	8000ece <memset+0x4>
	...

08000edc <_close_r>:
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4d06      	ldr	r5, [pc, #24]	@ (8000ef8 <_close_r+0x1c>)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	602b      	str	r3, [r5, #0]
 8000ee8:	f7ff fb00 	bl	80004ec <_close>
 8000eec:	1c43      	adds	r3, r0, #1
 8000eee:	d102      	bne.n	8000ef6 <_close_r+0x1a>
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	b103      	cbz	r3, 8000ef6 <_close_r+0x1a>
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
 8000ef8:	200001c8 	.word	0x200001c8

08000efc <_lseek_r>:
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4d07      	ldr	r5, [pc, #28]	@ (8000f1c <_lseek_r+0x20>)
 8000f00:	4604      	mov	r4, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4611      	mov	r1, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	602a      	str	r2, [r5, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f7ff fb15 	bl	800053a <_lseek>
 8000f10:	1c43      	adds	r3, r0, #1
 8000f12:	d102      	bne.n	8000f1a <_lseek_r+0x1e>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	b103      	cbz	r3, 8000f1a <_lseek_r+0x1e>
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	200001c8 	.word	0x200001c8

08000f20 <_read_r>:
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4d07      	ldr	r5, [pc, #28]	@ (8000f40 <_read_r+0x20>)
 8000f24:	4604      	mov	r4, r0
 8000f26:	4608      	mov	r0, r1
 8000f28:	4611      	mov	r1, r2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	602a      	str	r2, [r5, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f7ff faa3 	bl	800047a <_read>
 8000f34:	1c43      	adds	r3, r0, #1
 8000f36:	d102      	bne.n	8000f3e <_read_r+0x1e>
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	b103      	cbz	r3, 8000f3e <_read_r+0x1e>
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
 8000f40:	200001c8 	.word	0x200001c8

08000f44 <_write_r>:
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4d07      	ldr	r5, [pc, #28]	@ (8000f64 <_write_r+0x20>)
 8000f48:	4604      	mov	r4, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	602a      	str	r2, [r5, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f7ff faae 	bl	80004b4 <_write>
 8000f58:	1c43      	adds	r3, r0, #1
 8000f5a:	d102      	bne.n	8000f62 <_write_r+0x1e>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	b103      	cbz	r3, 8000f62 <_write_r+0x1e>
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <__errno>:
 8000f68:	4b01      	ldr	r3, [pc, #4]	@ (8000f70 <__errno+0x8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000018 	.word	0x20000018

08000f74 <__libc_init_array>:
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	4d0d      	ldr	r5, [pc, #52]	@ (8000fac <__libc_init_array+0x38>)
 8000f78:	4c0d      	ldr	r4, [pc, #52]	@ (8000fb0 <__libc_init_array+0x3c>)
 8000f7a:	1b64      	subs	r4, r4, r5
 8000f7c:	10a4      	asrs	r4, r4, #2
 8000f7e:	2600      	movs	r6, #0
 8000f80:	42a6      	cmp	r6, r4
 8000f82:	d109      	bne.n	8000f98 <__libc_init_array+0x24>
 8000f84:	4d0b      	ldr	r5, [pc, #44]	@ (8000fb4 <__libc_init_array+0x40>)
 8000f86:	4c0c      	ldr	r4, [pc, #48]	@ (8000fb8 <__libc_init_array+0x44>)
 8000f88:	f000 fdb8 	bl	8001afc <_init>
 8000f8c:	1b64      	subs	r4, r4, r5
 8000f8e:	10a4      	asrs	r4, r4, #2
 8000f90:	2600      	movs	r6, #0
 8000f92:	42a6      	cmp	r6, r4
 8000f94:	d105      	bne.n	8000fa2 <__libc_init_array+0x2e>
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f9c:	4798      	blx	r3
 8000f9e:	3601      	adds	r6, #1
 8000fa0:	e7ee      	b.n	8000f80 <__libc_init_array+0xc>
 8000fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa6:	4798      	blx	r3
 8000fa8:	3601      	adds	r6, #1
 8000faa:	e7f2      	b.n	8000f92 <__libc_init_array+0x1e>
 8000fac:	08001b68 	.word	0x08001b68
 8000fb0:	08001b68 	.word	0x08001b68
 8000fb4:	08001b68 	.word	0x08001b68
 8000fb8:	08001b6c 	.word	0x08001b6c

08000fbc <__retarget_lock_init_recursive>:
 8000fbc:	4770      	bx	lr

08000fbe <__retarget_lock_acquire_recursive>:
 8000fbe:	4770      	bx	lr

08000fc0 <__retarget_lock_release_recursive>:
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_free_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	d041      	beq.n	8001050 <_free_r+0x8c>
 8000fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fd0:	1f0c      	subs	r4, r1, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfb8      	it	lt
 8000fd6:	18e4      	addlt	r4, r4, r3
 8000fd8:	f000 f8e0 	bl	800119c <__malloc_lock>
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <_free_r+0x90>)
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	b933      	cbnz	r3, 8000ff0 <_free_r+0x2c>
 8000fe2:	6063      	str	r3, [r4, #4]
 8000fe4:	6014      	str	r4, [r2, #0]
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fec:	f000 b8dc 	b.w	80011a8 <__malloc_unlock>
 8000ff0:	42a3      	cmp	r3, r4
 8000ff2:	d908      	bls.n	8001006 <_free_r+0x42>
 8000ff4:	6820      	ldr	r0, [r4, #0]
 8000ff6:	1821      	adds	r1, r4, r0
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	bf01      	itttt	eq
 8000ffc:	6819      	ldreq	r1, [r3, #0]
 8000ffe:	685b      	ldreq	r3, [r3, #4]
 8001000:	1809      	addeq	r1, r1, r0
 8001002:	6021      	streq	r1, [r4, #0]
 8001004:	e7ed      	b.n	8000fe2 <_free_r+0x1e>
 8001006:	461a      	mov	r2, r3
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	b10b      	cbz	r3, 8001010 <_free_r+0x4c>
 800100c:	42a3      	cmp	r3, r4
 800100e:	d9fa      	bls.n	8001006 <_free_r+0x42>
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	1850      	adds	r0, r2, r1
 8001014:	42a0      	cmp	r0, r4
 8001016:	d10b      	bne.n	8001030 <_free_r+0x6c>
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	4401      	add	r1, r0
 800101c:	1850      	adds	r0, r2, r1
 800101e:	4283      	cmp	r3, r0
 8001020:	6011      	str	r1, [r2, #0]
 8001022:	d1e0      	bne.n	8000fe6 <_free_r+0x22>
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	6053      	str	r3, [r2, #4]
 800102a:	4408      	add	r0, r1
 800102c:	6010      	str	r0, [r2, #0]
 800102e:	e7da      	b.n	8000fe6 <_free_r+0x22>
 8001030:	d902      	bls.n	8001038 <_free_r+0x74>
 8001032:	230c      	movs	r3, #12
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	e7d6      	b.n	8000fe6 <_free_r+0x22>
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	1821      	adds	r1, r4, r0
 800103c:	428b      	cmp	r3, r1
 800103e:	bf04      	itt	eq
 8001040:	6819      	ldreq	r1, [r3, #0]
 8001042:	685b      	ldreq	r3, [r3, #4]
 8001044:	6063      	str	r3, [r4, #4]
 8001046:	bf04      	itt	eq
 8001048:	1809      	addeq	r1, r1, r0
 800104a:	6021      	streq	r1, [r4, #0]
 800104c:	6054      	str	r4, [r2, #4]
 800104e:	e7ca      	b.n	8000fe6 <_free_r+0x22>
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	200001d4 	.word	0x200001d4

08001058 <sbrk_aligned>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	4e0f      	ldr	r6, [pc, #60]	@ (8001098 <sbrk_aligned+0x40>)
 800105c:	460c      	mov	r4, r1
 800105e:	6831      	ldr	r1, [r6, #0]
 8001060:	4605      	mov	r5, r0
 8001062:	b911      	cbnz	r1, 800106a <sbrk_aligned+0x12>
 8001064:	f000 fcb6 	bl	80019d4 <_sbrk_r>
 8001068:	6030      	str	r0, [r6, #0]
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	f000 fcb1 	bl	80019d4 <_sbrk_r>
 8001072:	1c43      	adds	r3, r0, #1
 8001074:	d103      	bne.n	800107e <sbrk_aligned+0x26>
 8001076:	f04f 34ff 	mov.w	r4, #4294967295
 800107a:	4620      	mov	r0, r4
 800107c:	bd70      	pop	{r4, r5, r6, pc}
 800107e:	1cc4      	adds	r4, r0, #3
 8001080:	f024 0403 	bic.w	r4, r4, #3
 8001084:	42a0      	cmp	r0, r4
 8001086:	d0f8      	beq.n	800107a <sbrk_aligned+0x22>
 8001088:	1a21      	subs	r1, r4, r0
 800108a:	4628      	mov	r0, r5
 800108c:	f000 fca2 	bl	80019d4 <_sbrk_r>
 8001090:	3001      	adds	r0, #1
 8001092:	d1f2      	bne.n	800107a <sbrk_aligned+0x22>
 8001094:	e7ef      	b.n	8001076 <sbrk_aligned+0x1e>
 8001096:	bf00      	nop
 8001098:	200001d0 	.word	0x200001d0

0800109c <_malloc_r>:
 800109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010a0:	1ccd      	adds	r5, r1, #3
 80010a2:	f025 0503 	bic.w	r5, r5, #3
 80010a6:	3508      	adds	r5, #8
 80010a8:	2d0c      	cmp	r5, #12
 80010aa:	bf38      	it	cc
 80010ac:	250c      	movcc	r5, #12
 80010ae:	2d00      	cmp	r5, #0
 80010b0:	4606      	mov	r6, r0
 80010b2:	db01      	blt.n	80010b8 <_malloc_r+0x1c>
 80010b4:	42a9      	cmp	r1, r5
 80010b6:	d904      	bls.n	80010c2 <_malloc_r+0x26>
 80010b8:	230c      	movs	r3, #12
 80010ba:	6033      	str	r3, [r6, #0]
 80010bc:	2000      	movs	r0, #0
 80010be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001198 <_malloc_r+0xfc>
 80010c6:	f000 f869 	bl	800119c <__malloc_lock>
 80010ca:	f8d8 3000 	ldr.w	r3, [r8]
 80010ce:	461c      	mov	r4, r3
 80010d0:	bb44      	cbnz	r4, 8001124 <_malloc_r+0x88>
 80010d2:	4629      	mov	r1, r5
 80010d4:	4630      	mov	r0, r6
 80010d6:	f7ff ffbf 	bl	8001058 <sbrk_aligned>
 80010da:	1c43      	adds	r3, r0, #1
 80010dc:	4604      	mov	r4, r0
 80010de:	d158      	bne.n	8001192 <_malloc_r+0xf6>
 80010e0:	f8d8 4000 	ldr.w	r4, [r8]
 80010e4:	4627      	mov	r7, r4
 80010e6:	2f00      	cmp	r7, #0
 80010e8:	d143      	bne.n	8001172 <_malloc_r+0xd6>
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d04b      	beq.n	8001186 <_malloc_r+0xea>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	4639      	mov	r1, r7
 80010f2:	4630      	mov	r0, r6
 80010f4:	eb04 0903 	add.w	r9, r4, r3
 80010f8:	f000 fc6c 	bl	80019d4 <_sbrk_r>
 80010fc:	4581      	cmp	r9, r0
 80010fe:	d142      	bne.n	8001186 <_malloc_r+0xea>
 8001100:	6821      	ldr	r1, [r4, #0]
 8001102:	1a6d      	subs	r5, r5, r1
 8001104:	4629      	mov	r1, r5
 8001106:	4630      	mov	r0, r6
 8001108:	f7ff ffa6 	bl	8001058 <sbrk_aligned>
 800110c:	3001      	adds	r0, #1
 800110e:	d03a      	beq.n	8001186 <_malloc_r+0xea>
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	442b      	add	r3, r5
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	f8d8 3000 	ldr.w	r3, [r8]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	bb62      	cbnz	r2, 8001178 <_malloc_r+0xdc>
 800111e:	f8c8 7000 	str.w	r7, [r8]
 8001122:	e00f      	b.n	8001144 <_malloc_r+0xa8>
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	1b52      	subs	r2, r2, r5
 8001128:	d420      	bmi.n	800116c <_malloc_r+0xd0>
 800112a:	2a0b      	cmp	r2, #11
 800112c:	d917      	bls.n	800115e <_malloc_r+0xc2>
 800112e:	1961      	adds	r1, r4, r5
 8001130:	42a3      	cmp	r3, r4
 8001132:	6025      	str	r5, [r4, #0]
 8001134:	bf18      	it	ne
 8001136:	6059      	strne	r1, [r3, #4]
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	bf08      	it	eq
 800113c:	f8c8 1000 	streq.w	r1, [r8]
 8001140:	5162      	str	r2, [r4, r5]
 8001142:	604b      	str	r3, [r1, #4]
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f82f 	bl	80011a8 <__malloc_unlock>
 800114a:	f104 000b 	add.w	r0, r4, #11
 800114e:	1d23      	adds	r3, r4, #4
 8001150:	f020 0007 	bic.w	r0, r0, #7
 8001154:	1ac2      	subs	r2, r0, r3
 8001156:	bf1c      	itt	ne
 8001158:	1a1b      	subne	r3, r3, r0
 800115a:	50a3      	strne	r3, [r4, r2]
 800115c:	e7af      	b.n	80010be <_malloc_r+0x22>
 800115e:	6862      	ldr	r2, [r4, #4]
 8001160:	42a3      	cmp	r3, r4
 8001162:	bf0c      	ite	eq
 8001164:	f8c8 2000 	streq.w	r2, [r8]
 8001168:	605a      	strne	r2, [r3, #4]
 800116a:	e7eb      	b.n	8001144 <_malloc_r+0xa8>
 800116c:	4623      	mov	r3, r4
 800116e:	6864      	ldr	r4, [r4, #4]
 8001170:	e7ae      	b.n	80010d0 <_malloc_r+0x34>
 8001172:	463c      	mov	r4, r7
 8001174:	687f      	ldr	r7, [r7, #4]
 8001176:	e7b6      	b.n	80010e6 <_malloc_r+0x4a>
 8001178:	461a      	mov	r2, r3
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	42a3      	cmp	r3, r4
 800117e:	d1fb      	bne.n	8001178 <_malloc_r+0xdc>
 8001180:	2300      	movs	r3, #0
 8001182:	6053      	str	r3, [r2, #4]
 8001184:	e7de      	b.n	8001144 <_malloc_r+0xa8>
 8001186:	230c      	movs	r3, #12
 8001188:	6033      	str	r3, [r6, #0]
 800118a:	4630      	mov	r0, r6
 800118c:	f000 f80c 	bl	80011a8 <__malloc_unlock>
 8001190:	e794      	b.n	80010bc <_malloc_r+0x20>
 8001192:	6005      	str	r5, [r0, #0]
 8001194:	e7d6      	b.n	8001144 <_malloc_r+0xa8>
 8001196:	bf00      	nop
 8001198:	200001d4 	.word	0x200001d4

0800119c <__malloc_lock>:
 800119c:	4801      	ldr	r0, [pc, #4]	@ (80011a4 <__malloc_lock+0x8>)
 800119e:	f7ff bf0e 	b.w	8000fbe <__retarget_lock_acquire_recursive>
 80011a2:	bf00      	nop
 80011a4:	200001cc 	.word	0x200001cc

080011a8 <__malloc_unlock>:
 80011a8:	4801      	ldr	r0, [pc, #4]	@ (80011b0 <__malloc_unlock+0x8>)
 80011aa:	f7ff bf09 	b.w	8000fc0 <__retarget_lock_release_recursive>
 80011ae:	bf00      	nop
 80011b0:	200001cc 	.word	0x200001cc

080011b4 <__sfputc_r>:
 80011b4:	6893      	ldr	r3, [r2, #8]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	b410      	push	{r4}
 80011bc:	6093      	str	r3, [r2, #8]
 80011be:	da08      	bge.n	80011d2 <__sfputc_r+0x1e>
 80011c0:	6994      	ldr	r4, [r2, #24]
 80011c2:	42a3      	cmp	r3, r4
 80011c4:	db01      	blt.n	80011ca <__sfputc_r+0x16>
 80011c6:	290a      	cmp	r1, #10
 80011c8:	d103      	bne.n	80011d2 <__sfputc_r+0x1e>
 80011ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ce:	f000 bb6d 	b.w	80018ac <__swbuf_r>
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	1c58      	adds	r0, r3, #1
 80011d6:	6010      	str	r0, [r2, #0]
 80011d8:	7019      	strb	r1, [r3, #0]
 80011da:	4608      	mov	r0, r1
 80011dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <__sfputs_r>:
 80011e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e4:	4606      	mov	r6, r0
 80011e6:	460f      	mov	r7, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	18d5      	adds	r5, r2, r3
 80011ec:	42ac      	cmp	r4, r5
 80011ee:	d101      	bne.n	80011f4 <__sfputs_r+0x12>
 80011f0:	2000      	movs	r0, #0
 80011f2:	e007      	b.n	8001204 <__sfputs_r+0x22>
 80011f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011f8:	463a      	mov	r2, r7
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff ffda 	bl	80011b4 <__sfputc_r>
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	d1f3      	bne.n	80011ec <__sfputs_r+0xa>
 8001204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001208 <_vfiprintf_r>:
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	460d      	mov	r5, r1
 800120e:	b09d      	sub	sp, #116	@ 0x74
 8001210:	4614      	mov	r4, r2
 8001212:	4698      	mov	r8, r3
 8001214:	4606      	mov	r6, r0
 8001216:	b118      	cbz	r0, 8001220 <_vfiprintf_r+0x18>
 8001218:	6a03      	ldr	r3, [r0, #32]
 800121a:	b90b      	cbnz	r3, 8001220 <_vfiprintf_r+0x18>
 800121c:	f7ff fdca 	bl	8000db4 <__sinit>
 8001220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001222:	07d9      	lsls	r1, r3, #31
 8001224:	d405      	bmi.n	8001232 <_vfiprintf_r+0x2a>
 8001226:	89ab      	ldrh	r3, [r5, #12]
 8001228:	059a      	lsls	r2, r3, #22
 800122a:	d402      	bmi.n	8001232 <_vfiprintf_r+0x2a>
 800122c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800122e:	f7ff fec6 	bl	8000fbe <__retarget_lock_acquire_recursive>
 8001232:	89ab      	ldrh	r3, [r5, #12]
 8001234:	071b      	lsls	r3, r3, #28
 8001236:	d501      	bpl.n	800123c <_vfiprintf_r+0x34>
 8001238:	692b      	ldr	r3, [r5, #16]
 800123a:	b99b      	cbnz	r3, 8001264 <_vfiprintf_r+0x5c>
 800123c:	4629      	mov	r1, r5
 800123e:	4630      	mov	r0, r6
 8001240:	f000 fb72 	bl	8001928 <__swsetup_r>
 8001244:	b170      	cbz	r0, 8001264 <_vfiprintf_r+0x5c>
 8001246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001248:	07dc      	lsls	r4, r3, #31
 800124a:	d504      	bpl.n	8001256 <_vfiprintf_r+0x4e>
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	b01d      	add	sp, #116	@ 0x74
 8001252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001256:	89ab      	ldrh	r3, [r5, #12]
 8001258:	0598      	lsls	r0, r3, #22
 800125a:	d4f7      	bmi.n	800124c <_vfiprintf_r+0x44>
 800125c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800125e:	f7ff feaf 	bl	8000fc0 <__retarget_lock_release_recursive>
 8001262:	e7f3      	b.n	800124c <_vfiprintf_r+0x44>
 8001264:	2300      	movs	r3, #0
 8001266:	9309      	str	r3, [sp, #36]	@ 0x24
 8001268:	2320      	movs	r3, #32
 800126a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800126e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001272:	2330      	movs	r3, #48	@ 0x30
 8001274:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001424 <_vfiprintf_r+0x21c>
 8001278:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800127c:	f04f 0901 	mov.w	r9, #1
 8001280:	4623      	mov	r3, r4
 8001282:	469a      	mov	sl, r3
 8001284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001288:	b10a      	cbz	r2, 800128e <_vfiprintf_r+0x86>
 800128a:	2a25      	cmp	r2, #37	@ 0x25
 800128c:	d1f9      	bne.n	8001282 <_vfiprintf_r+0x7a>
 800128e:	ebba 0b04 	subs.w	fp, sl, r4
 8001292:	d00b      	beq.n	80012ac <_vfiprintf_r+0xa4>
 8001294:	465b      	mov	r3, fp
 8001296:	4622      	mov	r2, r4
 8001298:	4629      	mov	r1, r5
 800129a:	4630      	mov	r0, r6
 800129c:	f7ff ffa1 	bl	80011e2 <__sfputs_r>
 80012a0:	3001      	adds	r0, #1
 80012a2:	f000 80a7 	beq.w	80013f4 <_vfiprintf_r+0x1ec>
 80012a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80012a8:	445a      	add	r2, fp
 80012aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80012ac:	f89a 3000 	ldrb.w	r3, [sl]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 809f 	beq.w	80013f4 <_vfiprintf_r+0x1ec>
 80012b6:	2300      	movs	r3, #0
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012c0:	f10a 0a01 	add.w	sl, sl, #1
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	9307      	str	r3, [sp, #28]
 80012c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80012cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80012ce:	4654      	mov	r4, sl
 80012d0:	2205      	movs	r2, #5
 80012d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012d6:	4853      	ldr	r0, [pc, #332]	@ (8001424 <_vfiprintf_r+0x21c>)
 80012d8:	f7fe ff82 	bl	80001e0 <memchr>
 80012dc:	9a04      	ldr	r2, [sp, #16]
 80012de:	b9d8      	cbnz	r0, 8001318 <_vfiprintf_r+0x110>
 80012e0:	06d1      	lsls	r1, r2, #27
 80012e2:	bf44      	itt	mi
 80012e4:	2320      	movmi	r3, #32
 80012e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012ea:	0713      	lsls	r3, r2, #28
 80012ec:	bf44      	itt	mi
 80012ee:	232b      	movmi	r3, #43	@ 0x2b
 80012f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012f4:	f89a 3000 	ldrb.w	r3, [sl]
 80012f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80012fa:	d015      	beq.n	8001328 <_vfiprintf_r+0x120>
 80012fc:	9a07      	ldr	r2, [sp, #28]
 80012fe:	4654      	mov	r4, sl
 8001300:	2000      	movs	r0, #0
 8001302:	f04f 0c0a 	mov.w	ip, #10
 8001306:	4621      	mov	r1, r4
 8001308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800130c:	3b30      	subs	r3, #48	@ 0x30
 800130e:	2b09      	cmp	r3, #9
 8001310:	d94b      	bls.n	80013aa <_vfiprintf_r+0x1a2>
 8001312:	b1b0      	cbz	r0, 8001342 <_vfiprintf_r+0x13a>
 8001314:	9207      	str	r2, [sp, #28]
 8001316:	e014      	b.n	8001342 <_vfiprintf_r+0x13a>
 8001318:	eba0 0308 	sub.w	r3, r0, r8
 800131c:	fa09 f303 	lsl.w	r3, r9, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	9304      	str	r3, [sp, #16]
 8001324:	46a2      	mov	sl, r4
 8001326:	e7d2      	b.n	80012ce <_vfiprintf_r+0xc6>
 8001328:	9b03      	ldr	r3, [sp, #12]
 800132a:	1d19      	adds	r1, r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	9103      	str	r1, [sp, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	bfbb      	ittet	lt
 8001334:	425b      	neglt	r3, r3
 8001336:	f042 0202 	orrlt.w	r2, r2, #2
 800133a:	9307      	strge	r3, [sp, #28]
 800133c:	9307      	strlt	r3, [sp, #28]
 800133e:	bfb8      	it	lt
 8001340:	9204      	strlt	r2, [sp, #16]
 8001342:	7823      	ldrb	r3, [r4, #0]
 8001344:	2b2e      	cmp	r3, #46	@ 0x2e
 8001346:	d10a      	bne.n	800135e <_vfiprintf_r+0x156>
 8001348:	7863      	ldrb	r3, [r4, #1]
 800134a:	2b2a      	cmp	r3, #42	@ 0x2a
 800134c:	d132      	bne.n	80013b4 <_vfiprintf_r+0x1ac>
 800134e:	9b03      	ldr	r3, [sp, #12]
 8001350:	1d1a      	adds	r2, r3, #4
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	9203      	str	r2, [sp, #12]
 8001356:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800135a:	3402      	adds	r4, #2
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001434 <_vfiprintf_r+0x22c>
 8001362:	7821      	ldrb	r1, [r4, #0]
 8001364:	2203      	movs	r2, #3
 8001366:	4650      	mov	r0, sl
 8001368:	f7fe ff3a 	bl	80001e0 <memchr>
 800136c:	b138      	cbz	r0, 800137e <_vfiprintf_r+0x176>
 800136e:	9b04      	ldr	r3, [sp, #16]
 8001370:	eba0 000a 	sub.w	r0, r0, sl
 8001374:	2240      	movs	r2, #64	@ 0x40
 8001376:	4082      	lsls	r2, r0
 8001378:	4313      	orrs	r3, r2
 800137a:	3401      	adds	r4, #1
 800137c:	9304      	str	r3, [sp, #16]
 800137e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001382:	4829      	ldr	r0, [pc, #164]	@ (8001428 <_vfiprintf_r+0x220>)
 8001384:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001388:	2206      	movs	r2, #6
 800138a:	f7fe ff29 	bl	80001e0 <memchr>
 800138e:	2800      	cmp	r0, #0
 8001390:	d03f      	beq.n	8001412 <_vfiprintf_r+0x20a>
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <_vfiprintf_r+0x224>)
 8001394:	bb1b      	cbnz	r3, 80013de <_vfiprintf_r+0x1d6>
 8001396:	9b03      	ldr	r3, [sp, #12]
 8001398:	3307      	adds	r3, #7
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	3308      	adds	r3, #8
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80013a4:	443b      	add	r3, r7
 80013a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80013a8:	e76a      	b.n	8001280 <_vfiprintf_r+0x78>
 80013aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80013ae:	460c      	mov	r4, r1
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7a8      	b.n	8001306 <_vfiprintf_r+0xfe>
 80013b4:	2300      	movs	r3, #0
 80013b6:	3401      	adds	r4, #1
 80013b8:	9305      	str	r3, [sp, #20]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0c0a 	mov.w	ip, #10
 80013c0:	4620      	mov	r0, r4
 80013c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013c6:	3a30      	subs	r2, #48	@ 0x30
 80013c8:	2a09      	cmp	r2, #9
 80013ca:	d903      	bls.n	80013d4 <_vfiprintf_r+0x1cc>
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0c6      	beq.n	800135e <_vfiprintf_r+0x156>
 80013d0:	9105      	str	r1, [sp, #20]
 80013d2:	e7c4      	b.n	800135e <_vfiprintf_r+0x156>
 80013d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80013d8:	4604      	mov	r4, r0
 80013da:	2301      	movs	r3, #1
 80013dc:	e7f0      	b.n	80013c0 <_vfiprintf_r+0x1b8>
 80013de:	ab03      	add	r3, sp, #12
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	462a      	mov	r2, r5
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <_vfiprintf_r+0x228>)
 80013e6:	a904      	add	r1, sp, #16
 80013e8:	4630      	mov	r0, r6
 80013ea:	f3af 8000 	nop.w
 80013ee:	4607      	mov	r7, r0
 80013f0:	1c78      	adds	r0, r7, #1
 80013f2:	d1d6      	bne.n	80013a2 <_vfiprintf_r+0x19a>
 80013f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013f6:	07d9      	lsls	r1, r3, #31
 80013f8:	d405      	bmi.n	8001406 <_vfiprintf_r+0x1fe>
 80013fa:	89ab      	ldrh	r3, [r5, #12]
 80013fc:	059a      	lsls	r2, r3, #22
 80013fe:	d402      	bmi.n	8001406 <_vfiprintf_r+0x1fe>
 8001400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001402:	f7ff fddd 	bl	8000fc0 <__retarget_lock_release_recursive>
 8001406:	89ab      	ldrh	r3, [r5, #12]
 8001408:	065b      	lsls	r3, r3, #25
 800140a:	f53f af1f 	bmi.w	800124c <_vfiprintf_r+0x44>
 800140e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001410:	e71e      	b.n	8001250 <_vfiprintf_r+0x48>
 8001412:	ab03      	add	r3, sp, #12
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	462a      	mov	r2, r5
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <_vfiprintf_r+0x228>)
 800141a:	a904      	add	r1, sp, #16
 800141c:	4630      	mov	r0, r6
 800141e:	f000 f879 	bl	8001514 <_printf_i>
 8001422:	e7e4      	b.n	80013ee <_vfiprintf_r+0x1e6>
 8001424:	08001b2c 	.word	0x08001b2c
 8001428:	08001b36 	.word	0x08001b36
 800142c:	00000000 	.word	0x00000000
 8001430:	080011e3 	.word	0x080011e3
 8001434:	08001b32 	.word	0x08001b32

08001438 <_printf_common>:
 8001438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800143c:	4616      	mov	r6, r2
 800143e:	4698      	mov	r8, r3
 8001440:	688a      	ldr	r2, [r1, #8]
 8001442:	690b      	ldr	r3, [r1, #16]
 8001444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001448:	4293      	cmp	r3, r2
 800144a:	bfb8      	it	lt
 800144c:	4613      	movlt	r3, r2
 800144e:	6033      	str	r3, [r6, #0]
 8001450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001454:	4607      	mov	r7, r0
 8001456:	460c      	mov	r4, r1
 8001458:	b10a      	cbz	r2, 800145e <_printf_common+0x26>
 800145a:	3301      	adds	r3, #1
 800145c:	6033      	str	r3, [r6, #0]
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	0699      	lsls	r1, r3, #26
 8001462:	bf42      	ittt	mi
 8001464:	6833      	ldrmi	r3, [r6, #0]
 8001466:	3302      	addmi	r3, #2
 8001468:	6033      	strmi	r3, [r6, #0]
 800146a:	6825      	ldr	r5, [r4, #0]
 800146c:	f015 0506 	ands.w	r5, r5, #6
 8001470:	d106      	bne.n	8001480 <_printf_common+0x48>
 8001472:	f104 0a19 	add.w	sl, r4, #25
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	6832      	ldr	r2, [r6, #0]
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	42ab      	cmp	r3, r5
 800147e:	dc26      	bgt.n	80014ce <_printf_common+0x96>
 8001480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	3b00      	subs	r3, #0
 8001488:	bf18      	it	ne
 800148a:	2301      	movne	r3, #1
 800148c:	0692      	lsls	r2, r2, #26
 800148e:	d42b      	bmi.n	80014e8 <_printf_common+0xb0>
 8001490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001494:	4641      	mov	r1, r8
 8001496:	4638      	mov	r0, r7
 8001498:	47c8      	blx	r9
 800149a:	3001      	adds	r0, #1
 800149c:	d01e      	beq.n	80014dc <_printf_common+0xa4>
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	6922      	ldr	r2, [r4, #16]
 80014a2:	f003 0306 	and.w	r3, r3, #6
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf02      	ittt	eq
 80014aa:	68e5      	ldreq	r5, [r4, #12]
 80014ac:	6833      	ldreq	r3, [r6, #0]
 80014ae:	1aed      	subeq	r5, r5, r3
 80014b0:	68a3      	ldr	r3, [r4, #8]
 80014b2:	bf0c      	ite	eq
 80014b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014b8:	2500      	movne	r5, #0
 80014ba:	4293      	cmp	r3, r2
 80014bc:	bfc4      	itt	gt
 80014be:	1a9b      	subgt	r3, r3, r2
 80014c0:	18ed      	addgt	r5, r5, r3
 80014c2:	2600      	movs	r6, #0
 80014c4:	341a      	adds	r4, #26
 80014c6:	42b5      	cmp	r5, r6
 80014c8:	d11a      	bne.n	8001500 <_printf_common+0xc8>
 80014ca:	2000      	movs	r0, #0
 80014cc:	e008      	b.n	80014e0 <_printf_common+0xa8>
 80014ce:	2301      	movs	r3, #1
 80014d0:	4652      	mov	r2, sl
 80014d2:	4641      	mov	r1, r8
 80014d4:	4638      	mov	r0, r7
 80014d6:	47c8      	blx	r9
 80014d8:	3001      	adds	r0, #1
 80014da:	d103      	bne.n	80014e4 <_printf_common+0xac>
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e4:	3501      	adds	r5, #1
 80014e6:	e7c6      	b.n	8001476 <_printf_common+0x3e>
 80014e8:	18e1      	adds	r1, r4, r3
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	2030      	movs	r0, #48	@ 0x30
 80014ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80014f2:	4422      	add	r2, r4
 80014f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80014f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80014fc:	3302      	adds	r3, #2
 80014fe:	e7c7      	b.n	8001490 <_printf_common+0x58>
 8001500:	2301      	movs	r3, #1
 8001502:	4622      	mov	r2, r4
 8001504:	4641      	mov	r1, r8
 8001506:	4638      	mov	r0, r7
 8001508:	47c8      	blx	r9
 800150a:	3001      	adds	r0, #1
 800150c:	d0e6      	beq.n	80014dc <_printf_common+0xa4>
 800150e:	3601      	adds	r6, #1
 8001510:	e7d9      	b.n	80014c6 <_printf_common+0x8e>
	...

08001514 <_printf_i>:
 8001514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001518:	7e0f      	ldrb	r7, [r1, #24]
 800151a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800151c:	2f78      	cmp	r7, #120	@ 0x78
 800151e:	4691      	mov	r9, r2
 8001520:	4680      	mov	r8, r0
 8001522:	460c      	mov	r4, r1
 8001524:	469a      	mov	sl, r3
 8001526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800152a:	d807      	bhi.n	800153c <_printf_i+0x28>
 800152c:	2f62      	cmp	r7, #98	@ 0x62
 800152e:	d80a      	bhi.n	8001546 <_printf_i+0x32>
 8001530:	2f00      	cmp	r7, #0
 8001532:	f000 80d2 	beq.w	80016da <_printf_i+0x1c6>
 8001536:	2f58      	cmp	r7, #88	@ 0x58
 8001538:	f000 80b9 	beq.w	80016ae <_printf_i+0x19a>
 800153c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001544:	e03a      	b.n	80015bc <_printf_i+0xa8>
 8001546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800154a:	2b15      	cmp	r3, #21
 800154c:	d8f6      	bhi.n	800153c <_printf_i+0x28>
 800154e:	a101      	add	r1, pc, #4	@ (adr r1, 8001554 <_printf_i+0x40>)
 8001550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001554:	080015ad 	.word	0x080015ad
 8001558:	080015c1 	.word	0x080015c1
 800155c:	0800153d 	.word	0x0800153d
 8001560:	0800153d 	.word	0x0800153d
 8001564:	0800153d 	.word	0x0800153d
 8001568:	0800153d 	.word	0x0800153d
 800156c:	080015c1 	.word	0x080015c1
 8001570:	0800153d 	.word	0x0800153d
 8001574:	0800153d 	.word	0x0800153d
 8001578:	0800153d 	.word	0x0800153d
 800157c:	0800153d 	.word	0x0800153d
 8001580:	080016c1 	.word	0x080016c1
 8001584:	080015eb 	.word	0x080015eb
 8001588:	0800167b 	.word	0x0800167b
 800158c:	0800153d 	.word	0x0800153d
 8001590:	0800153d 	.word	0x0800153d
 8001594:	080016e3 	.word	0x080016e3
 8001598:	0800153d 	.word	0x0800153d
 800159c:	080015eb 	.word	0x080015eb
 80015a0:	0800153d 	.word	0x0800153d
 80015a4:	0800153d 	.word	0x0800153d
 80015a8:	08001683 	.word	0x08001683
 80015ac:	6833      	ldr	r3, [r6, #0]
 80015ae:	1d1a      	adds	r2, r3, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6032      	str	r2, [r6, #0]
 80015b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015bc:	2301      	movs	r3, #1
 80015be:	e09d      	b.n	80016fc <_printf_i+0x1e8>
 80015c0:	6833      	ldr	r3, [r6, #0]
 80015c2:	6820      	ldr	r0, [r4, #0]
 80015c4:	1d19      	adds	r1, r3, #4
 80015c6:	6031      	str	r1, [r6, #0]
 80015c8:	0606      	lsls	r6, r0, #24
 80015ca:	d501      	bpl.n	80015d0 <_printf_i+0xbc>
 80015cc:	681d      	ldr	r5, [r3, #0]
 80015ce:	e003      	b.n	80015d8 <_printf_i+0xc4>
 80015d0:	0645      	lsls	r5, r0, #25
 80015d2:	d5fb      	bpl.n	80015cc <_printf_i+0xb8>
 80015d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015d8:	2d00      	cmp	r5, #0
 80015da:	da03      	bge.n	80015e4 <_printf_i+0xd0>
 80015dc:	232d      	movs	r3, #45	@ 0x2d
 80015de:	426d      	negs	r5, r5
 80015e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015e4:	4859      	ldr	r0, [pc, #356]	@ (800174c <_printf_i+0x238>)
 80015e6:	230a      	movs	r3, #10
 80015e8:	e011      	b.n	800160e <_printf_i+0xfa>
 80015ea:	6821      	ldr	r1, [r4, #0]
 80015ec:	6833      	ldr	r3, [r6, #0]
 80015ee:	0608      	lsls	r0, r1, #24
 80015f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80015f4:	d402      	bmi.n	80015fc <_printf_i+0xe8>
 80015f6:	0649      	lsls	r1, r1, #25
 80015f8:	bf48      	it	mi
 80015fa:	b2ad      	uxthmi	r5, r5
 80015fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80015fe:	4853      	ldr	r0, [pc, #332]	@ (800174c <_printf_i+0x238>)
 8001600:	6033      	str	r3, [r6, #0]
 8001602:	bf14      	ite	ne
 8001604:	230a      	movne	r3, #10
 8001606:	2308      	moveq	r3, #8
 8001608:	2100      	movs	r1, #0
 800160a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800160e:	6866      	ldr	r6, [r4, #4]
 8001610:	60a6      	str	r6, [r4, #8]
 8001612:	2e00      	cmp	r6, #0
 8001614:	bfa2      	ittt	ge
 8001616:	6821      	ldrge	r1, [r4, #0]
 8001618:	f021 0104 	bicge.w	r1, r1, #4
 800161c:	6021      	strge	r1, [r4, #0]
 800161e:	b90d      	cbnz	r5, 8001624 <_printf_i+0x110>
 8001620:	2e00      	cmp	r6, #0
 8001622:	d04b      	beq.n	80016bc <_printf_i+0x1a8>
 8001624:	4616      	mov	r6, r2
 8001626:	fbb5 f1f3 	udiv	r1, r5, r3
 800162a:	fb03 5711 	mls	r7, r3, r1, r5
 800162e:	5dc7      	ldrb	r7, [r0, r7]
 8001630:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001634:	462f      	mov	r7, r5
 8001636:	42bb      	cmp	r3, r7
 8001638:	460d      	mov	r5, r1
 800163a:	d9f4      	bls.n	8001626 <_printf_i+0x112>
 800163c:	2b08      	cmp	r3, #8
 800163e:	d10b      	bne.n	8001658 <_printf_i+0x144>
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	07df      	lsls	r7, r3, #31
 8001644:	d508      	bpl.n	8001658 <_printf_i+0x144>
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	6861      	ldr	r1, [r4, #4]
 800164a:	4299      	cmp	r1, r3
 800164c:	bfde      	ittt	le
 800164e:	2330      	movle	r3, #48	@ 0x30
 8001650:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001654:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001658:	1b92      	subs	r2, r2, r6
 800165a:	6122      	str	r2, [r4, #16]
 800165c:	f8cd a000 	str.w	sl, [sp]
 8001660:	464b      	mov	r3, r9
 8001662:	aa03      	add	r2, sp, #12
 8001664:	4621      	mov	r1, r4
 8001666:	4640      	mov	r0, r8
 8001668:	f7ff fee6 	bl	8001438 <_printf_common>
 800166c:	3001      	adds	r0, #1
 800166e:	d14a      	bne.n	8001706 <_printf_i+0x1f2>
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	b004      	add	sp, #16
 8001676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	4833      	ldr	r0, [pc, #204]	@ (8001750 <_printf_i+0x23c>)
 8001684:	2778      	movs	r7, #120	@ 0x78
 8001686:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	6831      	ldr	r1, [r6, #0]
 800168e:	061f      	lsls	r7, r3, #24
 8001690:	f851 5b04 	ldr.w	r5, [r1], #4
 8001694:	d402      	bmi.n	800169c <_printf_i+0x188>
 8001696:	065f      	lsls	r7, r3, #25
 8001698:	bf48      	it	mi
 800169a:	b2ad      	uxthmi	r5, r5
 800169c:	6031      	str	r1, [r6, #0]
 800169e:	07d9      	lsls	r1, r3, #31
 80016a0:	bf44      	itt	mi
 80016a2:	f043 0320 	orrmi.w	r3, r3, #32
 80016a6:	6023      	strmi	r3, [r4, #0]
 80016a8:	b11d      	cbz	r5, 80016b2 <_printf_i+0x19e>
 80016aa:	2310      	movs	r3, #16
 80016ac:	e7ac      	b.n	8001608 <_printf_i+0xf4>
 80016ae:	4827      	ldr	r0, [pc, #156]	@ (800174c <_printf_i+0x238>)
 80016b0:	e7e9      	b.n	8001686 <_printf_i+0x172>
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f023 0320 	bic.w	r3, r3, #32
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	e7f6      	b.n	80016aa <_printf_i+0x196>
 80016bc:	4616      	mov	r6, r2
 80016be:	e7bd      	b.n	800163c <_printf_i+0x128>
 80016c0:	6833      	ldr	r3, [r6, #0]
 80016c2:	6825      	ldr	r5, [r4, #0]
 80016c4:	6961      	ldr	r1, [r4, #20]
 80016c6:	1d18      	adds	r0, r3, #4
 80016c8:	6030      	str	r0, [r6, #0]
 80016ca:	062e      	lsls	r6, r5, #24
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	d501      	bpl.n	80016d4 <_printf_i+0x1c0>
 80016d0:	6019      	str	r1, [r3, #0]
 80016d2:	e002      	b.n	80016da <_printf_i+0x1c6>
 80016d4:	0668      	lsls	r0, r5, #25
 80016d6:	d5fb      	bpl.n	80016d0 <_printf_i+0x1bc>
 80016d8:	8019      	strh	r1, [r3, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	6123      	str	r3, [r4, #16]
 80016de:	4616      	mov	r6, r2
 80016e0:	e7bc      	b.n	800165c <_printf_i+0x148>
 80016e2:	6833      	ldr	r3, [r6, #0]
 80016e4:	1d1a      	adds	r2, r3, #4
 80016e6:	6032      	str	r2, [r6, #0]
 80016e8:	681e      	ldr	r6, [r3, #0]
 80016ea:	6862      	ldr	r2, [r4, #4]
 80016ec:	2100      	movs	r1, #0
 80016ee:	4630      	mov	r0, r6
 80016f0:	f7fe fd76 	bl	80001e0 <memchr>
 80016f4:	b108      	cbz	r0, 80016fa <_printf_i+0x1e6>
 80016f6:	1b80      	subs	r0, r0, r6
 80016f8:	6060      	str	r0, [r4, #4]
 80016fa:	6863      	ldr	r3, [r4, #4]
 80016fc:	6123      	str	r3, [r4, #16]
 80016fe:	2300      	movs	r3, #0
 8001700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001704:	e7aa      	b.n	800165c <_printf_i+0x148>
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	4632      	mov	r2, r6
 800170a:	4649      	mov	r1, r9
 800170c:	4640      	mov	r0, r8
 800170e:	47d0      	blx	sl
 8001710:	3001      	adds	r0, #1
 8001712:	d0ad      	beq.n	8001670 <_printf_i+0x15c>
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	079b      	lsls	r3, r3, #30
 8001718:	d413      	bmi.n	8001742 <_printf_i+0x22e>
 800171a:	68e0      	ldr	r0, [r4, #12]
 800171c:	9b03      	ldr	r3, [sp, #12]
 800171e:	4298      	cmp	r0, r3
 8001720:	bfb8      	it	lt
 8001722:	4618      	movlt	r0, r3
 8001724:	e7a6      	b.n	8001674 <_printf_i+0x160>
 8001726:	2301      	movs	r3, #1
 8001728:	4632      	mov	r2, r6
 800172a:	4649      	mov	r1, r9
 800172c:	4640      	mov	r0, r8
 800172e:	47d0      	blx	sl
 8001730:	3001      	adds	r0, #1
 8001732:	d09d      	beq.n	8001670 <_printf_i+0x15c>
 8001734:	3501      	adds	r5, #1
 8001736:	68e3      	ldr	r3, [r4, #12]
 8001738:	9903      	ldr	r1, [sp, #12]
 800173a:	1a5b      	subs	r3, r3, r1
 800173c:	42ab      	cmp	r3, r5
 800173e:	dcf2      	bgt.n	8001726 <_printf_i+0x212>
 8001740:	e7eb      	b.n	800171a <_printf_i+0x206>
 8001742:	2500      	movs	r5, #0
 8001744:	f104 0619 	add.w	r6, r4, #25
 8001748:	e7f5      	b.n	8001736 <_printf_i+0x222>
 800174a:	bf00      	nop
 800174c:	08001b3d 	.word	0x08001b3d
 8001750:	08001b4e 	.word	0x08001b4e

08001754 <__sflush_r>:
 8001754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175c:	0716      	lsls	r6, r2, #28
 800175e:	4605      	mov	r5, r0
 8001760:	460c      	mov	r4, r1
 8001762:	d454      	bmi.n	800180e <__sflush_r+0xba>
 8001764:	684b      	ldr	r3, [r1, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dc02      	bgt.n	8001770 <__sflush_r+0x1c>
 800176a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	dd48      	ble.n	8001802 <__sflush_r+0xae>
 8001770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001772:	2e00      	cmp	r6, #0
 8001774:	d045      	beq.n	8001802 <__sflush_r+0xae>
 8001776:	2300      	movs	r3, #0
 8001778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800177c:	682f      	ldr	r7, [r5, #0]
 800177e:	6a21      	ldr	r1, [r4, #32]
 8001780:	602b      	str	r3, [r5, #0]
 8001782:	d030      	beq.n	80017e6 <__sflush_r+0x92>
 8001784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	0759      	lsls	r1, r3, #29
 800178a:	d505      	bpl.n	8001798 <__sflush_r+0x44>
 800178c:	6863      	ldr	r3, [r4, #4]
 800178e:	1ad2      	subs	r2, r2, r3
 8001790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001792:	b10b      	cbz	r3, 8001798 <__sflush_r+0x44>
 8001794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001796:	1ad2      	subs	r2, r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800179c:	6a21      	ldr	r1, [r4, #32]
 800179e:	4628      	mov	r0, r5
 80017a0:	47b0      	blx	r6
 80017a2:	1c43      	adds	r3, r0, #1
 80017a4:	89a3      	ldrh	r3, [r4, #12]
 80017a6:	d106      	bne.n	80017b6 <__sflush_r+0x62>
 80017a8:	6829      	ldr	r1, [r5, #0]
 80017aa:	291d      	cmp	r1, #29
 80017ac:	d82b      	bhi.n	8001806 <__sflush_r+0xb2>
 80017ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <__sflush_r+0x104>)
 80017b0:	410a      	asrs	r2, r1
 80017b2:	07d6      	lsls	r6, r2, #31
 80017b4:	d427      	bmi.n	8001806 <__sflush_r+0xb2>
 80017b6:	2200      	movs	r2, #0
 80017b8:	6062      	str	r2, [r4, #4]
 80017ba:	04d9      	lsls	r1, r3, #19
 80017bc:	6922      	ldr	r2, [r4, #16]
 80017be:	6022      	str	r2, [r4, #0]
 80017c0:	d504      	bpl.n	80017cc <__sflush_r+0x78>
 80017c2:	1c42      	adds	r2, r0, #1
 80017c4:	d101      	bne.n	80017ca <__sflush_r+0x76>
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	b903      	cbnz	r3, 80017cc <__sflush_r+0x78>
 80017ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80017cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017ce:	602f      	str	r7, [r5, #0]
 80017d0:	b1b9      	cbz	r1, 8001802 <__sflush_r+0xae>
 80017d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017d6:	4299      	cmp	r1, r3
 80017d8:	d002      	beq.n	80017e0 <__sflush_r+0x8c>
 80017da:	4628      	mov	r0, r5
 80017dc:	f7ff fbf2 	bl	8000fc4 <_free_r>
 80017e0:	2300      	movs	r3, #0
 80017e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80017e4:	e00d      	b.n	8001802 <__sflush_r+0xae>
 80017e6:	2301      	movs	r3, #1
 80017e8:	4628      	mov	r0, r5
 80017ea:	47b0      	blx	r6
 80017ec:	4602      	mov	r2, r0
 80017ee:	1c50      	adds	r0, r2, #1
 80017f0:	d1c9      	bne.n	8001786 <__sflush_r+0x32>
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0c6      	beq.n	8001786 <__sflush_r+0x32>
 80017f8:	2b1d      	cmp	r3, #29
 80017fa:	d001      	beq.n	8001800 <__sflush_r+0xac>
 80017fc:	2b16      	cmp	r3, #22
 80017fe:	d11e      	bne.n	800183e <__sflush_r+0xea>
 8001800:	602f      	str	r7, [r5, #0]
 8001802:	2000      	movs	r0, #0
 8001804:	e022      	b.n	800184c <__sflush_r+0xf8>
 8001806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180a:	b21b      	sxth	r3, r3
 800180c:	e01b      	b.n	8001846 <__sflush_r+0xf2>
 800180e:	690f      	ldr	r7, [r1, #16]
 8001810:	2f00      	cmp	r7, #0
 8001812:	d0f6      	beq.n	8001802 <__sflush_r+0xae>
 8001814:	0793      	lsls	r3, r2, #30
 8001816:	680e      	ldr	r6, [r1, #0]
 8001818:	bf08      	it	eq
 800181a:	694b      	ldreq	r3, [r1, #20]
 800181c:	600f      	str	r7, [r1, #0]
 800181e:	bf18      	it	ne
 8001820:	2300      	movne	r3, #0
 8001822:	eba6 0807 	sub.w	r8, r6, r7
 8001826:	608b      	str	r3, [r1, #8]
 8001828:	f1b8 0f00 	cmp.w	r8, #0
 800182c:	dde9      	ble.n	8001802 <__sflush_r+0xae>
 800182e:	6a21      	ldr	r1, [r4, #32]
 8001830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001832:	4643      	mov	r3, r8
 8001834:	463a      	mov	r2, r7
 8001836:	4628      	mov	r0, r5
 8001838:	47b0      	blx	r6
 800183a:	2800      	cmp	r0, #0
 800183c:	dc08      	bgt.n	8001850 <__sflush_r+0xfc>
 800183e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001846:	81a3      	strh	r3, [r4, #12]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001850:	4407      	add	r7, r0
 8001852:	eba8 0800 	sub.w	r8, r8, r0
 8001856:	e7e7      	b.n	8001828 <__sflush_r+0xd4>
 8001858:	dfbffffe 	.word	0xdfbffffe

0800185c <_fflush_r>:
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	690b      	ldr	r3, [r1, #16]
 8001860:	4605      	mov	r5, r0
 8001862:	460c      	mov	r4, r1
 8001864:	b913      	cbnz	r3, 800186c <_fflush_r+0x10>
 8001866:	2500      	movs	r5, #0
 8001868:	4628      	mov	r0, r5
 800186a:	bd38      	pop	{r3, r4, r5, pc}
 800186c:	b118      	cbz	r0, 8001876 <_fflush_r+0x1a>
 800186e:	6a03      	ldr	r3, [r0, #32]
 8001870:	b90b      	cbnz	r3, 8001876 <_fflush_r+0x1a>
 8001872:	f7ff fa9f 	bl	8000db4 <__sinit>
 8001876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f3      	beq.n	8001866 <_fflush_r+0xa>
 800187e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001880:	07d0      	lsls	r0, r2, #31
 8001882:	d404      	bmi.n	800188e <_fflush_r+0x32>
 8001884:	0599      	lsls	r1, r3, #22
 8001886:	d402      	bmi.n	800188e <_fflush_r+0x32>
 8001888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800188a:	f7ff fb98 	bl	8000fbe <__retarget_lock_acquire_recursive>
 800188e:	4628      	mov	r0, r5
 8001890:	4621      	mov	r1, r4
 8001892:	f7ff ff5f 	bl	8001754 <__sflush_r>
 8001896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001898:	07da      	lsls	r2, r3, #31
 800189a:	4605      	mov	r5, r0
 800189c:	d4e4      	bmi.n	8001868 <_fflush_r+0xc>
 800189e:	89a3      	ldrh	r3, [r4, #12]
 80018a0:	059b      	lsls	r3, r3, #22
 80018a2:	d4e1      	bmi.n	8001868 <_fflush_r+0xc>
 80018a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018a6:	f7ff fb8b 	bl	8000fc0 <__retarget_lock_release_recursive>
 80018aa:	e7dd      	b.n	8001868 <_fflush_r+0xc>

080018ac <__swbuf_r>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	460e      	mov	r6, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	4605      	mov	r5, r0
 80018b4:	b118      	cbz	r0, 80018be <__swbuf_r+0x12>
 80018b6:	6a03      	ldr	r3, [r0, #32]
 80018b8:	b90b      	cbnz	r3, 80018be <__swbuf_r+0x12>
 80018ba:	f7ff fa7b 	bl	8000db4 <__sinit>
 80018be:	69a3      	ldr	r3, [r4, #24]
 80018c0:	60a3      	str	r3, [r4, #8]
 80018c2:	89a3      	ldrh	r3, [r4, #12]
 80018c4:	071a      	lsls	r2, r3, #28
 80018c6:	d501      	bpl.n	80018cc <__swbuf_r+0x20>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	b943      	cbnz	r3, 80018de <__swbuf_r+0x32>
 80018cc:	4621      	mov	r1, r4
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f82a 	bl	8001928 <__swsetup_r>
 80018d4:	b118      	cbz	r0, 80018de <__swbuf_r+0x32>
 80018d6:	f04f 37ff 	mov.w	r7, #4294967295
 80018da:	4638      	mov	r0, r7
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	6922      	ldr	r2, [r4, #16]
 80018e2:	1a98      	subs	r0, r3, r2
 80018e4:	6963      	ldr	r3, [r4, #20]
 80018e6:	b2f6      	uxtb	r6, r6
 80018e8:	4283      	cmp	r3, r0
 80018ea:	4637      	mov	r7, r6
 80018ec:	dc05      	bgt.n	80018fa <__swbuf_r+0x4e>
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f7ff ffb3 	bl	800185c <_fflush_r>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d1ed      	bne.n	80018d6 <__swbuf_r+0x2a>
 80018fa:	68a3      	ldr	r3, [r4, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60a3      	str	r3, [r4, #8]
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	6022      	str	r2, [r4, #0]
 8001906:	701e      	strb	r6, [r3, #0]
 8001908:	6962      	ldr	r2, [r4, #20]
 800190a:	1c43      	adds	r3, r0, #1
 800190c:	429a      	cmp	r2, r3
 800190e:	d004      	beq.n	800191a <__swbuf_r+0x6e>
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	07db      	lsls	r3, r3, #31
 8001914:	d5e1      	bpl.n	80018da <__swbuf_r+0x2e>
 8001916:	2e0a      	cmp	r6, #10
 8001918:	d1df      	bne.n	80018da <__swbuf_r+0x2e>
 800191a:	4621      	mov	r1, r4
 800191c:	4628      	mov	r0, r5
 800191e:	f7ff ff9d 	bl	800185c <_fflush_r>
 8001922:	2800      	cmp	r0, #0
 8001924:	d0d9      	beq.n	80018da <__swbuf_r+0x2e>
 8001926:	e7d6      	b.n	80018d6 <__swbuf_r+0x2a>

08001928 <__swsetup_r>:
 8001928:	b538      	push	{r3, r4, r5, lr}
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <__swsetup_r+0xa8>)
 800192c:	4605      	mov	r5, r0
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	460c      	mov	r4, r1
 8001932:	b118      	cbz	r0, 800193c <__swsetup_r+0x14>
 8001934:	6a03      	ldr	r3, [r0, #32]
 8001936:	b90b      	cbnz	r3, 800193c <__swsetup_r+0x14>
 8001938:	f7ff fa3c 	bl	8000db4 <__sinit>
 800193c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001940:	0719      	lsls	r1, r3, #28
 8001942:	d422      	bmi.n	800198a <__swsetup_r+0x62>
 8001944:	06da      	lsls	r2, r3, #27
 8001946:	d407      	bmi.n	8001958 <__swsetup_r+0x30>
 8001948:	2209      	movs	r2, #9
 800194a:	602a      	str	r2, [r5, #0]
 800194c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
 8001956:	e033      	b.n	80019c0 <__swsetup_r+0x98>
 8001958:	0758      	lsls	r0, r3, #29
 800195a:	d512      	bpl.n	8001982 <__swsetup_r+0x5a>
 800195c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800195e:	b141      	cbz	r1, 8001972 <__swsetup_r+0x4a>
 8001960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001964:	4299      	cmp	r1, r3
 8001966:	d002      	beq.n	800196e <__swsetup_r+0x46>
 8001968:	4628      	mov	r0, r5
 800196a:	f7ff fb2b 	bl	8000fc4 <_free_r>
 800196e:	2300      	movs	r3, #0
 8001970:	6363      	str	r3, [r4, #52]	@ 0x34
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001978:	81a3      	strh	r3, [r4, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	6063      	str	r3, [r4, #4]
 800197e:	6923      	ldr	r3, [r4, #16]
 8001980:	6023      	str	r3, [r4, #0]
 8001982:	89a3      	ldrh	r3, [r4, #12]
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	81a3      	strh	r3, [r4, #12]
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	b94b      	cbnz	r3, 80019a2 <__swsetup_r+0x7a>
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001998:	d003      	beq.n	80019a2 <__swsetup_r+0x7a>
 800199a:	4621      	mov	r1, r4
 800199c:	4628      	mov	r0, r5
 800199e:	f000 f84f 	bl	8001a40 <__smakebuf_r>
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	f013 0201 	ands.w	r2, r3, #1
 80019aa:	d00a      	beq.n	80019c2 <__swsetup_r+0x9a>
 80019ac:	2200      	movs	r2, #0
 80019ae:	60a2      	str	r2, [r4, #8]
 80019b0:	6962      	ldr	r2, [r4, #20]
 80019b2:	4252      	negs	r2, r2
 80019b4:	61a2      	str	r2, [r4, #24]
 80019b6:	6922      	ldr	r2, [r4, #16]
 80019b8:	b942      	cbnz	r2, 80019cc <__swsetup_r+0xa4>
 80019ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019be:	d1c5      	bne.n	800194c <__swsetup_r+0x24>
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
 80019c2:	0799      	lsls	r1, r3, #30
 80019c4:	bf58      	it	pl
 80019c6:	6962      	ldrpl	r2, [r4, #20]
 80019c8:	60a2      	str	r2, [r4, #8]
 80019ca:	e7f4      	b.n	80019b6 <__swsetup_r+0x8e>
 80019cc:	2000      	movs	r0, #0
 80019ce:	e7f7      	b.n	80019c0 <__swsetup_r+0x98>
 80019d0:	20000018 	.word	0x20000018

080019d4 <_sbrk_r>:
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4d06      	ldr	r5, [pc, #24]	@ (80019f0 <_sbrk_r+0x1c>)
 80019d8:	2300      	movs	r3, #0
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	602b      	str	r3, [r5, #0]
 80019e0:	f7fe fdb8 	bl	8000554 <_sbrk>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_sbrk_r+0x1a>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_sbrk_r+0x1a>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	200001c8 	.word	0x200001c8

080019f4 <__swhatbuf_r>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	460c      	mov	r4, r1
 80019f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019fc:	2900      	cmp	r1, #0
 80019fe:	b096      	sub	sp, #88	@ 0x58
 8001a00:	4615      	mov	r5, r2
 8001a02:	461e      	mov	r6, r3
 8001a04:	da0d      	bge.n	8001a22 <__swhatbuf_r+0x2e>
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2340      	movne	r3, #64	@ 0x40
 8001a14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a18:	2000      	movs	r0, #0
 8001a1a:	6031      	str	r1, [r6, #0]
 8001a1c:	602b      	str	r3, [r5, #0]
 8001a1e:	b016      	add	sp, #88	@ 0x58
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	466a      	mov	r2, sp
 8001a24:	f000 f848 	bl	8001ab8 <_fstat_r>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	dbec      	blt.n	8001a06 <__swhatbuf_r+0x12>
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a36:	4259      	negs	r1, r3
 8001a38:	4159      	adcs	r1, r3
 8001a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a3e:	e7eb      	b.n	8001a18 <__swhatbuf_r+0x24>

08001a40 <__smakebuf_r>:
 8001a40:	898b      	ldrh	r3, [r1, #12]
 8001a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a44:	079d      	lsls	r5, r3, #30
 8001a46:	4606      	mov	r6, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	d507      	bpl.n	8001a5c <__smakebuf_r+0x1c>
 8001a4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a50:	6023      	str	r3, [r4, #0]
 8001a52:	6123      	str	r3, [r4, #16]
 8001a54:	2301      	movs	r3, #1
 8001a56:	6163      	str	r3, [r4, #20]
 8001a58:	b003      	add	sp, #12
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	ab01      	add	r3, sp, #4
 8001a5e:	466a      	mov	r2, sp
 8001a60:	f7ff ffc8 	bl	80019f4 <__swhatbuf_r>
 8001a64:	9f00      	ldr	r7, [sp, #0]
 8001a66:	4605      	mov	r5, r0
 8001a68:	4639      	mov	r1, r7
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f7ff fb16 	bl	800109c <_malloc_r>
 8001a70:	b948      	cbnz	r0, 8001a86 <__smakebuf_r+0x46>
 8001a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a76:	059a      	lsls	r2, r3, #22
 8001a78:	d4ee      	bmi.n	8001a58 <__smakebuf_r+0x18>
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	e7e2      	b.n	8001a4c <__smakebuf_r+0xc>
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	6020      	str	r0, [r4, #0]
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8e:	81a3      	strh	r3, [r4, #12]
 8001a90:	9b01      	ldr	r3, [sp, #4]
 8001a92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001a96:	b15b      	cbz	r3, 8001ab0 <__smakebuf_r+0x70>
 8001a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f000 f81d 	bl	8001adc <_isatty_r>
 8001aa2:	b128      	cbz	r0, 8001ab0 <__smakebuf_r+0x70>
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	431d      	orrs	r5, r3
 8001ab4:	81a5      	strh	r5, [r4, #12]
 8001ab6:	e7cf      	b.n	8001a58 <__smakebuf_r+0x18>

08001ab8 <_fstat_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	4d07      	ldr	r5, [pc, #28]	@ (8001ad8 <_fstat_r+0x20>)
 8001abc:	2300      	movs	r3, #0
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	602b      	str	r3, [r5, #0]
 8001ac6:	f7fe fd1d 	bl	8000504 <_fstat>
 8001aca:	1c43      	adds	r3, r0, #1
 8001acc:	d102      	bne.n	8001ad4 <_fstat_r+0x1c>
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	b103      	cbz	r3, 8001ad4 <_fstat_r+0x1c>
 8001ad2:	6023      	str	r3, [r4, #0]
 8001ad4:	bd38      	pop	{r3, r4, r5, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001c8 	.word	0x200001c8

08001adc <_isatty_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d06      	ldr	r5, [pc, #24]	@ (8001af8 <_isatty_r+0x1c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f7fe fd1c 	bl	8000524 <_isatty>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_isatty_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_isatty_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	200001c8 	.word	0x200001c8

08001afc <_init>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	bf00      	nop
 8001b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b02:	bc08      	pop	{r3}
 8001b04:	469e      	mov	lr, r3
 8001b06:	4770      	bx	lr

08001b08 <_fini>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr
