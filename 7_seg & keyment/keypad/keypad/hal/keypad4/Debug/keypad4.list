
keypad4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080021d0  080021d0  000031d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002218  08002218  0000406c  2**0
                  CONTENTS
  4 .ARM          00000008  08002218  08002218  00003218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002220  08002220  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002220  08002220  00003220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002224  08002224  00003224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002228  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000006c  08002294  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002294  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070d3  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001380  00000000  00000000  0000b16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cb  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155bc  00000000  00000000  0000d00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f22  00000000  00000000  000225c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085924  00000000  00000000  0002a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afe0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  000afe50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b1c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021b8 	.word	0x080021b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080021b8 	.word	0x080021b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
void GPIO_Init(void);
void UART2_Init(void);
char Read_Keypad(void);
void send_uart(char *message);

int main(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
    HAL_Init();
 8000586:	f000 fa0d 	bl	80009a4 <HAL_Init>
    SystemClock_Config();
 800058a:	f000 f8f1 	bl	8000770 <SystemClock_Config>
    GPIO_Init();
 800058e:	f000 f86b 	bl	8000668 <GPIO_Init>
    UART2_Init();
 8000592:	f000 f89f 	bl	80006d4 <UART2_Init>

    char key;
    char msg[20];

    while (1) {
        key = Read_Keypad();
 8000596:	f000 f817 	bl	80005c8 <Read_Keypad>
 800059a:	4603      	mov	r3, r0
 800059c:	75fb      	strb	r3, [r7, #23]
        if (key != 0) {  // If a key is pressed
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f8      	beq.n	8000596 <main+0x16>
            sprintf(msg, "Key: %c\n", key);
 80005a4:	7dfa      	ldrb	r2, [r7, #23]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4906      	ldr	r1, [pc, #24]	@ (80005c4 <main+0x44>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f96c 	bl	8001888 <siprintf>
            send_uart(msg);
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f8c6 	bl	8000744 <send_uart>
            HAL_Delay(300); // Debounce delay
 80005b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005bc:	f000 fa64 	bl	8000a88 <HAL_Delay>
        key = Read_Keypad();
 80005c0:	e7e9      	b.n	8000596 <main+0x16>
 80005c2:	bf00      	nop
 80005c4:	080021d0 	.word	0x080021d0

080005c8 <Read_Keypad>:
        }
    }
}

// Function to read the pressed key
char Read_Keypad(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e03d      	b.n	8000650 <Read_Keypad+0x88>
        // Set all rows LOW first
        HAL_GPIO_WritePin(KEYPAD_PORT, ROW1, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4821      	ldr	r0, [pc, #132]	@ (8000660 <Read_Keypad+0x98>)
 80005da:	f000 fcfb 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(KEYPAD_PORT, ROW2, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2102      	movs	r1, #2
 80005e2:	481f      	ldr	r0, [pc, #124]	@ (8000660 <Read_Keypad+0x98>)
 80005e4:	f000 fcf6 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(KEYPAD_PORT, ROW3, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2104      	movs	r1, #4
 80005ec:	481c      	ldr	r0, [pc, #112]	@ (8000660 <Read_Keypad+0x98>)
 80005ee:	f000 fcf1 	bl	8000fd4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(KEYPAD_PORT, ROW4, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <Read_Keypad+0x98>)
 80005f8:	f000 fcec 	bl	8000fd4 <HAL_GPIO_WritePin>

        // Set one row HIGH at a time
        HAL_GPIO_WritePin(KEYPAD_PORT, (ROW1 << row), GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	b29b      	uxth	r3, r3
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <Read_Keypad+0x98>)
 800060c:	f000 fce2 	bl	8000fd4 <HAL_GPIO_WritePin>

        for (int col = 0; col < 4; col++) {
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	e016      	b.n	8000644 <Read_Keypad+0x7c>
            if (HAL_GPIO_ReadPin(KEYPAD_PORT, (COL1 << col)) == GPIO_PIN_SET) {
 8000616:	2210      	movs	r2, #16
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	b29b      	uxth	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	480f      	ldr	r0, [pc, #60]	@ (8000660 <Read_Keypad+0x98>)
 8000624:	f000 fcbe 	bl	8000fa4 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d107      	bne.n	800063e <Read_Keypad+0x76>
                return keypad[row][col];  // Return key value
 800062e:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <Read_Keypad+0x9c>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	441a      	add	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	e00c      	b.n	8000658 <Read_Keypad+0x90>
        for (int col = 0; col < 4; col++) {
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b03      	cmp	r3, #3
 8000648:	dde5      	ble.n	8000616 <Read_Keypad+0x4e>
    for (int row = 0; row < 4; row++) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b03      	cmp	r3, #3
 8000654:	ddbe      	ble.n	80005d4 <Read_Keypad+0xc>
            }
        }
    }
    return 0;  // No key pressed
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020800 	.word	0x40020800
 8000664:	20000000 	.word	0x20000000

08000668 <GPIO_Init>:

// Function to initialize GPIO
void GPIO_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable clock for GPIOC
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <GPIO_Init+0x64>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <GPIO_Init+0x64>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <GPIO_Init+0x64>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

    // Configure rows as output
    GPIO_InitStruct.Pin = ROW1 | ROW2 | ROW3 | ROW4;
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(KEYPAD_PORT, &GPIO_InitStruct);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <GPIO_Init+0x68>)
 80006aa:	f000 faf7 	bl	8000c9c <HAL_GPIO_Init>

    // Configure columns as input with pull-down
    GPIO_InitStruct.Pin = COL1 | COL2 | COL3 | COL4;
 80006ae:	23f0      	movs	r3, #240	@ 0xf0
 80006b0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KEYPAD_PORT, &GPIO_InitStruct);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <GPIO_Init+0x68>)
 80006c0:	f000 faec 	bl	8000c9c <HAL_GPIO_Init>
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020800 	.word	0x40020800

080006d4 <UART2_Init>:

// UART initialization function
void UART2_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <UART2_Init+0x64>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <UART2_Init+0x64>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <UART2_Init+0x64>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

    huart2.Instance = USART2;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <UART2_Init+0x68>)
 80006f8:	4a11      	ldr	r2, [pc, #68]	@ (8000740 <UART2_Init+0x6c>)
 80006fa:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <UART2_Init+0x68>)
 80006fe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000702:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <UART2_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <UART2_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <UART2_Init+0x68>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <UART2_Init+0x68>)
 8000718:	220c      	movs	r2, #12
 800071a:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <UART2_Init+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <UART2_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]

    HAL_UART_Init(&huart2);
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <UART2_Init+0x68>)
 800072a:	f000 fca1 	bl	8001070 <HAL_UART_Init>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	20000088 	.word	0x20000088
 8000740:	40004400 	.word	0x40004400

08000744 <send_uart>:

// Function to send a message over UART
void send_uart(char *message) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fd47 	bl	80001e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <send_uart+0x28>)
 800075e:	f000 fcd7 	bl	8001110 <HAL_UART_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000088 	.word	0x20000088

08000770 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void) {
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
    // Default clock configuration for STM32F103
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000794:	6453      	str	r3, [r2, #68]	@ 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 fa38 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	@ (8000854 <HAL_UART_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12b      	bne.n	800084a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0x88>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <HAL_UART_MspInit+0x8c>)
 8000846:	f000 fa29 	bl	8000c9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40004400 	.word	0x40004400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f8c7 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f000 ffea 	bl	80018c8 <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20020000 	.word	0x20020000
 8000920:	00000400 	.word	0x00000400
 8000924:	200000d0 	.word	0x200000d0
 8000928:	20000220 	.word	0x20000220

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000954:	f7ff ffea 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	@ (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	@ (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f000 ffa9 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fdfd 	bl	8000580 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000994:	08002228 	.word	0x08002228
  ldr r2, =_sbss
 8000998:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800099c:	20000220 	.word	0x20000220

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f931 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fed2 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f93b 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f911 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000010 	.word	0x20000010
 8000a40:	20000018 	.word	0x20000018
 8000a44:	20000014 	.word	0x20000014

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000018 	.word	0x20000018
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000018 	.word	0x20000018

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff47 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5c 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e159      	b.n	8000f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8148 	bne.w	8000f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a2 	beq.w	8000f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b57      	ldr	r3, [pc, #348]	@ (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a56      	ldr	r2, [pc, #344]	@ (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b54      	ldr	r3, [pc, #336]	@ (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a52      	ldr	r2, [pc, #328]	@ (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a49      	ldr	r2, [pc, #292]	@ (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	@ (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1fe>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	@ (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	@ (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1f6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1f2>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	@ (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a24      	ldr	r2, [pc, #144]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f aea2 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_RCC_GetHCLKFreq+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010

08001020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001024:	f7ff fff0 	bl	8001008 <HAL_RCC_GetHCLKFreq>
 8001028:	4602      	mov	r2, r0
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	0a9b      	lsrs	r3, r3, #10
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	4903      	ldr	r1, [pc, #12]	@ (8001044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001036:	5ccb      	ldrb	r3, [r1, r3]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	080021dc 	.word	0x080021dc

08001048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800104c:	f7ff ffdc 	bl	8001008 <HAL_RCC_GetHCLKFreq>
 8001050:	4602      	mov	r2, r0
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	0b5b      	lsrs	r3, r3, #13
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	4903      	ldr	r1, [pc, #12]	@ (800106c <HAL_RCC_GetPCLK2Freq+0x24>)
 800105e:	5ccb      	ldrb	r3, [r1, r3]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	080021dc 	.word	0x080021dc

08001070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e042      	b.n	8001108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fb9a 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2224      	movs	r2, #36	@ 0x24
 80010a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f973 	bl	80013a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80010c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80010d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80010e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2220      	movs	r2, #32
 80010f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b20      	cmp	r3, #32
 800112e:	d175      	bne.n	800121c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <HAL_UART_Transmit+0x2c>
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e06e      	b.n	800121e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2221      	movs	r2, #33	@ 0x21
 800114a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800114e:	f7ff fc8f 	bl	8000a70 <HAL_GetTick>
 8001152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	88fa      	ldrh	r2, [r7, #6]
 8001158:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001168:	d108      	bne.n	800117c <HAL_UART_Transmit+0x6c>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	e003      	b.n	8001184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001184:	e02e      	b.n	80011e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2200      	movs	r2, #0
 800118e:	2180      	movs	r1, #128	@ 0x80
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f848 	bl	8001226 <UART_WaitOnFlagUntilTimeout>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2220      	movs	r2, #32
 80011a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e03a      	b.n	800121e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10b      	bne.n	80011c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	3302      	adds	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	e007      	b.n	80011d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1cb      	bne.n	8001186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2200      	movs	r2, #0
 80011f6:	2140      	movs	r1, #64	@ 0x40
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f814 	bl	8001226 <UART_WaitOnFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2220      	movs	r2, #32
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e006      	b.n	800121e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2220      	movs	r2, #32
 8001214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	e000      	b.n	800121e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800121c:	2302      	movs	r3, #2
  }
}
 800121e:	4618      	mov	r0, r3
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4613      	mov	r3, r2
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001236:	e03b      	b.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123e:	d037      	beq.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001240:	f7ff fc16 	bl	8000a70 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	d302      	bcc.n	8001256 <UART_WaitOnFlagUntilTimeout+0x30>
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e03a      	b.n	80012d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d023      	beq.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b80      	cmp	r3, #128	@ 0x80
 800126c:	d020      	beq.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b40      	cmp	r3, #64	@ 0x40
 8001272:	d01d      	beq.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b08      	cmp	r3, #8
 8001280:	d116      	bne.n	80012b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f81d 	bl	80012d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2208      	movs	r2, #8
 80012a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00f      	b.n	80012d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4013      	ands	r3, r2
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	429a      	cmp	r2, r3
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d0b4      	beq.n	8001238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80012d8:	b480      	push	{r7}
 80012da:	b095      	sub	sp, #84	@ 0x54
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	330c      	adds	r3, #12
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ea:	e853 3f00 	ldrex	r3, [r3]
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80012f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80012f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	330c      	adds	r3, #12
 80012fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001300:	643a      	str	r2, [r7, #64]	@ 0x40
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001308:	e841 2300 	strex	r3, r2, [r1]
 800130c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800130e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e5      	bne.n	80012e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3314      	adds	r3, #20
 800131a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	e853 3f00 	ldrex	r3, [r3]
 8001322:	61fb      	str	r3, [r7, #28]
   return(result);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3314      	adds	r3, #20
 8001332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800133a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800133c:	e841 2300 	strex	r3, r2, [r1]
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e5      	bne.n	8001314 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	2b01      	cmp	r3, #1
 800134e:	d119      	bne.n	8001384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	330c      	adds	r3, #12
 8001356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	e853 3f00 	ldrex	r3, [r3]
 800135e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f023 0310 	bic.w	r3, r3, #16
 8001366:	647b      	str	r3, [r7, #68]	@ 0x44
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	330c      	adds	r3, #12
 800136e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001370:	61ba      	str	r2, [r7, #24]
 8001372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001374:	6979      	ldr	r1, [r7, #20]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	e841 2300 	strex	r3, r2, [r1]
 800137c:	613b      	str	r3, [r7, #16]
   return(result);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e5      	bne.n	8001350 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001392:	bf00      	nop
 8001394:	3754      	adds	r7, #84	@ 0x54
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0c0      	sub	sp, #256	@ 0x100
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80013b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	ea40 0301 	orr.w	r3, r0, r1
 80013c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	431a      	orrs	r2, r3
 80013e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80013ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80013f8:	f021 010c 	bic.w	r1, r1, #12
 80013fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001406:	430b      	orrs	r3, r1
 8001408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800140a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800141a:	6999      	ldr	r1, [r3, #24]
 800141c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	ea40 0301 	orr.w	r3, r0, r1
 8001426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b8f      	ldr	r3, [pc, #572]	@ (800166c <UART_SetConfig+0x2cc>)
 8001430:	429a      	cmp	r2, r3
 8001432:	d005      	beq.n	8001440 <UART_SetConfig+0xa0>
 8001434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b8d      	ldr	r3, [pc, #564]	@ (8001670 <UART_SetConfig+0x2d0>)
 800143c:	429a      	cmp	r2, r3
 800143e:	d104      	bne.n	800144a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001440:	f7ff fe02 	bl	8001048 <HAL_RCC_GetPCLK2Freq>
 8001444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001448:	e003      	b.n	8001452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800144a:	f7ff fde9 	bl	8001020 <HAL_RCC_GetPCLK1Freq>
 800144e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800145c:	f040 810c 	bne.w	8001678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001464:	2200      	movs	r2, #0
 8001466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800146a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800146e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001472:	4622      	mov	r2, r4
 8001474:	462b      	mov	r3, r5
 8001476:	1891      	adds	r1, r2, r2
 8001478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800147a:	415b      	adcs	r3, r3
 800147c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800147e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001482:	4621      	mov	r1, r4
 8001484:	eb12 0801 	adds.w	r8, r2, r1
 8001488:	4629      	mov	r1, r5
 800148a:	eb43 0901 	adc.w	r9, r3, r1
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800149a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800149e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014a2:	4690      	mov	r8, r2
 80014a4:	4699      	mov	r9, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	eb18 0303 	adds.w	r3, r8, r3
 80014ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80014b0:	462b      	mov	r3, r5
 80014b2:	eb49 0303 	adc.w	r3, r9, r3
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80014c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80014ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80014ce:	460b      	mov	r3, r1
 80014d0:	18db      	adds	r3, r3, r3
 80014d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80014d4:	4613      	mov	r3, r2
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	657b      	str	r3, [r7, #84]	@ 0x54
 80014dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014e4:	f7fe fed4 	bl	8000290 <__aeabi_uldivmod>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <UART_SetConfig+0x2d4>)
 80014ee:	fba3 2302 	umull	r2, r3, r3, r2
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	011c      	lsls	r4, r3, #4
 80014f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001508:	4642      	mov	r2, r8
 800150a:	464b      	mov	r3, r9
 800150c:	1891      	adds	r1, r2, r2
 800150e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001510:	415b      	adcs	r3, r3
 8001512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001518:	4641      	mov	r1, r8
 800151a:	eb12 0a01 	adds.w	sl, r2, r1
 800151e:	4649      	mov	r1, r9
 8001520:	eb43 0b01 	adc.w	fp, r3, r1
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001538:	4692      	mov	sl, r2
 800153a:	469b      	mov	fp, r3
 800153c:	4643      	mov	r3, r8
 800153e:	eb1a 0303 	adds.w	r3, sl, r3
 8001542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001546:	464b      	mov	r3, r9
 8001548:	eb4b 0303 	adc.w	r3, fp, r3
 800154c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800155c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001564:	460b      	mov	r3, r1
 8001566:	18db      	adds	r3, r3, r3
 8001568:	643b      	str	r3, [r7, #64]	@ 0x40
 800156a:	4613      	mov	r3, r2
 800156c:	eb42 0303 	adc.w	r3, r2, r3
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44
 8001572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800157a:	f7fe fe89 	bl	8000290 <__aeabi_uldivmod>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4611      	mov	r1, r2
 8001584:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <UART_SetConfig+0x2d4>)
 8001586:	fba3 2301 	umull	r2, r3, r3, r1
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2264      	movs	r2, #100	@ 0x64
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	1acb      	subs	r3, r1, r3
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <UART_SetConfig+0x2d4>)
 800159c:	fba3 2302 	umull	r2, r3, r3, r2
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80015a8:	441c      	add	r4, r3
 80015aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015ae:	2200      	movs	r2, #0
 80015b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80015bc:	4642      	mov	r2, r8
 80015be:	464b      	mov	r3, r9
 80015c0:	1891      	adds	r1, r2, r2
 80015c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015c4:	415b      	adcs	r3, r3
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015cc:	4641      	mov	r1, r8
 80015ce:	1851      	adds	r1, r2, r1
 80015d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80015d2:	4649      	mov	r1, r9
 80015d4:	414b      	adcs	r3, r1
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80015e4:	4659      	mov	r1, fp
 80015e6:	00cb      	lsls	r3, r1, #3
 80015e8:	4651      	mov	r1, sl
 80015ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ee:	4651      	mov	r1, sl
 80015f0:	00ca      	lsls	r2, r1, #3
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	4642      	mov	r2, r8
 80015fa:	189b      	adds	r3, r3, r2
 80015fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001600:	464b      	mov	r3, r9
 8001602:	460a      	mov	r2, r1
 8001604:	eb42 0303 	adc.w	r3, r2, r3
 8001608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800160c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800161c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001620:	460b      	mov	r3, r1
 8001622:	18db      	adds	r3, r3, r3
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001626:	4613      	mov	r3, r2
 8001628:	eb42 0303 	adc.w	r3, r2, r3
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001636:	f7fe fe2b 	bl	8000290 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <UART_SetConfig+0x2d4>)
 8001640:	fba3 1302 	umull	r1, r3, r3, r2
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	2164      	movs	r1, #100	@ 0x64
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	3332      	adds	r3, #50	@ 0x32
 8001652:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <UART_SetConfig+0x2d4>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	f003 0207 	and.w	r2, r3, #7
 800165e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4422      	add	r2, r4
 8001666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001668:	e106      	b.n	8001878 <UART_SetConfig+0x4d8>
 800166a:	bf00      	nop
 800166c:	40011000 	.word	0x40011000
 8001670:	40011400 	.word	0x40011400
 8001674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800167c:	2200      	movs	r2, #0
 800167e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800168a:	4642      	mov	r2, r8
 800168c:	464b      	mov	r3, r9
 800168e:	1891      	adds	r1, r2, r2
 8001690:	6239      	str	r1, [r7, #32]
 8001692:	415b      	adcs	r3, r3
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
 8001696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800169a:	4641      	mov	r1, r8
 800169c:	1854      	adds	r4, r2, r1
 800169e:	4649      	mov	r1, r9
 80016a0:	eb43 0501 	adc.w	r5, r3, r1
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	00eb      	lsls	r3, r5, #3
 80016ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b2:	00e2      	lsls	r2, r4, #3
 80016b4:	4614      	mov	r4, r2
 80016b6:	461d      	mov	r5, r3
 80016b8:	4643      	mov	r3, r8
 80016ba:	18e3      	adds	r3, r4, r3
 80016bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016c0:	464b      	mov	r3, r9
 80016c2:	eb45 0303 	adc.w	r3, r5, r3
 80016c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80016ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016e6:	4629      	mov	r1, r5
 80016e8:	008b      	lsls	r3, r1, #2
 80016ea:	4621      	mov	r1, r4
 80016ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016f0:	4621      	mov	r1, r4
 80016f2:	008a      	lsls	r2, r1, #2
 80016f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80016f8:	f7fe fdca 	bl	8000290 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <UART_SetConfig+0x4e4>)
 8001702:	fba3 2302 	umull	r2, r3, r3, r2
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	011c      	lsls	r4, r3, #4
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800170e:	2200      	movs	r2, #0
 8001710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800171c:	4642      	mov	r2, r8
 800171e:	464b      	mov	r3, r9
 8001720:	1891      	adds	r1, r2, r2
 8001722:	61b9      	str	r1, [r7, #24]
 8001724:	415b      	adcs	r3, r3
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172c:	4641      	mov	r1, r8
 800172e:	1851      	adds	r1, r2, r1
 8001730:	6139      	str	r1, [r7, #16]
 8001732:	4649      	mov	r1, r9
 8001734:	414b      	adcs	r3, r1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001744:	4659      	mov	r1, fp
 8001746:	00cb      	lsls	r3, r1, #3
 8001748:	4651      	mov	r1, sl
 800174a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800174e:	4651      	mov	r1, sl
 8001750:	00ca      	lsls	r2, r1, #3
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	4603      	mov	r3, r0
 8001758:	4642      	mov	r2, r8
 800175a:	189b      	adds	r3, r3, r2
 800175c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001760:	464b      	mov	r3, r9
 8001762:	460a      	mov	r2, r1
 8001764:	eb42 0303 	adc.w	r3, r2, r3
 8001768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800176c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001784:	4649      	mov	r1, r9
 8001786:	008b      	lsls	r3, r1, #2
 8001788:	4641      	mov	r1, r8
 800178a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800178e:	4641      	mov	r1, r8
 8001790:	008a      	lsls	r2, r1, #2
 8001792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001796:	f7fe fd7b 	bl	8000290 <__aeabi_uldivmod>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <UART_SetConfig+0x4e4>)
 80017a2:	fba3 2301 	umull	r2, r3, r3, r1
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2264      	movs	r2, #100	@ 0x64
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	1acb      	subs	r3, r1, r3
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	3332      	adds	r3, #50	@ 0x32
 80017b4:	4a33      	ldr	r2, [pc, #204]	@ (8001884 <UART_SetConfig+0x4e4>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c0:	441c      	add	r4, r3
 80017c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017c6:	2200      	movs	r2, #0
 80017c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80017ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80017cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80017d0:	4642      	mov	r2, r8
 80017d2:	464b      	mov	r3, r9
 80017d4:	1891      	adds	r1, r2, r2
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	415b      	adcs	r3, r3
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017e0:	4641      	mov	r1, r8
 80017e2:	1851      	adds	r1, r2, r1
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	4649      	mov	r1, r9
 80017e8:	414b      	adcs	r3, r1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017f8:	4659      	mov	r1, fp
 80017fa:	00cb      	lsls	r3, r1, #3
 80017fc:	4651      	mov	r1, sl
 80017fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001802:	4651      	mov	r1, sl
 8001804:	00ca      	lsls	r2, r1, #3
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	4603      	mov	r3, r0
 800180c:	4642      	mov	r2, r8
 800180e:	189b      	adds	r3, r3, r2
 8001810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001812:	464b      	mov	r3, r9
 8001814:	460a      	mov	r2, r1
 8001816:	eb42 0303 	adc.w	r3, r2, r3
 800181a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800181c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	663b      	str	r3, [r7, #96]	@ 0x60
 8001826:	667a      	str	r2, [r7, #100]	@ 0x64
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001834:	4649      	mov	r1, r9
 8001836:	008b      	lsls	r3, r1, #2
 8001838:	4641      	mov	r1, r8
 800183a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800183e:	4641      	mov	r1, r8
 8001840:	008a      	lsls	r2, r1, #2
 8001842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001846:	f7fe fd23 	bl	8000290 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <UART_SetConfig+0x4e4>)
 8001850:	fba3 1302 	umull	r1, r3, r3, r2
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	2164      	movs	r1, #100	@ 0x64
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	3332      	adds	r3, #50	@ 0x32
 8001862:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <UART_SetConfig+0x4e4>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	f003 020f 	and.w	r2, r3, #15
 800186e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4422      	add	r2, r4
 8001876:	609a      	str	r2, [r3, #8]
}
 8001878:	bf00      	nop
 800187a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800187e:	46bd      	mov	sp, r7
 8001880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001884:	51eb851f 	.word	0x51eb851f

08001888 <siprintf>:
 8001888:	b40e      	push	{r1, r2, r3}
 800188a:	b500      	push	{lr}
 800188c:	b09c      	sub	sp, #112	@ 0x70
 800188e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001890:	9002      	str	r0, [sp, #8]
 8001892:	9006      	str	r0, [sp, #24]
 8001894:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001898:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <siprintf+0x38>)
 800189a:	9107      	str	r1, [sp, #28]
 800189c:	9104      	str	r1, [sp, #16]
 800189e:	4909      	ldr	r1, [pc, #36]	@ (80018c4 <siprintf+0x3c>)
 80018a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80018a4:	9105      	str	r1, [sp, #20]
 80018a6:	6800      	ldr	r0, [r0, #0]
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	a902      	add	r1, sp, #8
 80018ac:	f000 f98c 	bl	8001bc8 <_svfiprintf_r>
 80018b0:	9b02      	ldr	r3, [sp, #8]
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	b01c      	add	sp, #112	@ 0x70
 80018b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80018bc:	b003      	add	sp, #12
 80018be:	4770      	bx	lr
 80018c0:	2000001c 	.word	0x2000001c
 80018c4:	ffff0208 	.word	0xffff0208

080018c8 <__errno>:
 80018c8:	4b01      	ldr	r3, [pc, #4]	@ (80018d0 <__errno+0x8>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000001c 	.word	0x2000001c

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4d0d      	ldr	r5, [pc, #52]	@ (800190c <__libc_init_array+0x38>)
 80018d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001910 <__libc_init_array+0x3c>)
 80018da:	1b64      	subs	r4, r4, r5
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	2600      	movs	r6, #0
 80018e0:	42a6      	cmp	r6, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	4d0b      	ldr	r5, [pc, #44]	@ (8001914 <__libc_init_array+0x40>)
 80018e6:	4c0c      	ldr	r4, [pc, #48]	@ (8001918 <__libc_init_array+0x44>)
 80018e8:	f000 fc66 	bl	80021b8 <_init>
 80018ec:	1b64      	subs	r4, r4, r5
 80018ee:	10a4      	asrs	r4, r4, #2
 80018f0:	2600      	movs	r6, #0
 80018f2:	42a6      	cmp	r6, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018fc:	4798      	blx	r3
 80018fe:	3601      	adds	r6, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	f855 3b04 	ldr.w	r3, [r5], #4
 8001906:	4798      	blx	r3
 8001908:	3601      	adds	r6, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	08002220 	.word	0x08002220
 8001910:	08002220 	.word	0x08002220
 8001914:	08002220 	.word	0x08002220
 8001918:	08002224 	.word	0x08002224

0800191c <__retarget_lock_acquire_recursive>:
 800191c:	4770      	bx	lr

0800191e <__retarget_lock_release_recursive>:
 800191e:	4770      	bx	lr

08001920 <_free_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4605      	mov	r5, r0
 8001924:	2900      	cmp	r1, #0
 8001926:	d041      	beq.n	80019ac <_free_r+0x8c>
 8001928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800192c:	1f0c      	subs	r4, r1, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	bfb8      	it	lt
 8001932:	18e4      	addlt	r4, r4, r3
 8001934:	f000 f8e0 	bl	8001af8 <__malloc_lock>
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <_free_r+0x90>)
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	b933      	cbnz	r3, 800194c <_free_r+0x2c>
 800193e:	6063      	str	r3, [r4, #4]
 8001940:	6014      	str	r4, [r2, #0]
 8001942:	4628      	mov	r0, r5
 8001944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001948:	f000 b8dc 	b.w	8001b04 <__malloc_unlock>
 800194c:	42a3      	cmp	r3, r4
 800194e:	d908      	bls.n	8001962 <_free_r+0x42>
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	1821      	adds	r1, r4, r0
 8001954:	428b      	cmp	r3, r1
 8001956:	bf01      	itttt	eq
 8001958:	6819      	ldreq	r1, [r3, #0]
 800195a:	685b      	ldreq	r3, [r3, #4]
 800195c:	1809      	addeq	r1, r1, r0
 800195e:	6021      	streq	r1, [r4, #0]
 8001960:	e7ed      	b.n	800193e <_free_r+0x1e>
 8001962:	461a      	mov	r2, r3
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	b10b      	cbz	r3, 800196c <_free_r+0x4c>
 8001968:	42a3      	cmp	r3, r4
 800196a:	d9fa      	bls.n	8001962 <_free_r+0x42>
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	1850      	adds	r0, r2, r1
 8001970:	42a0      	cmp	r0, r4
 8001972:	d10b      	bne.n	800198c <_free_r+0x6c>
 8001974:	6820      	ldr	r0, [r4, #0]
 8001976:	4401      	add	r1, r0
 8001978:	1850      	adds	r0, r2, r1
 800197a:	4283      	cmp	r3, r0
 800197c:	6011      	str	r1, [r2, #0]
 800197e:	d1e0      	bne.n	8001942 <_free_r+0x22>
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	6053      	str	r3, [r2, #4]
 8001986:	4408      	add	r0, r1
 8001988:	6010      	str	r0, [r2, #0]
 800198a:	e7da      	b.n	8001942 <_free_r+0x22>
 800198c:	d902      	bls.n	8001994 <_free_r+0x74>
 800198e:	230c      	movs	r3, #12
 8001990:	602b      	str	r3, [r5, #0]
 8001992:	e7d6      	b.n	8001942 <_free_r+0x22>
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	1821      	adds	r1, r4, r0
 8001998:	428b      	cmp	r3, r1
 800199a:	bf04      	itt	eq
 800199c:	6819      	ldreq	r1, [r3, #0]
 800199e:	685b      	ldreq	r3, [r3, #4]
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	bf04      	itt	eq
 80019a4:	1809      	addeq	r1, r1, r0
 80019a6:	6021      	streq	r1, [r4, #0]
 80019a8:	6054      	str	r4, [r2, #4]
 80019aa:	e7ca      	b.n	8001942 <_free_r+0x22>
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
 80019ae:	bf00      	nop
 80019b0:	2000021c 	.word	0x2000021c

080019b4 <sbrk_aligned>:
 80019b4:	b570      	push	{r4, r5, r6, lr}
 80019b6:	4e0f      	ldr	r6, [pc, #60]	@ (80019f4 <sbrk_aligned+0x40>)
 80019b8:	460c      	mov	r4, r1
 80019ba:	6831      	ldr	r1, [r6, #0]
 80019bc:	4605      	mov	r5, r0
 80019be:	b911      	cbnz	r1, 80019c6 <sbrk_aligned+0x12>
 80019c0:	f000 fba6 	bl	8002110 <_sbrk_r>
 80019c4:	6030      	str	r0, [r6, #0]
 80019c6:	4621      	mov	r1, r4
 80019c8:	4628      	mov	r0, r5
 80019ca:	f000 fba1 	bl	8002110 <_sbrk_r>
 80019ce:	1c43      	adds	r3, r0, #1
 80019d0:	d103      	bne.n	80019da <sbrk_aligned+0x26>
 80019d2:	f04f 34ff 	mov.w	r4, #4294967295
 80019d6:	4620      	mov	r0, r4
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
 80019da:	1cc4      	adds	r4, r0, #3
 80019dc:	f024 0403 	bic.w	r4, r4, #3
 80019e0:	42a0      	cmp	r0, r4
 80019e2:	d0f8      	beq.n	80019d6 <sbrk_aligned+0x22>
 80019e4:	1a21      	subs	r1, r4, r0
 80019e6:	4628      	mov	r0, r5
 80019e8:	f000 fb92 	bl	8002110 <_sbrk_r>
 80019ec:	3001      	adds	r0, #1
 80019ee:	d1f2      	bne.n	80019d6 <sbrk_aligned+0x22>
 80019f0:	e7ef      	b.n	80019d2 <sbrk_aligned+0x1e>
 80019f2:	bf00      	nop
 80019f4:	20000218 	.word	0x20000218

080019f8 <_malloc_r>:
 80019f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019fc:	1ccd      	adds	r5, r1, #3
 80019fe:	f025 0503 	bic.w	r5, r5, #3
 8001a02:	3508      	adds	r5, #8
 8001a04:	2d0c      	cmp	r5, #12
 8001a06:	bf38      	it	cc
 8001a08:	250c      	movcc	r5, #12
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	4606      	mov	r6, r0
 8001a0e:	db01      	blt.n	8001a14 <_malloc_r+0x1c>
 8001a10:	42a9      	cmp	r1, r5
 8001a12:	d904      	bls.n	8001a1e <_malloc_r+0x26>
 8001a14:	230c      	movs	r3, #12
 8001a16:	6033      	str	r3, [r6, #0]
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001af4 <_malloc_r+0xfc>
 8001a22:	f000 f869 	bl	8001af8 <__malloc_lock>
 8001a26:	f8d8 3000 	ldr.w	r3, [r8]
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	bb44      	cbnz	r4, 8001a80 <_malloc_r+0x88>
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4630      	mov	r0, r6
 8001a32:	f7ff ffbf 	bl	80019b4 <sbrk_aligned>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	4604      	mov	r4, r0
 8001a3a:	d158      	bne.n	8001aee <_malloc_r+0xf6>
 8001a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8001a40:	4627      	mov	r7, r4
 8001a42:	2f00      	cmp	r7, #0
 8001a44:	d143      	bne.n	8001ace <_malloc_r+0xd6>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d04b      	beq.n	8001ae2 <_malloc_r+0xea>
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	4630      	mov	r0, r6
 8001a50:	eb04 0903 	add.w	r9, r4, r3
 8001a54:	f000 fb5c 	bl	8002110 <_sbrk_r>
 8001a58:	4581      	cmp	r9, r0
 8001a5a:	d142      	bne.n	8001ae2 <_malloc_r+0xea>
 8001a5c:	6821      	ldr	r1, [r4, #0]
 8001a5e:	1a6d      	subs	r5, r5, r1
 8001a60:	4629      	mov	r1, r5
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff ffa6 	bl	80019b4 <sbrk_aligned>
 8001a68:	3001      	adds	r0, #1
 8001a6a:	d03a      	beq.n	8001ae2 <_malloc_r+0xea>
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	442b      	add	r3, r5
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	f8d8 3000 	ldr.w	r3, [r8]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	bb62      	cbnz	r2, 8001ad4 <_malloc_r+0xdc>
 8001a7a:	f8c8 7000 	str.w	r7, [r8]
 8001a7e:	e00f      	b.n	8001aa0 <_malloc_r+0xa8>
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	1b52      	subs	r2, r2, r5
 8001a84:	d420      	bmi.n	8001ac8 <_malloc_r+0xd0>
 8001a86:	2a0b      	cmp	r2, #11
 8001a88:	d917      	bls.n	8001aba <_malloc_r+0xc2>
 8001a8a:	1961      	adds	r1, r4, r5
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	6025      	str	r5, [r4, #0]
 8001a90:	bf18      	it	ne
 8001a92:	6059      	strne	r1, [r3, #4]
 8001a94:	6863      	ldr	r3, [r4, #4]
 8001a96:	bf08      	it	eq
 8001a98:	f8c8 1000 	streq.w	r1, [r8]
 8001a9c:	5162      	str	r2, [r4, r5]
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f000 f82f 	bl	8001b04 <__malloc_unlock>
 8001aa6:	f104 000b 	add.w	r0, r4, #11
 8001aaa:	1d23      	adds	r3, r4, #4
 8001aac:	f020 0007 	bic.w	r0, r0, #7
 8001ab0:	1ac2      	subs	r2, r0, r3
 8001ab2:	bf1c      	itt	ne
 8001ab4:	1a1b      	subne	r3, r3, r0
 8001ab6:	50a3      	strne	r3, [r4, r2]
 8001ab8:	e7af      	b.n	8001a1a <_malloc_r+0x22>
 8001aba:	6862      	ldr	r2, [r4, #4]
 8001abc:	42a3      	cmp	r3, r4
 8001abe:	bf0c      	ite	eq
 8001ac0:	f8c8 2000 	streq.w	r2, [r8]
 8001ac4:	605a      	strne	r2, [r3, #4]
 8001ac6:	e7eb      	b.n	8001aa0 <_malloc_r+0xa8>
 8001ac8:	4623      	mov	r3, r4
 8001aca:	6864      	ldr	r4, [r4, #4]
 8001acc:	e7ae      	b.n	8001a2c <_malloc_r+0x34>
 8001ace:	463c      	mov	r4, r7
 8001ad0:	687f      	ldr	r7, [r7, #4]
 8001ad2:	e7b6      	b.n	8001a42 <_malloc_r+0x4a>
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	d1fb      	bne.n	8001ad4 <_malloc_r+0xdc>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6053      	str	r3, [r2, #4]
 8001ae0:	e7de      	b.n	8001aa0 <_malloc_r+0xa8>
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	6033      	str	r3, [r6, #0]
 8001ae6:	4630      	mov	r0, r6
 8001ae8:	f000 f80c 	bl	8001b04 <__malloc_unlock>
 8001aec:	e794      	b.n	8001a18 <_malloc_r+0x20>
 8001aee:	6005      	str	r5, [r0, #0]
 8001af0:	e7d6      	b.n	8001aa0 <_malloc_r+0xa8>
 8001af2:	bf00      	nop
 8001af4:	2000021c 	.word	0x2000021c

08001af8 <__malloc_lock>:
 8001af8:	4801      	ldr	r0, [pc, #4]	@ (8001b00 <__malloc_lock+0x8>)
 8001afa:	f7ff bf0f 	b.w	800191c <__retarget_lock_acquire_recursive>
 8001afe:	bf00      	nop
 8001b00:	20000214 	.word	0x20000214

08001b04 <__malloc_unlock>:
 8001b04:	4801      	ldr	r0, [pc, #4]	@ (8001b0c <__malloc_unlock+0x8>)
 8001b06:	f7ff bf0a 	b.w	800191e <__retarget_lock_release_recursive>
 8001b0a:	bf00      	nop
 8001b0c:	20000214 	.word	0x20000214

08001b10 <__ssputs_r>:
 8001b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b14:	688e      	ldr	r6, [r1, #8]
 8001b16:	461f      	mov	r7, r3
 8001b18:	42be      	cmp	r6, r7
 8001b1a:	680b      	ldr	r3, [r1, #0]
 8001b1c:	4682      	mov	sl, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4690      	mov	r8, r2
 8001b22:	d82d      	bhi.n	8001b80 <__ssputs_r+0x70>
 8001b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001b2c:	d026      	beq.n	8001b7c <__ssputs_r+0x6c>
 8001b2e:	6965      	ldr	r5, [r4, #20]
 8001b30:	6909      	ldr	r1, [r1, #16]
 8001b32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b36:	eba3 0901 	sub.w	r9, r3, r1
 8001b3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b3e:	1c7b      	adds	r3, r7, #1
 8001b40:	444b      	add	r3, r9
 8001b42:	106d      	asrs	r5, r5, #1
 8001b44:	429d      	cmp	r5, r3
 8001b46:	bf38      	it	cc
 8001b48:	461d      	movcc	r5, r3
 8001b4a:	0553      	lsls	r3, r2, #21
 8001b4c:	d527      	bpl.n	8001b9e <__ssputs_r+0x8e>
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7ff ff52 	bl	80019f8 <_malloc_r>
 8001b54:	4606      	mov	r6, r0
 8001b56:	b360      	cbz	r0, 8001bb2 <__ssputs_r+0xa2>
 8001b58:	6921      	ldr	r1, [r4, #16]
 8001b5a:	464a      	mov	r2, r9
 8001b5c:	f000 fae8 	bl	8002130 <memcpy>
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	6126      	str	r6, [r4, #16]
 8001b6e:	6165      	str	r5, [r4, #20]
 8001b70:	444e      	add	r6, r9
 8001b72:	eba5 0509 	sub.w	r5, r5, r9
 8001b76:	6026      	str	r6, [r4, #0]
 8001b78:	60a5      	str	r5, [r4, #8]
 8001b7a:	463e      	mov	r6, r7
 8001b7c:	42be      	cmp	r6, r7
 8001b7e:	d900      	bls.n	8001b82 <__ssputs_r+0x72>
 8001b80:	463e      	mov	r6, r7
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	4632      	mov	r2, r6
 8001b86:	4641      	mov	r1, r8
 8001b88:	f000 faa8 	bl	80020dc <memmove>
 8001b8c:	68a3      	ldr	r3, [r4, #8]
 8001b8e:	1b9b      	subs	r3, r3, r6
 8001b90:	60a3      	str	r3, [r4, #8]
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	4433      	add	r3, r6
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	2000      	movs	r0, #0
 8001b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b9e:	462a      	mov	r2, r5
 8001ba0:	f000 fad4 	bl	800214c <_realloc_r>
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d1e0      	bne.n	8001b6c <__ssputs_r+0x5c>
 8001baa:	6921      	ldr	r1, [r4, #16]
 8001bac:	4650      	mov	r0, sl
 8001bae:	f7ff feb7 	bl	8001920 <_free_r>
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	f8ca 3000 	str.w	r3, [sl]
 8001bb8:	89a3      	ldrh	r3, [r4, #12]
 8001bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bbe:	81a3      	strh	r3, [r4, #12]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	e7e9      	b.n	8001b9a <__ssputs_r+0x8a>
	...

08001bc8 <_svfiprintf_r>:
 8001bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bcc:	4698      	mov	r8, r3
 8001bce:	898b      	ldrh	r3, [r1, #12]
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	b09d      	sub	sp, #116	@ 0x74
 8001bd4:	4607      	mov	r7, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	d510      	bpl.n	8001bfe <_svfiprintf_r+0x36>
 8001bdc:	690b      	ldr	r3, [r1, #16]
 8001bde:	b973      	cbnz	r3, 8001bfe <_svfiprintf_r+0x36>
 8001be0:	2140      	movs	r1, #64	@ 0x40
 8001be2:	f7ff ff09 	bl	80019f8 <_malloc_r>
 8001be6:	6028      	str	r0, [r5, #0]
 8001be8:	6128      	str	r0, [r5, #16]
 8001bea:	b930      	cbnz	r0, 8001bfa <_svfiprintf_r+0x32>
 8001bec:	230c      	movs	r3, #12
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	b01d      	add	sp, #116	@ 0x74
 8001bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bfa:	2340      	movs	r3, #64	@ 0x40
 8001bfc:	616b      	str	r3, [r5, #20]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c02:	2320      	movs	r3, #32
 8001c04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c0c:	2330      	movs	r3, #48	@ 0x30
 8001c0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001dac <_svfiprintf_r+0x1e4>
 8001c12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c16:	f04f 0901 	mov.w	r9, #1
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	469a      	mov	sl, r3
 8001c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c22:	b10a      	cbz	r2, 8001c28 <_svfiprintf_r+0x60>
 8001c24:	2a25      	cmp	r2, #37	@ 0x25
 8001c26:	d1f9      	bne.n	8001c1c <_svfiprintf_r+0x54>
 8001c28:	ebba 0b04 	subs.w	fp, sl, r4
 8001c2c:	d00b      	beq.n	8001c46 <_svfiprintf_r+0x7e>
 8001c2e:	465b      	mov	r3, fp
 8001c30:	4622      	mov	r2, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	4638      	mov	r0, r7
 8001c36:	f7ff ff6b 	bl	8001b10 <__ssputs_r>
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	f000 80a7 	beq.w	8001d8e <_svfiprintf_r+0x1c6>
 8001c40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c42:	445a      	add	r2, fp
 8001c44:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c46:	f89a 3000 	ldrb.w	r3, [sl]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 809f 	beq.w	8001d8e <_svfiprintf_r+0x1c6>
 8001c50:	2300      	movs	r3, #0
 8001c52:	f04f 32ff 	mov.w	r2, #4294967295
 8001c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c5a:	f10a 0a01 	add.w	sl, sl, #1
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	9307      	str	r3, [sp, #28]
 8001c62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c66:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c68:	4654      	mov	r4, sl
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c70:	484e      	ldr	r0, [pc, #312]	@ (8001dac <_svfiprintf_r+0x1e4>)
 8001c72:	f7fe fabd 	bl	80001f0 <memchr>
 8001c76:	9a04      	ldr	r2, [sp, #16]
 8001c78:	b9d8      	cbnz	r0, 8001cb2 <_svfiprintf_r+0xea>
 8001c7a:	06d0      	lsls	r0, r2, #27
 8001c7c:	bf44      	itt	mi
 8001c7e:	2320      	movmi	r3, #32
 8001c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c84:	0711      	lsls	r1, r2, #28
 8001c86:	bf44      	itt	mi
 8001c88:	232b      	movmi	r3, #43	@ 0x2b
 8001c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8001c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c94:	d015      	beq.n	8001cc2 <_svfiprintf_r+0xfa>
 8001c96:	9a07      	ldr	r2, [sp, #28]
 8001c98:	4654      	mov	r4, sl
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f04f 0c0a 	mov.w	ip, #10
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca6:	3b30      	subs	r3, #48	@ 0x30
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	d94b      	bls.n	8001d44 <_svfiprintf_r+0x17c>
 8001cac:	b1b0      	cbz	r0, 8001cdc <_svfiprintf_r+0x114>
 8001cae:	9207      	str	r2, [sp, #28]
 8001cb0:	e014      	b.n	8001cdc <_svfiprintf_r+0x114>
 8001cb2:	eba0 0308 	sub.w	r3, r0, r8
 8001cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	46a2      	mov	sl, r4
 8001cc0:	e7d2      	b.n	8001c68 <_svfiprintf_r+0xa0>
 8001cc2:	9b03      	ldr	r3, [sp, #12]
 8001cc4:	1d19      	adds	r1, r3, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	9103      	str	r1, [sp, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bfbb      	ittet	lt
 8001cce:	425b      	neglt	r3, r3
 8001cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8001cd4:	9307      	strge	r3, [sp, #28]
 8001cd6:	9307      	strlt	r3, [sp, #28]
 8001cd8:	bfb8      	it	lt
 8001cda:	9204      	strlt	r2, [sp, #16]
 8001cdc:	7823      	ldrb	r3, [r4, #0]
 8001cde:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ce0:	d10a      	bne.n	8001cf8 <_svfiprintf_r+0x130>
 8001ce2:	7863      	ldrb	r3, [r4, #1]
 8001ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ce6:	d132      	bne.n	8001d4e <_svfiprintf_r+0x186>
 8001ce8:	9b03      	ldr	r3, [sp, #12]
 8001cea:	1d1a      	adds	r2, r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	9203      	str	r2, [sp, #12]
 8001cf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001cf4:	3402      	adds	r4, #2
 8001cf6:	9305      	str	r3, [sp, #20]
 8001cf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001dbc <_svfiprintf_r+0x1f4>
 8001cfc:	7821      	ldrb	r1, [r4, #0]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4650      	mov	r0, sl
 8001d02:	f7fe fa75 	bl	80001f0 <memchr>
 8001d06:	b138      	cbz	r0, 8001d18 <_svfiprintf_r+0x150>
 8001d08:	9b04      	ldr	r3, [sp, #16]
 8001d0a:	eba0 000a 	sub.w	r0, r0, sl
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	4082      	lsls	r2, r0
 8001d12:	4313      	orrs	r3, r2
 8001d14:	3401      	adds	r4, #1
 8001d16:	9304      	str	r3, [sp, #16]
 8001d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d1c:	4824      	ldr	r0, [pc, #144]	@ (8001db0 <_svfiprintf_r+0x1e8>)
 8001d1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d22:	2206      	movs	r2, #6
 8001d24:	f7fe fa64 	bl	80001f0 <memchr>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d036      	beq.n	8001d9a <_svfiprintf_r+0x1d2>
 8001d2c:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <_svfiprintf_r+0x1ec>)
 8001d2e:	bb1b      	cbnz	r3, 8001d78 <_svfiprintf_r+0x1b0>
 8001d30:	9b03      	ldr	r3, [sp, #12]
 8001d32:	3307      	adds	r3, #7
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	3308      	adds	r3, #8
 8001d3a:	9303      	str	r3, [sp, #12]
 8001d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d3e:	4433      	add	r3, r6
 8001d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d42:	e76a      	b.n	8001c1a <_svfiprintf_r+0x52>
 8001d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d48:	460c      	mov	r4, r1
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e7a8      	b.n	8001ca0 <_svfiprintf_r+0xd8>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	3401      	adds	r4, #1
 8001d52:	9305      	str	r3, [sp, #20]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 0c0a 	mov.w	ip, #10
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d60:	3a30      	subs	r2, #48	@ 0x30
 8001d62:	2a09      	cmp	r2, #9
 8001d64:	d903      	bls.n	8001d6e <_svfiprintf_r+0x1a6>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0c6      	beq.n	8001cf8 <_svfiprintf_r+0x130>
 8001d6a:	9105      	str	r1, [sp, #20]
 8001d6c:	e7c4      	b.n	8001cf8 <_svfiprintf_r+0x130>
 8001d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d72:	4604      	mov	r4, r0
 8001d74:	2301      	movs	r3, #1
 8001d76:	e7f0      	b.n	8001d5a <_svfiprintf_r+0x192>
 8001d78:	ab03      	add	r3, sp, #12
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	462a      	mov	r2, r5
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <_svfiprintf_r+0x1f0>)
 8001d80:	a904      	add	r1, sp, #16
 8001d82:	4638      	mov	r0, r7
 8001d84:	f3af 8000 	nop.w
 8001d88:	1c42      	adds	r2, r0, #1
 8001d8a:	4606      	mov	r6, r0
 8001d8c:	d1d6      	bne.n	8001d3c <_svfiprintf_r+0x174>
 8001d8e:	89ab      	ldrh	r3, [r5, #12]
 8001d90:	065b      	lsls	r3, r3, #25
 8001d92:	f53f af2d 	bmi.w	8001bf0 <_svfiprintf_r+0x28>
 8001d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d98:	e72c      	b.n	8001bf4 <_svfiprintf_r+0x2c>
 8001d9a:	ab03      	add	r3, sp, #12
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	462a      	mov	r2, r5
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <_svfiprintf_r+0x1f0>)
 8001da2:	a904      	add	r1, sp, #16
 8001da4:	4638      	mov	r0, r7
 8001da6:	f000 f879 	bl	8001e9c <_printf_i>
 8001daa:	e7ed      	b.n	8001d88 <_svfiprintf_r+0x1c0>
 8001dac:	080021e4 	.word	0x080021e4
 8001db0:	080021ee 	.word	0x080021ee
 8001db4:	00000000 	.word	0x00000000
 8001db8:	08001b11 	.word	0x08001b11
 8001dbc:	080021ea 	.word	0x080021ea

08001dc0 <_printf_common>:
 8001dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dc4:	4616      	mov	r6, r2
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	688a      	ldr	r2, [r1, #8]
 8001dca:	690b      	ldr	r3, [r1, #16]
 8001dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bfb8      	it	lt
 8001dd4:	4613      	movlt	r3, r2
 8001dd6:	6033      	str	r3, [r6, #0]
 8001dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ddc:	4607      	mov	r7, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	b10a      	cbz	r2, 8001de6 <_printf_common+0x26>
 8001de2:	3301      	adds	r3, #1
 8001de4:	6033      	str	r3, [r6, #0]
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	0699      	lsls	r1, r3, #26
 8001dea:	bf42      	ittt	mi
 8001dec:	6833      	ldrmi	r3, [r6, #0]
 8001dee:	3302      	addmi	r3, #2
 8001df0:	6033      	strmi	r3, [r6, #0]
 8001df2:	6825      	ldr	r5, [r4, #0]
 8001df4:	f015 0506 	ands.w	r5, r5, #6
 8001df8:	d106      	bne.n	8001e08 <_printf_common+0x48>
 8001dfa:	f104 0a19 	add.w	sl, r4, #25
 8001dfe:	68e3      	ldr	r3, [r4, #12]
 8001e00:	6832      	ldr	r2, [r6, #0]
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	42ab      	cmp	r3, r5
 8001e06:	dc26      	bgt.n	8001e56 <_printf_common+0x96>
 8001e08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	3b00      	subs	r3, #0
 8001e10:	bf18      	it	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	0692      	lsls	r2, r2, #26
 8001e16:	d42b      	bmi.n	8001e70 <_printf_common+0xb0>
 8001e18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	4638      	mov	r0, r7
 8001e20:	47c8      	blx	r9
 8001e22:	3001      	adds	r0, #1
 8001e24:	d01e      	beq.n	8001e64 <_printf_common+0xa4>
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	6922      	ldr	r2, [r4, #16]
 8001e2a:	f003 0306 	and.w	r3, r3, #6
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf02      	ittt	eq
 8001e32:	68e5      	ldreq	r5, [r4, #12]
 8001e34:	6833      	ldreq	r3, [r6, #0]
 8001e36:	1aed      	subeq	r5, r5, r3
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	bf0c      	ite	eq
 8001e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e40:	2500      	movne	r5, #0
 8001e42:	4293      	cmp	r3, r2
 8001e44:	bfc4      	itt	gt
 8001e46:	1a9b      	subgt	r3, r3, r2
 8001e48:	18ed      	addgt	r5, r5, r3
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	341a      	adds	r4, #26
 8001e4e:	42b5      	cmp	r5, r6
 8001e50:	d11a      	bne.n	8001e88 <_printf_common+0xc8>
 8001e52:	2000      	movs	r0, #0
 8001e54:	e008      	b.n	8001e68 <_printf_common+0xa8>
 8001e56:	2301      	movs	r3, #1
 8001e58:	4652      	mov	r2, sl
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	47c8      	blx	r9
 8001e60:	3001      	adds	r0, #1
 8001e62:	d103      	bne.n	8001e6c <_printf_common+0xac>
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e6c:	3501      	adds	r5, #1
 8001e6e:	e7c6      	b.n	8001dfe <_printf_common+0x3e>
 8001e70:	18e1      	adds	r1, r4, r3
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	2030      	movs	r0, #48	@ 0x30
 8001e76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e7a:	4422      	add	r2, r4
 8001e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e84:	3302      	adds	r3, #2
 8001e86:	e7c7      	b.n	8001e18 <_printf_common+0x58>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	4638      	mov	r0, r7
 8001e90:	47c8      	blx	r9
 8001e92:	3001      	adds	r0, #1
 8001e94:	d0e6      	beq.n	8001e64 <_printf_common+0xa4>
 8001e96:	3601      	adds	r6, #1
 8001e98:	e7d9      	b.n	8001e4e <_printf_common+0x8e>
	...

08001e9c <_printf_i>:
 8001e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea0:	7e0f      	ldrb	r7, [r1, #24]
 8001ea2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ea4:	2f78      	cmp	r7, #120	@ 0x78
 8001ea6:	4691      	mov	r9, r2
 8001ea8:	4680      	mov	r8, r0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	469a      	mov	sl, r3
 8001eae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001eb2:	d807      	bhi.n	8001ec4 <_printf_i+0x28>
 8001eb4:	2f62      	cmp	r7, #98	@ 0x62
 8001eb6:	d80a      	bhi.n	8001ece <_printf_i+0x32>
 8001eb8:	2f00      	cmp	r7, #0
 8001eba:	f000 80d2 	beq.w	8002062 <_printf_i+0x1c6>
 8001ebe:	2f58      	cmp	r7, #88	@ 0x58
 8001ec0:	f000 80b9 	beq.w	8002036 <_printf_i+0x19a>
 8001ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ec8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ecc:	e03a      	b.n	8001f44 <_printf_i+0xa8>
 8001ece:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ed2:	2b15      	cmp	r3, #21
 8001ed4:	d8f6      	bhi.n	8001ec4 <_printf_i+0x28>
 8001ed6:	a101      	add	r1, pc, #4	@ (adr r1, 8001edc <_printf_i+0x40>)
 8001ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001edc:	08001f35 	.word	0x08001f35
 8001ee0:	08001f49 	.word	0x08001f49
 8001ee4:	08001ec5 	.word	0x08001ec5
 8001ee8:	08001ec5 	.word	0x08001ec5
 8001eec:	08001ec5 	.word	0x08001ec5
 8001ef0:	08001ec5 	.word	0x08001ec5
 8001ef4:	08001f49 	.word	0x08001f49
 8001ef8:	08001ec5 	.word	0x08001ec5
 8001efc:	08001ec5 	.word	0x08001ec5
 8001f00:	08001ec5 	.word	0x08001ec5
 8001f04:	08001ec5 	.word	0x08001ec5
 8001f08:	08002049 	.word	0x08002049
 8001f0c:	08001f73 	.word	0x08001f73
 8001f10:	08002003 	.word	0x08002003
 8001f14:	08001ec5 	.word	0x08001ec5
 8001f18:	08001ec5 	.word	0x08001ec5
 8001f1c:	0800206b 	.word	0x0800206b
 8001f20:	08001ec5 	.word	0x08001ec5
 8001f24:	08001f73 	.word	0x08001f73
 8001f28:	08001ec5 	.word	0x08001ec5
 8001f2c:	08001ec5 	.word	0x08001ec5
 8001f30:	0800200b 	.word	0x0800200b
 8001f34:	6833      	ldr	r3, [r6, #0]
 8001f36:	1d1a      	adds	r2, r3, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6032      	str	r2, [r6, #0]
 8001f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f44:	2301      	movs	r3, #1
 8001f46:	e09d      	b.n	8002084 <_printf_i+0x1e8>
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	1d19      	adds	r1, r3, #4
 8001f4e:	6031      	str	r1, [r6, #0]
 8001f50:	0606      	lsls	r6, r0, #24
 8001f52:	d501      	bpl.n	8001f58 <_printf_i+0xbc>
 8001f54:	681d      	ldr	r5, [r3, #0]
 8001f56:	e003      	b.n	8001f60 <_printf_i+0xc4>
 8001f58:	0645      	lsls	r5, r0, #25
 8001f5a:	d5fb      	bpl.n	8001f54 <_printf_i+0xb8>
 8001f5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	da03      	bge.n	8001f6c <_printf_i+0xd0>
 8001f64:	232d      	movs	r3, #45	@ 0x2d
 8001f66:	426d      	negs	r5, r5
 8001f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f6c:	4859      	ldr	r0, [pc, #356]	@ (80020d4 <_printf_i+0x238>)
 8001f6e:	230a      	movs	r3, #10
 8001f70:	e011      	b.n	8001f96 <_printf_i+0xfa>
 8001f72:	6821      	ldr	r1, [r4, #0]
 8001f74:	6833      	ldr	r3, [r6, #0]
 8001f76:	0608      	lsls	r0, r1, #24
 8001f78:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f7c:	d402      	bmi.n	8001f84 <_printf_i+0xe8>
 8001f7e:	0649      	lsls	r1, r1, #25
 8001f80:	bf48      	it	mi
 8001f82:	b2ad      	uxthmi	r5, r5
 8001f84:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f86:	4853      	ldr	r0, [pc, #332]	@ (80020d4 <_printf_i+0x238>)
 8001f88:	6033      	str	r3, [r6, #0]
 8001f8a:	bf14      	ite	ne
 8001f8c:	230a      	movne	r3, #10
 8001f8e:	2308      	moveq	r3, #8
 8001f90:	2100      	movs	r1, #0
 8001f92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f96:	6866      	ldr	r6, [r4, #4]
 8001f98:	60a6      	str	r6, [r4, #8]
 8001f9a:	2e00      	cmp	r6, #0
 8001f9c:	bfa2      	ittt	ge
 8001f9e:	6821      	ldrge	r1, [r4, #0]
 8001fa0:	f021 0104 	bicge.w	r1, r1, #4
 8001fa4:	6021      	strge	r1, [r4, #0]
 8001fa6:	b90d      	cbnz	r5, 8001fac <_printf_i+0x110>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d04b      	beq.n	8002044 <_printf_i+0x1a8>
 8001fac:	4616      	mov	r6, r2
 8001fae:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fb2:	fb03 5711 	mls	r7, r3, r1, r5
 8001fb6:	5dc7      	ldrb	r7, [r0, r7]
 8001fb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fbc:	462f      	mov	r7, r5
 8001fbe:	42bb      	cmp	r3, r7
 8001fc0:	460d      	mov	r5, r1
 8001fc2:	d9f4      	bls.n	8001fae <_printf_i+0x112>
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d10b      	bne.n	8001fe0 <_printf_i+0x144>
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	07df      	lsls	r7, r3, #31
 8001fcc:	d508      	bpl.n	8001fe0 <_printf_i+0x144>
 8001fce:	6923      	ldr	r3, [r4, #16]
 8001fd0:	6861      	ldr	r1, [r4, #4]
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	bfde      	ittt	le
 8001fd6:	2330      	movle	r3, #48	@ 0x30
 8001fd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001fe0:	1b92      	subs	r2, r2, r6
 8001fe2:	6122      	str	r2, [r4, #16]
 8001fe4:	f8cd a000 	str.w	sl, [sp]
 8001fe8:	464b      	mov	r3, r9
 8001fea:	aa03      	add	r2, sp, #12
 8001fec:	4621      	mov	r1, r4
 8001fee:	4640      	mov	r0, r8
 8001ff0:	f7ff fee6 	bl	8001dc0 <_printf_common>
 8001ff4:	3001      	adds	r0, #1
 8001ff6:	d14a      	bne.n	800208e <_printf_i+0x1f2>
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	b004      	add	sp, #16
 8001ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6023      	str	r3, [r4, #0]
 800200a:	4833      	ldr	r0, [pc, #204]	@ (80020d8 <_printf_i+0x23c>)
 800200c:	2778      	movs	r7, #120	@ 0x78
 800200e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	6831      	ldr	r1, [r6, #0]
 8002016:	061f      	lsls	r7, r3, #24
 8002018:	f851 5b04 	ldr.w	r5, [r1], #4
 800201c:	d402      	bmi.n	8002024 <_printf_i+0x188>
 800201e:	065f      	lsls	r7, r3, #25
 8002020:	bf48      	it	mi
 8002022:	b2ad      	uxthmi	r5, r5
 8002024:	6031      	str	r1, [r6, #0]
 8002026:	07d9      	lsls	r1, r3, #31
 8002028:	bf44      	itt	mi
 800202a:	f043 0320 	orrmi.w	r3, r3, #32
 800202e:	6023      	strmi	r3, [r4, #0]
 8002030:	b11d      	cbz	r5, 800203a <_printf_i+0x19e>
 8002032:	2310      	movs	r3, #16
 8002034:	e7ac      	b.n	8001f90 <_printf_i+0xf4>
 8002036:	4827      	ldr	r0, [pc, #156]	@ (80020d4 <_printf_i+0x238>)
 8002038:	e7e9      	b.n	800200e <_printf_i+0x172>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	f023 0320 	bic.w	r3, r3, #32
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	e7f6      	b.n	8002032 <_printf_i+0x196>
 8002044:	4616      	mov	r6, r2
 8002046:	e7bd      	b.n	8001fc4 <_printf_i+0x128>
 8002048:	6833      	ldr	r3, [r6, #0]
 800204a:	6825      	ldr	r5, [r4, #0]
 800204c:	6961      	ldr	r1, [r4, #20]
 800204e:	1d18      	adds	r0, r3, #4
 8002050:	6030      	str	r0, [r6, #0]
 8002052:	062e      	lsls	r6, r5, #24
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	d501      	bpl.n	800205c <_printf_i+0x1c0>
 8002058:	6019      	str	r1, [r3, #0]
 800205a:	e002      	b.n	8002062 <_printf_i+0x1c6>
 800205c:	0668      	lsls	r0, r5, #25
 800205e:	d5fb      	bpl.n	8002058 <_printf_i+0x1bc>
 8002060:	8019      	strh	r1, [r3, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	6123      	str	r3, [r4, #16]
 8002066:	4616      	mov	r6, r2
 8002068:	e7bc      	b.n	8001fe4 <_printf_i+0x148>
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	1d1a      	adds	r2, r3, #4
 800206e:	6032      	str	r2, [r6, #0]
 8002070:	681e      	ldr	r6, [r3, #0]
 8002072:	6862      	ldr	r2, [r4, #4]
 8002074:	2100      	movs	r1, #0
 8002076:	4630      	mov	r0, r6
 8002078:	f7fe f8ba 	bl	80001f0 <memchr>
 800207c:	b108      	cbz	r0, 8002082 <_printf_i+0x1e6>
 800207e:	1b80      	subs	r0, r0, r6
 8002080:	6060      	str	r0, [r4, #4]
 8002082:	6863      	ldr	r3, [r4, #4]
 8002084:	6123      	str	r3, [r4, #16]
 8002086:	2300      	movs	r3, #0
 8002088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800208c:	e7aa      	b.n	8001fe4 <_printf_i+0x148>
 800208e:	6923      	ldr	r3, [r4, #16]
 8002090:	4632      	mov	r2, r6
 8002092:	4649      	mov	r1, r9
 8002094:	4640      	mov	r0, r8
 8002096:	47d0      	blx	sl
 8002098:	3001      	adds	r0, #1
 800209a:	d0ad      	beq.n	8001ff8 <_printf_i+0x15c>
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	079b      	lsls	r3, r3, #30
 80020a0:	d413      	bmi.n	80020ca <_printf_i+0x22e>
 80020a2:	68e0      	ldr	r0, [r4, #12]
 80020a4:	9b03      	ldr	r3, [sp, #12]
 80020a6:	4298      	cmp	r0, r3
 80020a8:	bfb8      	it	lt
 80020aa:	4618      	movlt	r0, r3
 80020ac:	e7a6      	b.n	8001ffc <_printf_i+0x160>
 80020ae:	2301      	movs	r3, #1
 80020b0:	4632      	mov	r2, r6
 80020b2:	4649      	mov	r1, r9
 80020b4:	4640      	mov	r0, r8
 80020b6:	47d0      	blx	sl
 80020b8:	3001      	adds	r0, #1
 80020ba:	d09d      	beq.n	8001ff8 <_printf_i+0x15c>
 80020bc:	3501      	adds	r5, #1
 80020be:	68e3      	ldr	r3, [r4, #12]
 80020c0:	9903      	ldr	r1, [sp, #12]
 80020c2:	1a5b      	subs	r3, r3, r1
 80020c4:	42ab      	cmp	r3, r5
 80020c6:	dcf2      	bgt.n	80020ae <_printf_i+0x212>
 80020c8:	e7eb      	b.n	80020a2 <_printf_i+0x206>
 80020ca:	2500      	movs	r5, #0
 80020cc:	f104 0619 	add.w	r6, r4, #25
 80020d0:	e7f5      	b.n	80020be <_printf_i+0x222>
 80020d2:	bf00      	nop
 80020d4:	080021f5 	.word	0x080021f5
 80020d8:	08002206 	.word	0x08002206

080020dc <memmove>:
 80020dc:	4288      	cmp	r0, r1
 80020de:	b510      	push	{r4, lr}
 80020e0:	eb01 0402 	add.w	r4, r1, r2
 80020e4:	d902      	bls.n	80020ec <memmove+0x10>
 80020e6:	4284      	cmp	r4, r0
 80020e8:	4623      	mov	r3, r4
 80020ea:	d807      	bhi.n	80020fc <memmove+0x20>
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	42a1      	cmp	r1, r4
 80020f0:	d008      	beq.n	8002104 <memmove+0x28>
 80020f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020fa:	e7f8      	b.n	80020ee <memmove+0x12>
 80020fc:	4402      	add	r2, r0
 80020fe:	4601      	mov	r1, r0
 8002100:	428a      	cmp	r2, r1
 8002102:	d100      	bne.n	8002106 <memmove+0x2a>
 8002104:	bd10      	pop	{r4, pc}
 8002106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800210a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800210e:	e7f7      	b.n	8002100 <memmove+0x24>

08002110 <_sbrk_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4d06      	ldr	r5, [pc, #24]	@ (800212c <_sbrk_r+0x1c>)
 8002114:	2300      	movs	r3, #0
 8002116:	4604      	mov	r4, r0
 8002118:	4608      	mov	r0, r1
 800211a:	602b      	str	r3, [r5, #0]
 800211c:	f7fe fbd0 	bl	80008c0 <_sbrk>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_sbrk_r+0x1a>
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	b103      	cbz	r3, 800212a <_sbrk_r+0x1a>
 8002128:	6023      	str	r3, [r4, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	20000210 	.word	0x20000210

08002130 <memcpy>:
 8002130:	440a      	add	r2, r1
 8002132:	4291      	cmp	r1, r2
 8002134:	f100 33ff 	add.w	r3, r0, #4294967295
 8002138:	d100      	bne.n	800213c <memcpy+0xc>
 800213a:	4770      	bx	lr
 800213c:	b510      	push	{r4, lr}
 800213e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002146:	4291      	cmp	r1, r2
 8002148:	d1f9      	bne.n	800213e <memcpy+0xe>
 800214a:	bd10      	pop	{r4, pc}

0800214c <_realloc_r>:
 800214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002150:	4680      	mov	r8, r0
 8002152:	4615      	mov	r5, r2
 8002154:	460c      	mov	r4, r1
 8002156:	b921      	cbnz	r1, 8002162 <_realloc_r+0x16>
 8002158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800215c:	4611      	mov	r1, r2
 800215e:	f7ff bc4b 	b.w	80019f8 <_malloc_r>
 8002162:	b92a      	cbnz	r2, 8002170 <_realloc_r+0x24>
 8002164:	f7ff fbdc 	bl	8001920 <_free_r>
 8002168:	2400      	movs	r4, #0
 800216a:	4620      	mov	r0, r4
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002170:	f000 f81a 	bl	80021a8 <_malloc_usable_size_r>
 8002174:	4285      	cmp	r5, r0
 8002176:	4606      	mov	r6, r0
 8002178:	d802      	bhi.n	8002180 <_realloc_r+0x34>
 800217a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800217e:	d8f4      	bhi.n	800216a <_realloc_r+0x1e>
 8002180:	4629      	mov	r1, r5
 8002182:	4640      	mov	r0, r8
 8002184:	f7ff fc38 	bl	80019f8 <_malloc_r>
 8002188:	4607      	mov	r7, r0
 800218a:	2800      	cmp	r0, #0
 800218c:	d0ec      	beq.n	8002168 <_realloc_r+0x1c>
 800218e:	42b5      	cmp	r5, r6
 8002190:	462a      	mov	r2, r5
 8002192:	4621      	mov	r1, r4
 8002194:	bf28      	it	cs
 8002196:	4632      	movcs	r2, r6
 8002198:	f7ff ffca 	bl	8002130 <memcpy>
 800219c:	4621      	mov	r1, r4
 800219e:	4640      	mov	r0, r8
 80021a0:	f7ff fbbe 	bl	8001920 <_free_r>
 80021a4:	463c      	mov	r4, r7
 80021a6:	e7e0      	b.n	800216a <_realloc_r+0x1e>

080021a8 <_malloc_usable_size_r>:
 80021a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ac:	1f18      	subs	r0, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfbc      	itt	lt
 80021b2:	580b      	ldrlt	r3, [r1, r0]
 80021b4:	18c0      	addlt	r0, r0, r3
 80021b6:	4770      	bx	lr

080021b8 <_init>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	bf00      	nop
 80021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021be:	bc08      	pop	{r3}
 80021c0:	469e      	mov	lr, r3
 80021c2:	4770      	bx	lr

080021c4 <_fini>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr
