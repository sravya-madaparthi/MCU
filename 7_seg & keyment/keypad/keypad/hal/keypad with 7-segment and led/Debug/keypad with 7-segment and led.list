
keypad with 7-segment and led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bbc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d80  08000d80  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d80  08000d80  00002024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d80  08000d80  00002024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d80  08000d80  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d80  08000d80  00001d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d84  08000d84  00001d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000d88  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08000dac  00002024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000dac  00002044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002da4  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bad  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  000059a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000285  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9d5  00000000  00000000  00005fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000040fc  00000000  00000000  0002598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ae1  00000000  00000000  00029a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c44  00000000  00000000  000eb5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ec1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d68 	.word	0x08000d68

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000d68 	.word	0x08000d68

08000204 <main>:
void MX_GPIO_Init(void);
char scanKeypad(void);
void displayNumber(char key);
void toggleLED(int times);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    HAL_Init();
 800020a:	f000 fa2d 	bl	8000668 <HAL_Init>

    MX_GPIO_Init();
 800020e:	f000 f91f 	bl	8000450 <MX_GPIO_Init>

    while (1) {
        char key = scanKeypad();  // Scan keypad for input
 8000212:	f000 f815 	bl	8000240 <scanKeypad>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
        if (key != 0) {
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f8      	beq.n	8000212 <main+0xe>
            displayNumber(key);    // Display the pressed key on 7-segment
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f890 	bl	8000348 <displayNumber>
            int count = key - '0'; // Convert character to integer
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	3b30      	subs	r3, #48	@ 0x30
 800022c:	603b      	str	r3, [r7, #0]
            toggleLED(count);      // Toggle LED 'count' times
 800022e:	6838      	ldr	r0, [r7, #0]
 8000230:	f000 f8f0 	bl	8000414 <toggleLED>
            HAL_Delay(300);        // Debounce delay
 8000234:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000238:	f000 fa88 	bl	800074c <HAL_Delay>
    while (1) {
 800023c:	e7e9      	b.n	8000212 <main+0xe>
	...

08000240 <scanKeypad>:
        }
    }
}

// Function to scan the keypad
char scanKeypad(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ROW_PORT, ROW1_PIN, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2101      	movs	r1, #1
 800024a:	483d      	ldr	r0, [pc, #244]	@ (8000340 <scanKeypad+0x100>)
 800024c:	f000 fd34 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ROW_PORT, ROW2_PIN, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2102      	movs	r1, #2
 8000254:	483a      	ldr	r0, [pc, #232]	@ (8000340 <scanKeypad+0x100>)
 8000256:	f000 fd2f 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ROW_PORT, ROW3_PIN, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2104      	movs	r1, #4
 800025e:	4838      	ldr	r0, [pc, #224]	@ (8000340 <scanKeypad+0x100>)
 8000260:	f000 fd2a 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ROW_PORT, ROW4_PIN, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2108      	movs	r1, #8
 8000268:	4835      	ldr	r0, [pc, #212]	@ (8000340 <scanKeypad+0x100>)
 800026a:	f000 fd25 	bl	8000cb8 <HAL_GPIO_WritePin>

    for (int row = 0; row < 4; row++) {
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e05d      	b.n	8000330 <scanKeypad+0xf0>
        HAL_GPIO_WritePin(ROW_PORT, ROW1_PIN, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2101      	movs	r1, #1
 8000278:	4831      	ldr	r0, [pc, #196]	@ (8000340 <scanKeypad+0x100>)
 800027a:	f000 fd1d 	bl	8000cb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_PORT, ROW2_PIN, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	2102      	movs	r1, #2
 8000282:	482f      	ldr	r0, [pc, #188]	@ (8000340 <scanKeypad+0x100>)
 8000284:	f000 fd18 	bl	8000cb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_PORT, ROW3_PIN, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2104      	movs	r1, #4
 800028c:	482c      	ldr	r0, [pc, #176]	@ (8000340 <scanKeypad+0x100>)
 800028e:	f000 fd13 	bl	8000cb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ROW_PORT, ROW4_PIN, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2108      	movs	r1, #8
 8000296:	482a      	ldr	r0, [pc, #168]	@ (8000340 <scanKeypad+0x100>)
 8000298:	f000 fd0e 	bl	8000cb8 <HAL_GPIO_WritePin>

        if (row == 0) HAL_GPIO_WritePin(ROW_PORT, ROW1_PIN, GPIO_PIN_RESET);
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d105      	bne.n	80002ae <scanKeypad+0x6e>
 80002a2:	2200      	movs	r2, #0
 80002a4:	2101      	movs	r1, #1
 80002a6:	4826      	ldr	r0, [pc, #152]	@ (8000340 <scanKeypad+0x100>)
 80002a8:	f000 fd06 	bl	8000cb8 <HAL_GPIO_WritePin>
 80002ac:	e016      	b.n	80002dc <scanKeypad+0x9c>
        else if (row == 1) HAL_GPIO_WritePin(ROW_PORT, ROW2_PIN, GPIO_PIN_RESET);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d105      	bne.n	80002c0 <scanKeypad+0x80>
 80002b4:	2200      	movs	r2, #0
 80002b6:	2102      	movs	r1, #2
 80002b8:	4821      	ldr	r0, [pc, #132]	@ (8000340 <scanKeypad+0x100>)
 80002ba:	f000 fcfd 	bl	8000cb8 <HAL_GPIO_WritePin>
 80002be:	e00d      	b.n	80002dc <scanKeypad+0x9c>
        else if (row == 2) HAL_GPIO_WritePin(ROW_PORT, ROW3_PIN, GPIO_PIN_RESET);
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d105      	bne.n	80002d2 <scanKeypad+0x92>
 80002c6:	2200      	movs	r2, #0
 80002c8:	2104      	movs	r1, #4
 80002ca:	481d      	ldr	r0, [pc, #116]	@ (8000340 <scanKeypad+0x100>)
 80002cc:	f000 fcf4 	bl	8000cb8 <HAL_GPIO_WritePin>
 80002d0:	e004      	b.n	80002dc <scanKeypad+0x9c>
        else HAL_GPIO_WritePin(ROW_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2108      	movs	r1, #8
 80002d6:	481a      	ldr	r0, [pc, #104]	@ (8000340 <scanKeypad+0x100>)
 80002d8:	f000 fcee 	bl	8000cb8 <HAL_GPIO_WritePin>

        for (int col = 0; col < 3; col++) {
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e020      	b.n	8000324 <scanKeypad+0xe4>
            uint16_t colPin = (col == 0) ? COL1_PIN : (col == 1) ? COL2_PIN : COL3_PIN;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d006      	beq.n	80002f6 <scanKeypad+0xb6>
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d101      	bne.n	80002f2 <scanKeypad+0xb2>
 80002ee:	2320      	movs	r3, #32
 80002f0:	e002      	b.n	80002f8 <scanKeypad+0xb8>
 80002f2:	2340      	movs	r3, #64	@ 0x40
 80002f4:	e000      	b.n	80002f8 <scanKeypad+0xb8>
 80002f6:	2310      	movs	r3, #16
 80002f8:	80fb      	strh	r3, [r7, #6]
            if (HAL_GPIO_ReadPin(COL_PORT, colPin) == GPIO_PIN_RESET) {
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	4619      	mov	r1, r3
 80002fe:	4810      	ldr	r0, [pc, #64]	@ (8000340 <scanKeypad+0x100>)
 8000300:	f000 fcc2 	bl	8000c88 <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d109      	bne.n	800031e <scanKeypad+0xde>
                return keyMap[row][col];  // Return the key pressed
 800030a:	490e      	ldr	r1, [pc, #56]	@ (8000344 <scanKeypad+0x104>)
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	4613      	mov	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	4413      	add	r3, r2
 8000314:	18ca      	adds	r2, r1, r3
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	e00c      	b.n	8000338 <scanKeypad+0xf8>
        for (int col = 0; col < 3; col++) {
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3301      	adds	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	2b02      	cmp	r3, #2
 8000328:	dddb      	ble.n	80002e2 <scanKeypad+0xa2>
    for (int row = 0; row < 4; row++) {
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3301      	adds	r3, #1
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	2b03      	cmp	r3, #3
 8000334:	dd9e      	ble.n	8000274 <scanKeypad+0x34>
            }
        }
    }
    return 0; // No key pressed
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3710      	adds	r7, #16
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40020000 	.word	0x40020000
 8000344:	2000000c 	.word	0x2000000c

08000348 <displayNumber>:

// Function to display a number on the 7-segment display
void displayNumber(char key) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    uint8_t segments = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]

    if (key >= '0' && key <= '9') {
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b2f      	cmp	r3, #47	@ 0x2f
 800035a:	d953      	bls.n	8000404 <displayNumber+0xbc>
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b39      	cmp	r3, #57	@ 0x39
 8000360:	d850      	bhi.n	8000404 <displayNumber+0xbc>
        segments = segmentMap[key - '0'];  // Convert char to corresponding number
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	3b30      	subs	r3, #48	@ 0x30
 8000366:	4a29      	ldr	r2, [pc, #164]	@ (800040c <displayNumber+0xc4>)
 8000368:	5cd3      	ldrb	r3, [r2, r3]
 800036a:	73fb      	strb	r3, [r7, #15]
    } else {
        return;  // Ignore non-numeric keys
    }

    HAL_GPIO_WritePin(SEG_PORT, SEG_A, (segments & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	2101      	movs	r1, #1
 8000378:	4825      	ldr	r0, [pc, #148]	@ (8000410 <displayNumber+0xc8>)
 800037a:	f000 fc9d 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_B, (segments & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	105b      	asrs	r3, r3, #1
 8000382:	b2db      	uxtb	r3, r3
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	2102      	movs	r1, #2
 800038e:	4820      	ldr	r0, [pc, #128]	@ (8000410 <displayNumber+0xc8>)
 8000390:	f000 fc92 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_C, (segments & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	109b      	asrs	r3, r3, #2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	2104      	movs	r1, #4
 80003a4:	481a      	ldr	r0, [pc, #104]	@ (8000410 <displayNumber+0xc8>)
 80003a6:	f000 fc87 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_D, (segments & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	10db      	asrs	r3, r3, #3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	2108      	movs	r1, #8
 80003ba:	4815      	ldr	r0, [pc, #84]	@ (8000410 <displayNumber+0xc8>)
 80003bc:	f000 fc7c 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_E, (segments & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	111b      	asrs	r3, r3, #4
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	2110      	movs	r1, #16
 80003d0:	480f      	ldr	r0, [pc, #60]	@ (8000410 <displayNumber+0xc8>)
 80003d2:	f000 fc71 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_F, (segments & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	115b      	asrs	r3, r3, #5
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	2120      	movs	r1, #32
 80003e6:	480a      	ldr	r0, [pc, #40]	@ (8000410 <displayNumber+0xc8>)
 80003e8:	f000 fc66 	bl	8000cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_G, (segments & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	119b      	asrs	r3, r3, #6
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	2140      	movs	r1, #64	@ 0x40
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <displayNumber+0xc8>)
 80003fe:	f000 fc5b 	bl	8000cb8 <HAL_GPIO_WritePin>
 8000402:	e000      	b.n	8000406 <displayNumber+0xbe>
        return;  // Ignore non-numeric keys
 8000404:	bf00      	nop
}
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000000 	.word	0x20000000
 8000410:	40020400 	.word	0x40020400

08000414 <toggleLED>:

// Function to toggle the LED
void toggleLED(int times) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < times; i++) {
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e00b      	b.n	800043a <toggleLED+0x26>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000422:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000426:	4809      	ldr	r0, [pc, #36]	@ (800044c <toggleLED+0x38>)
 8000428:	f000 fc5f 	bl	8000cea <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 500ms delay between toggles
 800042c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000430:	f000 f98c 	bl	800074c <HAL_Delay>
    for (int i = 0; i < times; i++) {
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	dbef      	blt.n	8000422 <toggleLED+0xe>
    }
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40020800 	.word	0x40020800

08000450 <MX_GPIO_Init>:

// Function to initialize GPIO for Keypad, 7-Segment, and LED
void MX_GPIO_Init(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	4b35      	ldr	r3, [pc, #212]	@ (8000530 <MX_GPIO_Init+0xe0>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a34      	ldr	r2, [pc, #208]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
 8000466:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	4b2e      	ldr	r3, [pc, #184]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a2d      	ldr	r2, [pc, #180]	@ (8000530 <MX_GPIO_Init+0xe0>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]
 8000492:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <MX_GPIO_Init+0xe0>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	6313      	str	r3, [r2, #48]	@ 0x30
 800049e:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <MX_GPIO_Init+0xe0>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

    // Initialize Rows (PA0 to PA3) as Output
    GPIO_InitStruct.Pin = ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN;
 80004ba:	230f      	movs	r3, #15
 80004bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ROW_PORT, &GPIO_InitStruct);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4818      	ldr	r0, [pc, #96]	@ (8000534 <MX_GPIO_Init+0xe4>)
 80004d2:	f000 fa45 	bl	8000960 <HAL_GPIO_Init>

    // Initialize Columns (PA4 to PA6) as Input with Pull-up Resistor
    GPIO_InitStruct.Pin = COL1_PIN | COL2_PIN | COL3_PIN;
 80004d6:	2370      	movs	r3, #112	@ 0x70
 80004d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(COL_PORT, &GPIO_InitStruct);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4619      	mov	r1, r3
 80004e8:	4812      	ldr	r0, [pc, #72]	@ (8000534 <MX_GPIO_Init+0xe4>)
 80004ea:	f000 fa39 	bl	8000960 <HAL_GPIO_Init>

    // Initialize 7-Segment Pins (PB0 to PB6) as Output
    GPIO_InitStruct.Pin = SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G;
 80004ee:	237f      	movs	r3, #127	@ 0x7f
 80004f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SEG_PORT, &GPIO_InitStruct);
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	@ (8000538 <MX_GPIO_Init+0xe8>)
 8000506:	f000 fa2b 	bl	8000960 <HAL_GPIO_Init>

    // Initialize LED Pin (PC13) as Output
    GPIO_InitStruct.Pin = LED_PIN;
 800050a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800050e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	@ (800053c <MX_GPIO_Init+0xec>)
 8000524:	f000 fa1c 	bl	8000960 <HAL_GPIO_Init>
}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40023800 	.word	0x40023800
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <HAL_MspInit+0x4c>)
 800054c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800054e:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <HAL_MspInit+0x4c>)
 8000550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000554:	6453      	str	r3, [r2, #68]	@ 0x44
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <HAL_MspInit+0x4c>)
 8000558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800055a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <HAL_MspInit+0x4c>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056a:	4a08      	ldr	r2, [pc, #32]	@ (800058c <HAL_MspInit+0x4c>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000570:	6413      	str	r3, [r2, #64]	@ 0x40
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_MspInit+0x4c>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800057e:	2007      	movs	r0, #7
 8000580:	f000 f9ba 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <NMI_Handler+0x4>

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <MemManage_Handler+0x4>

080005a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e6:	f000 f891 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <SystemInit+0x20>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <SystemInit+0x20>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800064c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000618:	f7ff ffea 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000642:	f000 fb6d 	bl	8000d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000646:	f7ff fddd 	bl	8000204 <main>
  bx  lr    
 800064a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800064c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000658:	08000d88 	.word	0x08000d88
  ldr r2, =_sbss
 800065c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000660:	20000044 	.word	0x20000044

08000664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <HAL_Init+0x40>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <HAL_Init+0x40>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <HAL_Init+0x40>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <HAL_Init+0x40>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_Init+0x40>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_Init+0x40>)
 800068a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f931 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff ff50 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023c00 	.word	0x40023c00

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f93b 	bl	8000946 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 f911 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000018 	.word	0x20000018
 8000704:	20000020 	.word	0x20000020
 8000708:	2000001c 	.word	0x2000001c

0800070c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_IncTick+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_IncTick+0x24>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <HAL_IncTick+0x24>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000020 	.word	0x20000020
 8000730:	20000040 	.word	0x20000040

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <HAL_GetTick+0x14>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000040 	.word	0x20000040

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000754:	f7ff ffee 	bl	8000734 <HAL_GetTick>
 8000758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d005      	beq.n	8000772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_Delay+0x44>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000772:	bf00      	nop
 8000774:	f7ff ffde 	bl	8000734 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8f7      	bhi.n	8000774 <HAL_Delay+0x28>
  {
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000020 	.word	0x20000020

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	@ (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	@ (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	@ 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff8e 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff47 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5c 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff8e 	bl	800084c <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	@ 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	e165      	b.n	8000c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800097c:	2201      	movs	r2, #1
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	429a      	cmp	r2, r3
 8000996:	f040 8154 	bne.w	8000c42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d005      	beq.n	80009b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d130      	bne.n	8000a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	f003 0201 	and.w	r2, r3, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d017      	beq.n	8000a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d123      	bne.n	8000aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	220f      	movs	r2, #15
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	691a      	ldr	r2, [r3, #16]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	69b9      	ldr	r1, [r7, #24]
 8000aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0203 	and.w	r2, r3, #3
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 80ae 	beq.w	8000c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b5d      	ldr	r3, [pc, #372]	@ (8000c60 <HAL_GPIO_Init+0x300>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a5c      	ldr	r2, [pc, #368]	@ (8000c60 <HAL_GPIO_Init+0x300>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c60 <HAL_GPIO_Init+0x300>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b02:	4a58      	ldr	r2, [pc, #352]	@ (8000c64 <HAL_GPIO_Init+0x304>)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	3302      	adds	r3, #2
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4f      	ldr	r2, [pc, #316]	@ (8000c68 <HAL_GPIO_Init+0x308>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d025      	beq.n	8000b7a <HAL_GPIO_Init+0x21a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a4e      	ldr	r2, [pc, #312]	@ (8000c6c <HAL_GPIO_Init+0x30c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d01f      	beq.n	8000b76 <HAL_GPIO_Init+0x216>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a4d      	ldr	r2, [pc, #308]	@ (8000c70 <HAL_GPIO_Init+0x310>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d019      	beq.n	8000b72 <HAL_GPIO_Init+0x212>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a4c      	ldr	r2, [pc, #304]	@ (8000c74 <HAL_GPIO_Init+0x314>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0x20e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a4b      	ldr	r2, [pc, #300]	@ (8000c78 <HAL_GPIO_Init+0x318>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00d      	beq.n	8000b6a <HAL_GPIO_Init+0x20a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4a      	ldr	r2, [pc, #296]	@ (8000c7c <HAL_GPIO_Init+0x31c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d007      	beq.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a49      	ldr	r2, [pc, #292]	@ (8000c80 <HAL_GPIO_Init+0x320>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_GPIO_Init+0x202>
 8000b5e:	2306      	movs	r3, #6
 8000b60:	e00c      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b62:	2307      	movs	r3, #7
 8000b64:	e00a      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b66:	2305      	movs	r3, #5
 8000b68:	e008      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e004      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b72:	2302      	movs	r3, #2
 8000b74:	e002      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <HAL_GPIO_Init+0x21c>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	f002 0203 	and.w	r2, r2, #3
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	4093      	lsls	r3, r2
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b8c:	4935      	ldr	r1, [pc, #212]	@ (8000c64 <HAL_GPIO_Init+0x304>)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bbe:	4a31      	ldr	r2, [pc, #196]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000be8:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	f67f ae96 	bls.w	800097c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40013800 	.word	0x40013800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40021400 	.word	0x40021400
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40013c00 	.word	0x40013c00

08000c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cd4:	e003      	b.n	8000cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	041a      	lsls	r2, r3, #16
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	619a      	str	r2, [r3, #24]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	041a      	lsls	r2, r3, #16
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	619a      	str	r2, [r3, #24]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <__libc_init_array>:
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	4d0d      	ldr	r5, [pc, #52]	@ (8000d58 <__libc_init_array+0x38>)
 8000d24:	4c0d      	ldr	r4, [pc, #52]	@ (8000d5c <__libc_init_array+0x3c>)
 8000d26:	1b64      	subs	r4, r4, r5
 8000d28:	10a4      	asrs	r4, r4, #2
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	42a6      	cmp	r6, r4
 8000d2e:	d109      	bne.n	8000d44 <__libc_init_array+0x24>
 8000d30:	4d0b      	ldr	r5, [pc, #44]	@ (8000d60 <__libc_init_array+0x40>)
 8000d32:	4c0c      	ldr	r4, [pc, #48]	@ (8000d64 <__libc_init_array+0x44>)
 8000d34:	f000 f818 	bl	8000d68 <_init>
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	10a4      	asrs	r4, r4, #2
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	42a6      	cmp	r6, r4
 8000d40:	d105      	bne.n	8000d4e <__libc_init_array+0x2e>
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
 8000d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d48:	4798      	blx	r3
 8000d4a:	3601      	adds	r6, #1
 8000d4c:	e7ee      	b.n	8000d2c <__libc_init_array+0xc>
 8000d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d52:	4798      	blx	r3
 8000d54:	3601      	adds	r6, #1
 8000d56:	e7f2      	b.n	8000d3e <__libc_init_array+0x1e>
 8000d58:	08000d80 	.word	0x08000d80
 8000d5c:	08000d80 	.word	0x08000d80
 8000d60:	08000d80 	.word	0x08000d80
 8000d64:	08000d84 	.word	0x08000d84

08000d68 <_init>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr

08000d74 <_fini>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr
